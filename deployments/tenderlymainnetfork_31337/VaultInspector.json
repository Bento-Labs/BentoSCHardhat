{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.27\"},\"sources\":{\"contracts/vault/VaultInspector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {AssetInfo} from \\\"./VaultDefinitions.sol\\\";\\nimport {IVaultCore} from \\\"../interfaces/IVaultCore.sol\\\";\\n\\n/**\\n * @title VaultInspector\\n * @notice This contract allows users to query information about assets and their configurations in the vault\\n */\\ncontract VaultInspector {\\n\\n    /**\\n     * @notice Retrieves the liquid token (ltToken) associated with a given asset\\n     * @param _asset The address of the asset\\n     * @param vault The address of the vault\\n     * @return The address of the ltToken\\n     */\\n    function getLtToken(address _asset, IVaultCore vault) public view returns (address) {\\n        AssetInfo memory assetInfo = vault.assetToAssetInfo(_asset);\\n        return assetInfo.ltToken;\\n    }\\n\\n    /**\\n     * @notice Retrieves the conversion ratios from tokens to shares for all assets in the vault\\n     * @param vault The address of the vault\\n     * @return An array of conversion ratios\\n     */\\n    function getTokenToShareRatios(IVaultCore vault) public view returns (uint256[] memory) {\\n        address[] memory allAssets = vault.getAllAssets();\\n        uint256 allAssetsLength = allAssets.length;\\n        uint256[] memory ratios = new uint256[](allAssetsLength);\\n        for (uint256 i; i < allAssetsLength; ++i) {\\n            address tokenAddress = allAssets[i];\\n            address ltToken = getLtToken(tokenAddress, vault    );\\n            uint256 unit = 10 ** IERC20Metadata(tokenAddress).decimals();\\n            ratios[i] = IERC4626(ltToken).convertToShares(unit);\\n        }\\n        return ratios;\\n    }\\n\\n    /**\\n     * @notice Retrieves the weights of all assets in the vault\\n     * @param vault The address of the vault\\n     * @return An array of asset weights\\n     */\\n    function getWeights(IVaultCore vault) public view returns (uint32[] memory) {\\n        address[] memory allAssets = vault.getAllAssets();\\n        uint32[] memory weights = new uint32[](allAssets.length);\\n        uint256 allAssetsLength = allAssets.length;\\n        for (uint256 i; i < allAssetsLength; ++i) {\\n            AssetInfo memory assetInfo = vault.assetToAssetInfo(allAssets[i]);\\n            weights[i] = assetInfo.weight;\\n        }\\n        return weights;\\n    }\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"contracts/vault/VaultDefinitions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\n// We put the definitions outside so they can be imported to different contracts (in this case VaultCore and VaultInspector)\\n    enum StrategyType {\\n        Generalized4626,\\n        Ethena,\\n        Other\\n    }\\n    struct AssetInfo {\\n        address ltToken;\\n        uint32 weight;\\n        uint8 decimals;\\n        uint8 index;\\n        StrategyType strategyType;\\n        address strategy;\\n        uint256 minimalAmountInVault;\\n    }\",\"versionPragma\":\"0.8.27\"},\"contracts/interfaces/IVaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\nimport {AssetInfo} from \\\"../vault/VaultDefinitions.sol\\\";\\n\\ninterface IVaultCore {\\n    function assetToAssetInfo(address _asset) external view returns (AssetInfo memory);\\n    function getWeights() external view returns (uint32[] memory);\\n    function getAllAssets() external view returns (address[] memory);\\n}\",\"versionPragma\":\"0.8.27\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x8FDE145B1289a99C6B15f363309d3cc9276c0b16","bytecode":"0x608080604052346015576106bf908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081632ac50af0146102bc57508063a6daa8431461009b5763c7d7a7761461004057600080fd5b34610096576040366003190112610096576004356001600160a01b038116810361009657602435906001600160a01b03821682036100965760209161008491610622565b6040516001600160a01b039091168152f35b600080fd5b34610096576020366003190112610096576100b4610434565b604051632acada4d60e01b81526000816004816001600160a01b0386165afa90811561023e57600091610299575b508051916100ef83610482565b926100fd604051948561044a565b80845261010981610482565b602085019390601f190136853760005b8281106101655784866040519182916020830190602084525180915260408301919060005b81811061014c575050500390f35b825184528594506020938401939092019160010161013e565b6001600160a01b036101778284610530565b5116600460206101878784610622565b926040519283809263313ce56760e01b82525afa801561023e57600090610260575b60ff915016604d811161024a576040516363737ac960e11b8152600a9190910a600482015290602090829060249082906001600160a01b03165afa90811561023e57600091610209575b50906001916102028289610530565b5201610119565b906020823d8211610236575b816102226020938361044a565b8101031261023357505160016101f3565b80fd5b3d9150610215565b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b6020823d8211610291575b816102786020938361044a565b81010312610233575061028c60ff9161055a565b6101a9565b3d915061026b565b6102b691503d806000833e6102ae818361044a565b8101906104ae565b826100e2565b34610096576020366003190112610096576001600160a01b036102dd610434565b632acada4d60e01b83521690600081600481855afa90811561023e57600091610419575b5080519161032761031184610482565b9361031f604051958661044a565b808552610482565b602084019290601f190136843780519060005b82811061038c5784866040519182916020830190602084525180915260408301919060005b81811061036d575050500390f35b825163ffffffff1684528594506020938401939092019160010161035f565b6001600160a01b0361039e8284610530565b516040516357e2850760e01b8152911660048201529060e082602481885afa801561023e57602063ffffffff916001946000916103eb575b500151166103e48289610530565b520161033a565b61040c915060e03d8111610412575b610404818361044a565b810190610568565b8a6103d6565b503d6103fa565b61042e91503d806000833e6102ae818361044a565b82610301565b600435906001600160a01b038216820361009657565b90601f8019910116810190811067ffffffffffffffff82111761046c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161046c5760051b60200190565b51906001600160a01b038216820361009657565b6020818303126100965780519067ffffffffffffffff821161009657019080601f830112156100965781516104e281610482565b926104f0604051948561044a565b81845260208085019260051b82010192831161009657602001905b8282106105185750505090565b602080916105258461049a565b81520191019061050b565b80518210156105445760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b519060ff8216820361009657565b908160e09103126100965760405190600060e0830167ffffffffffffffff81118482101761060e5760405261059c8261049a565b8352602082015163ffffffff8116810361060a5760208401526105c16040830161055a565b60408401526105d26060830161055a565b606084015260808201519060038210156102335750608083015260c0906105fb60a0820161049a565b60a0840152015160c082015290565b5080fd5b634e487b7160e01b82526041600452602482fd5b6040516357e2850760e01b81526001600160a01b0391821660048201529160e09183916024918391165afa90811561023e5760009161066a575b50516001600160a01b031690565b610683915060e03d60e01161041257610404818361044a565b3861065c56fea2646970667358221220e3d83b0a68666abbd2a6456188c82aa29d16898d2d6b0a0544e62198a9220b0264736f6c634300081b0033","deployedBytecode":"0x608080604052600436101561001357600080fd5b60003560e01c9081632ac50af0146102bc57508063a6daa8431461009b5763c7d7a7761461004057600080fd5b34610096576040366003190112610096576004356001600160a01b038116810361009657602435906001600160a01b03821682036100965760209161008491610622565b6040516001600160a01b039091168152f35b600080fd5b34610096576020366003190112610096576100b4610434565b604051632acada4d60e01b81526000816004816001600160a01b0386165afa90811561023e57600091610299575b508051916100ef83610482565b926100fd604051948561044a565b80845261010981610482565b602085019390601f190136853760005b8281106101655784866040519182916020830190602084525180915260408301919060005b81811061014c575050500390f35b825184528594506020938401939092019160010161013e565b6001600160a01b036101778284610530565b5116600460206101878784610622565b926040519283809263313ce56760e01b82525afa801561023e57600090610260575b60ff915016604d811161024a576040516363737ac960e11b8152600a9190910a600482015290602090829060249082906001600160a01b03165afa90811561023e57600091610209575b50906001916102028289610530565b5201610119565b906020823d8211610236575b816102226020938361044a565b8101031261023357505160016101f3565b80fd5b3d9150610215565b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b6020823d8211610291575b816102786020938361044a565b81010312610233575061028c60ff9161055a565b6101a9565b3d915061026b565b6102b691503d806000833e6102ae818361044a565b8101906104ae565b826100e2565b34610096576020366003190112610096576001600160a01b036102dd610434565b632acada4d60e01b83521690600081600481855afa90811561023e57600091610419575b5080519161032761031184610482565b9361031f604051958661044a565b808552610482565b602084019290601f190136843780519060005b82811061038c5784866040519182916020830190602084525180915260408301919060005b81811061036d575050500390f35b825163ffffffff1684528594506020938401939092019160010161035f565b6001600160a01b0361039e8284610530565b516040516357e2850760e01b8152911660048201529060e082602481885afa801561023e57602063ffffffff916001946000916103eb575b500151166103e48289610530565b520161033a565b61040c915060e03d8111610412575b610404818361044a565b810190610568565b8a6103d6565b503d6103fa565b61042e91503d806000833e6102ae818361044a565b82610301565b600435906001600160a01b038216820361009657565b90601f8019910116810190811067ffffffffffffffff82111761046c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161046c5760051b60200190565b51906001600160a01b038216820361009657565b6020818303126100965780519067ffffffffffffffff821161009657019080601f830112156100965781516104e281610482565b926104f0604051948561044a565b81845260208085019260051b82010192831161009657602001905b8282106105185750505090565b602080916105258461049a565b81520191019061050b565b80518210156105445760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b519060ff8216820361009657565b908160e09103126100965760405190600060e0830167ffffffffffffffff81118482101761060e5760405261059c8261049a565b8352602082015163ffffffff8116810361060a5760208401526105c16040830161055a565b60408401526105d26060830161055a565b606084015260808201519060038210156102335750608083015260c0906105fb60a0820161049a565b60a0840152015160c082015290565b5080fd5b634e487b7160e01b82526041600452602482fd5b6040516357e2850760e01b81526001600160a01b0391821660048201529160e09183916024918391165afa90811561023e5760009161066a575b50516001600160a01b031690565b610683915060e03d60e01161041257610404818361044a565b3861065c56fea2646970667358221220e3d83b0a68666abbd2a6456188c82aa29d16898d2d6b0a0544e62198a9220b0264736f6c634300081b0033","abi":[{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"contract IVaultCore","name":"vault","type":"address"}],"name":"getLtToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IVaultCore","name":"vault","type":"address"}],"name":"getTokenToShareRatios","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IVaultCore","name":"vault","type":"address"}],"name":"getWeights","outputs":[{"internalType":"uint32[]","name":"","type":"uint32[]"}],"stateMutability":"view","type":"function"}]}