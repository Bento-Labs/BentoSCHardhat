{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.27\"},\"sources\":{\"contracts/vault/VaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {StableMath} from \\\"../utils/StableMath.sol\\\";\\nimport {IOracle} from \\\"../interfaces/IOracle.sol\\\";\\nimport {VaultAdmin} from \\\"./VaultAdmin.sol\\\";\\nimport {BentoUSD} from \\\"../BentoUSD.sol\\\";\\nimport {IStrategy} from \\\"../interfaces/IStrategy.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title VaultCore\\n * @notice Core vault implementation for BentoUSD stablecoin system\\n * @dev Handles minting, redeeming, and asset allocation operations\\n */\\ncontract VaultCore is Initializable, VaultAdmin {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n    uint256 public constant deviationTolerance = 1; // in percentage\\n\\n    event Swap(\\n        address inputAsset,\\n        address outputAsset,\\n        address router,\\n        uint256 amount\\n    );\\n\\n    event AssetAllocated(\\n        address asset,\\n        address strategy,\\n        uint256 amount\\n    );\\n\\n    error SwapFailed(string reason);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // === External State-Changing Functions ===\\n    \\n    function initialize(address _governor) public initializer {\\n        require(_governor != address(0), \\\"Governor cannot be zero address\\\");\\n        governor = _governor;\\n    }\\n\\n    /**\\n     * @notice Mints BentoUSD tokens in exchange for a single supported asset\\n     * @param _asset Address of the input asset\\n     * @param _amount Amount of input asset to deposit\\n     * @param _minimumBentoUSDAmount Minimum acceptable BentoUSD output\\n     * @param _routers Array of DEX router addresses for swaps\\n     * @param _routerData Encoded swap data for each router\\n     */\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumBentoUSDAmount,\\n        address[] calldata _routers,\\n        bytes[] calldata _routerData\\n    ) external {\\n        _mint(_asset, _amount, _minimumBentoUSDAmount, _routers, _routerData);\\n    }\\n\\n    /**\\n     * @notice Mints BentoUSD by depositing a proportional basket of all supported assets\\n     * @param _amount Total USD value to deposit\\n     * @param _minimumBentoUSDAmount Minimum acceptable BentoUSD output\\n     */\\n    function mintBasket(\\n        uint256 _amount,\\n        uint256 _minimumBentoUSDAmount\\n    ) external {\\n        (uint256[] memory amounts, uint256 totalAmount) = getDepositAssetAmounts(_amount);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            address assetAddress = allAssets[i];\\n            IERC20(assetAddress).safeTransferFrom(msg.sender, address(this), amounts[i]);\\n        }\\n        require(\\n            totalAmount > _minimumBentoUSDAmount,\\n            string(\\n                abi.encodePacked(\\n            \\\"VaultCore: price deviation too high. Total value: \\\",\\n            Strings.toString(totalAmount),\\n            \\\", Minimum required: \\\",\\n                    Strings.toString(_minimumBentoUSDAmount)\\n                )\\n            )\\n        );\\n        BentoUSD(bentoUSD).mint(msg.sender, totalAmount);\\n    }\\n\\n    /**\\n     * @notice Redeems BentoUSD for liquid staking tokens of supported assets\\n     * @param _amount Amount of BentoUSD to redeem\\n     */\\n    function redeemLTBasket(uint256 _amount) external {\\n        uint256[] memory ltAmounts = getOutputLTAmounts(_amount);\\n        require(IERC20(bentoUSD).balanceOf(msg.sender) >= _amount, \\\"VaultCore: insufficient BentoUSD in user's wallet\\\");\\n        BentoUSD(bentoUSD).burn(msg.sender, _amount);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            address assetAddress = allAssets[i];\\n            address ltToken = assets[assetAddress].ltToken;\\n            require(IERC20(ltToken).balanceOf(address(this)) >= ltAmounts[i], \\\"VaultCore: insufficient LT tokens in vault\\\");\\n            IERC20(ltToken).safeTransfer(msg.sender, ltAmounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allocates excess assets in the vault to yield-generating strategies\\n     * @dev Can only be called by the governor\\n     */\\n    function allocate() external onlyGovernor {\\n        _allocate();\\n    }\\n\\n    // === Internal State-Changing Functions ===\\n\\n    function _mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumBentoUSDAmount,\\n        address[] calldata _routers,\\n        bytes[] calldata _routerData\\n    ) internal virtual {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            _routerData.length == allAssets.length,\\n            \\\"Invalid router data length\\\"\\n        );\\n\\n        // store total weight into a memory variable to save gas\\n        uint256 _totalWeight = totalWeight;\\n        uint256 _allAssetsLength = allAssets.length;\\n\\n        // store the total value of the basket\\n        uint256 totalValueOfBasket = 0;\\n        uint256 allAssetsLength = allAssets.length;\\n        // we iterate through all assets\\n        for (uint256 i = 0; i < allAssetsLength; i++) {\\n            address assetAddress = allAssets[i];\\n            // we only trade into assets that are not the asset we are depositing\\n            if (assetAddress != _asset) {\\n                Asset memory asset = assets[assetAddress];\\n                // get the balance of the asset before the trade\\n                uint256 balanceBefore = IERC20(assetAddress).balanceOf(\\n                    address(this)\\n                );\\n                // get asset price from oracle\\n                uint256 assetPrice = IOracle(oracleRouter).price(assetAddress);\\n                if (assetPrice > 1e18) {\\n                    assetPrice = 1e18;\\n                }\\n                _swap(_routers[i], _routerData[i]);\\n                // get the balance of the asset after the trade\\n                uint256 balanceAfter = IERC20(assetAddress).balanceOf(\\n                    address(this)\\n                );\\n                // get the amount of asset that is not in the balance after the trade\\n                uint256 outputAmount = balanceAfter - balanceBefore;\\n                emit Swap(\\n                    _asset,\\n                    assetAddress,\\n                    _routers[i],\\n                    outputAmount\\n                );\\n                uint256 expectedOutputAmount = (_amount * asset.weight) /\\n                    _totalWeight;\\n                uint256 deviation = (expectedOutputAmount > outputAmount)\\n                    ? expectedOutputAmount - outputAmount\\n                    : outputAmount - expectedOutputAmount;\\n                uint256 deviationPercentage = (deviation * 100) /\\n                    expectedOutputAmount;\\n                require(\\n                    deviationPercentage < deviationTolerance,\\n                    \\\"VaultCore: deviation from desired weights too high\\\"\\n                );\\n                totalValueOfBasket += (outputAmount * assetPrice) / 1e18;\\n            } else {\\n                uint256 assetPrice = IOracle(oracleRouter).price(assetAddress);\\n                totalValueOfBasket += (_amount * assetPrice) / 1e18;\\n            }\\n        }\\n\\n        require(\\n            totalValueOfBasket > _minimumBentoUSDAmount,\\n            string(\\n                abi.encodePacked(\\n                    \\\"VaultCore: price deviation too high. Total value: \\\",\\n                    Strings.toString(totalValueOfBasket),\\n                    \\\", Minimum required: \\\",\\n                    Strings.toString(_minimumBentoUSDAmount)\\n                )\\n            )\\n        );\\n        BentoUSD(bentoUSD).mint(msg.sender, totalValueOfBasket);\\n    }\\n\\n    function _swap(address _router, bytes calldata _routerData) internal {\\n        (bool success, bytes memory _data) = _router.call(_routerData);\\n        if (!success) {\\n            if (_data.length > 0) revert SwapFailed(string(_data));\\n            else revert SwapFailed(\\\"Unknown reason\\\");\\n        }\\n    }\\n\\n    function _redeemUnderlyingBasket(uint256 _amount) internal {\\n        uint256 allAssetsLength = allAssets.length;\\n        // first we try to withdraw from the buffer wallet inside the vault core\\n        // if not enough, we try to exchange the yield-bearing token to the underlying stable token\\n        for (uint256 i = 0; i < allAssetsLength; i++) {\\n            address assetAddress = allAssets[i];\\n            uint256 assetPrice = IOracle(oracleRouter).price(assetAddress);\\n            if (assetPrice < 1e18) {\\n                assetPrice = 1e18;\\n            }\\n            uint256 amountToRedeem = (_amount *\\n                assets[assetAddress].weight *\\n                assetPrice) / (totalWeight * 1e18);\\n            uint256 amountInBuffer = IERC20(assetAddress).balanceOf(address(this));\\n            uint256 missingAmount;\\n            if (amountInBuffer < amountToRedeem) {\\n                missingAmount = amountToRedeem - amountInBuffer;\\n                amountToRedeem = amountInBuffer;\\n            }\\n            // if there is any missing amount then we need to withdraw them from the protocol\\n            if (missingAmount > 0) {\\n                IERC20(assets[assetAddress].ltToken).safeTransfer(msg.sender, missingAmount);\\n            }\\n            IERC20(assetAddress).safeTransfer(msg.sender, amountToRedeem);\\n        }\\n        BentoUSD(bentoUSD).burn(msg.sender, _amount);\\n    }\\n\\n    function _redeemWithWaitingPeriod(uint256 _amount) internal {\\n        revert(\\\"VaultCore: redeemWithWaitingPeriod is not implemented\\\");\\n    }\\n\\n    function _allocate() internal virtual {\\n        uint256 allAssetsLength = allAssets.length;\\n        for (uint256 i = 0; i < allAssetsLength; ++i) {\\n            IERC20 asset = IERC20(allAssets[i]);\\n            uint256 assetBalance = asset.balanceOf(address(this));\\n            uint256 minimalAmount = minimalAmountInVault[address(asset)];\\n            if (assetBalance < minimalAmount) continue;\\n            // Multiply the balance by the vault buffer modifier and truncate\\n            // to the scale of the asset decimals\\n            uint256 allocateAmount = assetBalance - minimalAmount;\\n\\n            address depositStrategyAddr = assetToStrategy[address(asset)];\\n\\n            if (depositStrategyAddr != address(0) && allocateAmount > 0) {\\n                IStrategy strategy = IStrategy(depositStrategyAddr);\\n                // Transfer asset to Strategy and call deposit method to\\n                // mint or take required action\\n                asset.safeTransfer(address(strategy), allocateAmount);\\n                strategy.deposit(allocateAmount);\\n                emit AssetAllocated(\\n                    address(asset),\\n                    depositStrategyAddr,\\n                    allocateAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    // === Public/External View Functions ===\\n\\n    /**\\n     * @notice Calculates the required amounts of each asset for a proportional deposit\\n     * @param desiredAmount Total USD value to be deposited\\n     * @return Array of asset amounts and total USD value\\n     */\\n    function getDepositAssetAmounts(uint256 desiredAmount) public view returns (uint256[] memory, uint256) {\\n        uint256 numberOfAssets = allAssets.length;\\n        uint256[] memory relativeWeights = new uint256[](numberOfAssets);\\n        uint256[] memory amounts = new uint256[](numberOfAssets);\\n        uint256 totalRelativeWeight = 0;\\n        for (uint256 i = 0; i < numberOfAssets; i++) {\\n            address assetAddress = allAssets[i];\\n\\n            uint256 assetPrice = IOracle(oracleRouter).price(assetAddress);\\n            if (assetPrice > 1e18) {\\n                assetPrice = 1e18;\\n            }\\n            relativeWeights[i] = assets[assetAddress].weight * assetPrice;\\n            totalRelativeWeight += relativeWeights[i];\\n        }\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < numberOfAssets; i++) {\\n            // we round it upwards to avoid rounding errors detrimental for the protocol\\n            amounts[i] = (desiredAmount * relativeWeights[i]) / totalRelativeWeight;\\n            totalAmount += amounts[i];\\n            amounts[i] = normalizeDecimals(IERC20Metadata(allAssets[i]).decimals(), amounts[i]);\\n        }\\n        return (amounts, totalAmount);\\n    }\\n\\n    function getOutputLTAmounts(uint256 inputAmount) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](allAssets.length);\\n        address priceOracle = oracleRouter;\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            address asset = allAssets[i];\\n            Asset memory assetInfo = assets[asset];\\n            // first we calculate the amount corresponding to the asset in USD \\n            uint256 partialInputAmount = (inputAmount * assetInfo.weight) / totalWeight;\\n            amounts[i] = convertToLTAmount(partialInputAmount, asset, assetInfo.ltToken, priceOracle, true);\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Converts a USD amount to the corresponding liquid staking token amount\\n     * @dev Uses oracle price to convert USD value to underlying asset amount, then normalizes decimals\\n     * @param amount The amount in USD (with 18 decimals)\\n     * @param asset The address of the underlying asset (e.g., DAI, USDC)\\n     * @param priceOracle The address of the price oracle, we put oracle address as a parameter so we don't have to load from storage multiple times in getOutputLTAmounts\\n     * @param redeemFlag If true (in case of redeeming), uses max price (1e18) for prices below 1e18\\n     *                   If false (in case of minting), uses min price (1e18) for prices above 1e18\\n     * @return The amount of liquid staking tokens corresponding to the USD value\\n     *\\n     * @custom:example For converting 1000 USD to sDAI:\\n     * - amount = 1000e18 (1000 USD with 18 decimals)\\n     * - asset = DAI address\\n     * - redeemFlag = false (for minting)\\n     * Returns the equivalent amount of sDAI tokens\\n     */\\n    function convertToLTAmount(\\n        uint256 amount,\\n        address asset,\\n        address ltToken,\\n        address priceOracle,\\n        bool redeemFlag\\n    ) public view returns (uint256) {\\n        uint256 assetPrice = IOracle(priceOracle).price(asset);\\n        if (redeemFlag) {\\n            if (assetPrice < 1e18) {\\n                assetPrice = 1e18;\\n            }\\n        } else {\\n            if (assetPrice > 1e18) {\\n                assetPrice = 1e18;\\n            }\\n        }\\n        uint256 amountAfterPrice = normalizeDecimals(assets[asset].decimals, amount * 1e18 / assetPrice);\\n        return IERC4626(ltToken).convertToShares(amountAfterPrice);\\n    }\\n\\n    function getTotalValue() public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            address asset = allAssets[i];\\n            // Get direct asset balance\\n            uint256 balance = IERC20(asset).balanceOf(address(this));\\n            \\n            // Get LT token balance and convert to underlying\\n            address ltToken = assets[asset].ltToken;\\n            uint256 ltBalance = IERC20(ltToken).balanceOf(address(this));\\n            uint256 underlyingBalance = IERC4626(ltToken).convertToAssets(ltBalance);\\n            \\n            // Get total balance (direct + underlying from LT)\\n            uint256 totalBalance = balance + underlyingBalance;\\n            \\n            // Multiply by price to get USD value\\n            uint256 assetPrice = IOracle(oracleRouter).price(asset);\\n            totalValue += (totalBalance * assetPrice) / 1e18;\\n        }\\n        return totalValue;\\n    }\\n\\n    function getTokenToShareRatios() public view returns (uint256[] memory) {\\n        uint256 allAssetsLength = allAssets.length;\\n        uint256[] memory ratios = new uint256[](allAssetsLength);\\n        for (uint256 i = 0; i < allAssetsLength; i++) {\\n            address tokenAddress = allAssets[i];\\n            address ltToken = assets[allAssets[i]].ltToken;\\n            uint256 unit = 10 ** IERC20Metadata(tokenAddress).decimals();\\n            ratios[i] = IERC4626(ltToken).convertToShares(unit);\\n        }\\n        return ratios;\\n    }\\n\\n    // === Internal Pure Functions ===\\n\\n    function normalizeDecimals(uint8 assetDecimals, uint256 amount) internal pure returns (uint256) {\\n        if (assetDecimals < 18) {\\n            return amount / 10 ** (18 - assetDecimals);\\n        } else if (assetDecimals > 18) {\\n            return amount * 10 ** (assetDecimals - 18);\\n        }\\n        return amount;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x * (10 ** (to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x / (10 ** (from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x * (y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z / scale;\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x * y;\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled + (FULL_SCALE - 1);\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil / FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x * FULL_SCALE;\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z / y;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title BentoToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Le Anh Dung, Bento Labs\\n */\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract VaultStorage {\\n    using SafeERC20 for IERC20;\\n\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        bool isSupported;\\n        uint8 decimals;\\n        uint32 weight;\\n        address ltToken;\\n    }\\n\\n    uint256 public totalWeight;\\n\\n    address public governor;\\n    address public bentoUSD;\\n    address public oracleRouter;\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) public assets;\\n    /// @dev list of all assets supported by the vault.\\n    // slither-disable-next-line uninitialized-state\\n    address[] public allAssets;\\n\\n    mapping(address => address) public ltTokenToAsset;\\n    /// @dev amount of asset we want to keep in the vault to cover for fast redemption\\n    mapping(address => uint256) public minimalAmountInVault;\\n\\n    mapping(address => address) public assetToStrategy;\\n    mapping(address => address) public assetToEthenaWalletProxy;\\n\\n    function getWeights() public view returns (uint32[] memory) {\\n        uint32[] memory weights = new uint32[](allAssets.length);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            weights[i] = assets[allAssets[i]].weight;\\n        }\\n        return weights;\\n    }\\n\\n    function getAssets() public view returns (Asset[] memory) {\\n        Asset[] memory _assets = new Asset[](allAssets.length);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            _assets[i] = assets[allAssets[i]];\\n        }\\n        return _assets;\\n    }\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/vault/VaultAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title bentoToken VaultAdmin contract\\n * @notice The VaultAdmin contract makes configuration and admin calls on the vault.\\n * @author Le Anh Dung\\n */\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {StableMath} from \\\"../utils/StableMath.sol\\\";\\n\\nimport {IOracle} from \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"./VaultStorage.sol\\\";\\n\\ncontract VaultAdmin is VaultStorage {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n\\n    event AssetAdded(address indexed asset, uint8 decimals, uint32 weight);\\n    event AssetRemoved(address indexed asset);\\n    event AssetChanged(address indexed asset, uint8 decimals, uint32 weight);\\n    event OracleRouterUpdated(address indexed oracleRouter);\\n    event BentoUSDUpdated(address indexed bentoUSD);\\n    event GovernorUpdated(address indexed governor);\\n    event AssetWeightChanged(\\n        address indexed asset,\\n        uint32 oldWeight,\\n        uint32 newWeight\\n    );\\n\\n    /***************************************\\n                 Configuration\\n    ****************************************/\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"Only governor can call this function\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set address of price provider.\\n     * @param _oracleRouter Address of price provider\\n     */\\n    function setOracleRouter(address _oracleRouter) external onlyGovernor {\\n        oracleRouter = _oracleRouter;\\n        emit OracleRouterUpdated(_oracleRouter);\\n    }\\n\\n    function setBentoUSD(address _bentoUSD) external onlyGovernor {\\n        bentoUSD = _bentoUSD;\\n        emit BentoUSDUpdated(_bentoUSD);\\n    }\\n    /* setAsset is used to add a new asset to the vault.\\n     *  _asset: the address of the asset\\n     *  _decimals: the number of decimals of the asset\\n     *  _weight: the weight of the asset\\n     */\\n    function setAsset(\\n        address _asset,\\n        uint8 _decimals,\\n        uint32 _weight,\\n        address _ltToken\\n    ) external onlyGovernor {\\n        require(!assets[_asset].isSupported, \\\"Asset is already supported\\\");\\n        _changeAssetWeight(_asset, 0, _weight);\\n        assets[_asset].isSupported = true;\\n        assets[_asset].decimals = _decimals;\\n        assets[_asset].ltToken = _ltToken;\\n        allAssets.push(_asset);\\n        emit AssetAdded(_asset, _decimals, _weight);\\n    }\\n\\n    /* removeAsset is used to remove an asset from the vault.\\n     *  _asset: the address of the asset\\n     */\\n    function removeAsset(address _asset) external onlyGovernor {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        _changeAssetWeight(_asset, assets[_asset].weight, 0);\\n        assets[_asset].isSupported = false;\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            if (allAssets[i] == _asset) {\\n                allAssets[i] = allAssets[allAssets.length - 1];\\n                allAssets.pop();\\n                break;\\n            }\\n        }\\n        emit AssetRemoved(_asset);\\n    }\\n\\n    /* changeAsset is used to change the weight of an asset in the vault.\\n     *  _asset: the address of the asset\\n     *  _decimals: the new number of decimals of the asset\\n     *  _weight: the new weight of the asset\\n     */\\n    function changeAsset(\\n        address _asset,\\n        uint8 _decimals,\\n        uint32 _weight,\\n        address _ltToken\\n    ) external onlyGovernor {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        _changeAssetWeight(_asset, assets[_asset].weight, _weight);\\n        assets[_asset].decimals = _decimals;\\n        assets[_asset].ltToken = _ltToken;\\n        emit AssetChanged(_asset, _decimals, _weight);\\n    }\\n\\n    /* _changeAssetWeight is used to change the weight of an asset and also the totalWeight of all assets.\\n     *  _asset: the address of the asset\\n     *  _oldWeight: the old weight of the asset\\n     *  _newWeight: the new weight of the asset\\n     */\\n    function _changeAssetWeight(\\n        address _asset,\\n        uint32 _oldWeight,\\n        uint32 _newWeight\\n    ) internal {\\n        totalWeight = totalWeight + _newWeight - _oldWeight;\\n        assets[_asset].weight = _newWeight;\\n        emit AssetWeightChanged(_asset, _oldWeight, _newWeight);\\n    }\\n\\n    function setMinimalAmountInVault(address _asset, uint256 _amount) external onlyGovernor {\\n        minimalAmountInVault[_asset] = _amount;\\n    }\\n\\n    function setStrategy(address _asset, address _strategy) external onlyGovernor {\\n        assetToStrategy[_asset] = _strategy;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/interfaces/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCore is IERC165 {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the OFT standard\\n */\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n        require(_buf.length >= 4);\\n        uint _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.6\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint _start,\\n        uint _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"versionPragma\":\">=0.8.0 <0.9.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(\\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\\n            \\\"LzApp: invalid source sending contract\\\"\\n        );\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint _nativeFee\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(\\n        uint16 _dstChainId,\\n        uint16 _type,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit + _extraGas, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) {\\n            // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = _path;\\n        emit SetTrustedRemote(_remoteChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(\\n        uint16 _dstChainId,\\n        uint16 _packetType,\\n        uint _minGas\\n    ) external onlyOwner {\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft(),\\n            150,\\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\\n        );\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload,\\n        bytes memory _reason\\n    ) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"./interfaces/IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\\n    using BytesLib for bytes;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint16 public constant PT_SEND = 0;\\n\\n    bool public useCustomAdapterParams;\\n\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = abi.encode(PT_SEND, _toAddress, _amount);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        uint16 packetType;\\n        assembly {\\n            packetType := mload(add(_payload, 32))\\n        }\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        uint amount = _debitFrom(_from, _dstChainId, _toAddress, _amount);\\n\\n        bytes memory lzPayload = abi.encode(PT_SEND, _toAddress, amount);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(\\n        uint16 _srcChainId,\\n        bytes memory,\\n        uint64,\\n        bytes memory _payload\\n    ) internal virtual {\\n        (, bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (uint16, bytes, uint));\\n\\n        address to = toAddressBytes.toAddress(0);\\n\\n        amount = _creditTo(_srcChainId, to, amount);\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _checkAdapterParams(\\n        uint16 _dstChainId,\\n        uint16 _pkType,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _debitFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n\\n    function _creditTo(\\n        uint16 _srcChainId,\\n        address _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./interfaces/IOFT.sol\\\";\\nimport \\\"./OFTCore.sol\\\";\\n\\n// override decimal() function is needed\\ncontract OFT is OFTCore, ERC20, IOFT {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint\\n    ) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(this);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return totalSupply();\\n    }\\n\\n    function _debitFrom(\\n        address _from,\\n        uint16,\\n        bytes memory,\\n        uint _amount\\n    ) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    function _creditTo(\\n        uint16,\\n        address _toAddress,\\n        uint _amount\\n    ) internal virtual override returns (uint) {\\n        _mint(_toAddress, _amount);\\n        return _amount;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/BentoUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {OFT} from \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFT.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BentoUSD is Ownable, OFT {\\n    address public bentoUSDVault;\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) OFT(_name, _symbol, _lzEndpoint) Ownable() {\\n        // Any additional initialization logic\\n    }\\n\\n    // for mainnet we will need to remove the minting right from owner.\\n    function mint(address _to, uint256 _amount) public {\\n        require(msg.sender == bentoUSDVault || msg.sender == owner(), \\\"BentoUSD: only bentoUSDVault or owner can mint\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _from, uint256 _amount) public {\\n        require(msg.sender == bentoUSDVault || msg.sender == owner(), \\\"BentoUSD: only bentoUSDVault or owner can burn\\\");\\n        _burn(_from, _amount);\\n    }\\n\\n    function setBentoUSDVault(address _bentoUSDVault) public onlyOwner {\\n        bentoUSDVault = _bentoUSDVault;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.22\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.2\"}}}","address":"0x222DD7EbAEb66d0B2bA0147046C1f62B30D1b26D","bytecode":"0x60806040523461002757610011610037565b61001961002c565b615336610267823961533690f35b610032565b60405190565b600080fd5b61003f6101da565b565b60081c90565b60ff1690565b61005961005e91610041565b610047565b90565b61006b905461004d565b90565b151590565b60209181520190565b60207f616c697a696e6700000000000000000000000000000000000000000000000000917f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201520152565b6100d76027604092610073565b6100e08161007c565b0190565b6100fa90602081019060008183039101526100ca565b90565b1561010457565b61010c61002c565b62461bcd60e51b815280610122600482016100e4565b0390fd5b60001c90565b60ff1690565b61013e61014391610126565b61012c565b90565b6101509054610132565b90565b60ff1690565b60001b90565b9061016b60ff91610159565b9181191691161790565b90565b61018c61018761019192610153565b610175565b610153565b90565b90565b906101ac6101a76101b392610178565b610194565b825461015f565b9055565b6101c090610153565b9052565b91906101d8906000602085019401906101b7565b565b6101f56101f06101ea6000610061565b1561006e565b6100fd565b6101ff6000610146565b61021261020c60ff610153565b91610153565b0361021a575b565b61022660ff6000610197565b60ff61025e7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161025561002c565b918291826101c4565b0390a161021856fe60a06040526004361015610013575b611208565b61001e6000356101fd565b80630a789ece146101f85780630b5580a4146101f35780630c340a24146101ee57806315e6bc99146101e957806322acb867146101e45780632fd34f5f146101df5780634a3e6544146101da5780634a5e42b1146101d55780634a7fe890146101d05780634d69ee0e146101cb57806355a29e91146101c6578063578e5c22146101c157806367e4ac2c146101bc57806372cb5d97146101b757806377736ed8146101b2578063829c8db7146101ad57806396c82e57146101a85780639b68c768146101a3578063a158b3ae1461019e578063a1b2439e14610199578063abaa991614610194578063aee3fee71461018f578063b0ce3dfa1461018a578063b5c705b514610185578063b658e9f814610180578063bca678e01461017b578063c4d66de814610176578063c9339e9f14610171578063caa648b41461016c5763f11b81880361000e576111cf565b61102b565b610ff6565b610fc3565b610f8e565b610f28565b610ec7565b610e90565b610e59565b610d97565b610d61565b610d05565b610c95565b610be5565b610b54565b610b0f565b610ac1565b610a5e565b610919565b610869565b610826565b6107f1565b61071d565b6106e8565b610694565b610548565b61046a565b610407565b6103b4565b610333565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61022c90610218565b90565b61023881610223565b0361023f57565b600080fd5b905035906102518261022f565b565b9060208282031261026d5761026a91600001610244565b90565b61020e565b90565b61028961028461028e92610218565b610272565b610218565b90565b61029a90610275565b90565b6102a690610291565b90565b906102b39061029d565b600052602052604060002090565b1c90565b60018060a01b031690565b6102e09060086102e593026102c1565b6102c5565b90565b906102f391546102d0565b90565b61030d906103086007916000926102a9565b6102e8565b90565b61031990610223565b9052565b919061033190600060208501940190610310565b565b346103635761035f61034e610349366004610253565b6102f6565b610356610203565b9182918261031d565b0390f35b610209565b90565b61037481610368565b0361037b57565b600080fd5b9050359061038d8261036b565b565b906020828203126103a9576103a691600001610380565b90565b61020e565b60000190565b346103e2576103cc6103c736600461038f565b611501565b6103d4610203565b806103de816103ae565b0390f35b610209565b60009103126103f257565b61020e565b61040460026000906102e8565b90565b34610437576104173660046103e7565b6104336104226103f7565b61042a610203565b9182918261031d565b0390f35b610209565b919060408382031261046557806104596104629260008601610380565b93602001610380565b90565b61020e565b346104995761048361047d36600461043c565b90611942565b61048b610203565b80610495816103ae565b0390f35b610209565b5190565b60209181520190565b60200190565b63ffffffff1690565b6104c3906104b1565b9052565b906104d4816020936104ba565b0190565b60200190565b906104fb6104f56104ee8461049e565b80936104a2565b926104ab565b9060005b81811061050c5750505090565b90919261052561051f60019286516104c7565b946104d8565b91019190916104ff565b61054591602082019160008184039101526104de565b90565b34610578576105583660046103e7565b610574610563611b79565b61056b610203565b9182918261052f565b0390f35b610209565b600080fd5b600080fd5b600080fd5b909182601f830112156105c65781359167ffffffffffffffff83116105c15760200192602083028401116105bc57565b610587565b610582565b61057d565b909182601f830112156106055781359167ffffffffffffffff83116106005760200192602083028401116105fb57565b610587565b610582565b61057d565b909160a08284031261068f576106238360008401610244565b926106318160208501610380565b9261063f8260408301610380565b92606082013567ffffffffffffffff811161068a578361066091840161058c565b929093608082013567ffffffffffffffff81116106855761068192016105cb565b9091565b610213565b610213565b61020e565b346106c9576106b36106a736600461060a565b95949094939193611c13565b6106bb610203565b806106c5816103ae565b0390f35b610209565b6106e5906106e06009916000926102a9565b6102e8565b90565b34610718576107146107036106fe366004610253565b6106ce565b61070b610203565b9182918261031d565b0390f35b610209565b3461074b57610735610730366004610253565b612080565b61073d610203565b80610747816103ae565b0390f35b610209565b5190565b60209181520190565b60200190565b61076c90610368565b9052565b9061077d81602093610763565b0190565b60200190565b906107a461079e61079784610750565b8093610754565b9261075d565b9060005b8181106107b55750505090565b9091926107ce6107c86001928651610770565b94610781565b91019190916107a8565b6107ee9160208201916000818403910152610787565b90565b34610821576108013660046103e7565b61081d61080c6121af565b610814610203565b918291826107d8565b0390f35b610209565b346108545761083e610839366004610253565b612424565b610846610203565b80610850816103ae565b0390f35b610209565b61086660046000906102e8565b90565b34610899576108793660046103e7565b610895610884610859565b61088c610203565b9182918261031d565b0390f35b610209565b634e487b7160e01b600052603260045260246000fd5b5490565b600052602060002090565b6108cc816108b4565b8210156108e7576108de6001916108b8565b91020190600090565b61089e565b60066108f7816108b4565b821015610914576109119161090b916108c3565b906102e8565b90565b600080fd5b346109495761094561093461092f36600461038f565b6108ec565b61093c610203565b9182918261031d565b0390f35b610209565b5190565b60209181520190565b60200190565b151590565b61096f90610961565b9052565b60ff1690565b61098290610973565b9052565b61098f90610223565b9052565b906060806109db936109ad60008201516000860190610966565b6109bf60208201516020860190610979565b6109d1604082015160408601906104ba565b0151910190610986565b565b906109ea81608093610993565b0190565b60200190565b90610a11610a0b610a048461094e565b8093610952565b9261095b565b9060005b818110610a225750505090565b909192610a3b610a3560019286516109dd565b946109ee565b9101919091610a15565b610a5b91602082019160008184039101526109f4565b90565b34610a8e57610a6e3660046103e7565b610a8a610a796125da565b610a81610203565b91829182610a45565b0390f35b610209565b9190604083820312610abc5780610ab0610ab99260008601610244565b93602001610244565b90565b61020e565b34610af057610ada610ad4366004610a93565b906126bb565b610ae2610203565b80610aec816103ae565b0390f35b610209565b610b0c90610b07600a916000926102a9565b6102e8565b90565b34610b3f57610b3b610b2a610b25366004610253565b610af5565b610b32610203565b9182918261031d565b0390f35b610209565b610b5160036000906102e8565b90565b34610b8457610b643660046103e7565b610b80610b6f610b44565b610b77610203565b9182918261031d565b0390f35b610209565b90565b610b9c906008610ba193026102c1565b610b89565b90565b90610baf9154610b8c565b90565b610bbf6001600090610ba4565b90565b610bcb90610368565b9052565b9190610be390600060208501940190610bc2565b565b34610c1557610bf53660046103e7565b610c11610c00610bb2565b610c08610203565b91829182610bcf565b0390f35b610209565b610c2381610961565b03610c2a57565b600080fd5b90503590610c3c82610c1a565b565b919060a083820312610c9057610c578160008501610380565b92610c658260208301610244565b92610c8d610c768460408501610244565b93610c848160608601610244565b93608001610c2f565b90565b61020e565b34610cc957610cc5610cb4610cab366004610c3e565b9392909261277c565b610cbc610203565b91829182610bcf565b0390f35b610209565b90565b610ce5610ce0610cea92610cce565b610272565b610368565b90565b610cf76001610cd1565b90565b610d02610ced565b90565b34610d3557610d153660046103e7565b610d31610d20610cfa565b610d28610203565b91829182610bcf565b0390f35b610209565b92916020610d57610d5f9360408701908782036000890152610787565b940190610bc2565b565b34610d9257610d79610d7436600461038f565b6129c9565b90610d8e610d85610203565b92839283610d3a565b0390f35b610209565b34610dc557610da73660046103e7565b610daf612d30565b610db7610203565b80610dc1816103ae565b0390f35b610209565b610dd381610973565b03610dda57565b600080fd5b90503590610dec82610dca565b565b610df7816104b1565b03610dfe57565b600080fd5b90503590610e1082610dee565b565b608081830312610e5457610e298260008301610244565b92610e51610e3a8460208501610ddf565b93610e488160408601610e03565b93606001610244565b90565b61020e565b34610e8b57610e75610e6c366004610e12565b92919091612eef565b610e7d610203565b80610e87816103ae565b0390f35b610209565b34610ec257610eac610ea3366004610e12565b929190916130ce565b610eb4610203565b80610ebe816103ae565b0390f35b610209565b34610ef557610edf610eda366004610253565b613159565b610ee7610203565b80610ef1816103ae565b0390f35b610209565b9190604083820312610f235780610f17610f209260008601610244565b93602001610380565b90565b61020e565b34610f5757610f41610f3b366004610efa565b90613201565b610f49610203565b80610f53816103ae565b0390f35b610209565b90610f669061029d565b600052602052604060002090565b610f8b90610f86600891600092610f5c565b610ba4565b90565b34610fbe57610fba610fa9610fa4366004610253565b610f74565b610fb1610203565b91829182610bcf565b0390f35b610209565b34610ff157610fdb610fd6366004610253565b613586565b610fe3610203565b80610fed816103ae565b0390f35b610209565b346110265761102261101161100c36600461038f565b6135cc565b611019610203565b918291826107d8565b0390f35b610209565b3461105b5761103b3660046103e7565b6110576110466136bd565b61104e610203565b91829182610bcf565b0390f35b610209565b9061106a9061029d565b600052602052604060002090565b60001c90565b60ff1690565b61109061109591611078565b61107e565b90565b6110a29054611084565b90565b60081c90565b60ff1690565b6110bd6110c2916110a5565b6110ab565b90565b6110cf90546110b1565b90565b60101c90565b63ffffffff1690565b6110ed6110f2916110d2565b6110d8565b90565b6110ff90546110e1565b90565b60301c90565b61111461111991611102565b6102c5565b90565b6111269054611108565b90565b611134906005611060565b9061114160008301611098565b9161114e600082016110c5565b91611166600061115f8185016110f5565b930161111c565b90565b61117290610961565b9052565b61117f90610973565b9052565b61118c906104b1565b9052565b6111c66111cd946111bc6060949897956111b2608086019a6000870190611169565b6020850190611176565b6040830190611183565b0190610310565b565b34611203576111ff6111ea6111e5366004610253565b611129565b906111f6949294610203565b94859485611190565b0390f35b610209565b600080fd5b61121961121e91611078565b6102c5565b90565b61122b905461120d565b90565b61123790610275565b90565b6112439061122e565b90565b61124f90610291565b90565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061128190611257565b810190811067ffffffffffffffff82111761129b57604052565b611261565b60e01b90565b905051906112b38261036b565b565b906020828203126112cf576112cc916000016112a6565b90565b61020e565b6112dc610203565b3d6000823e3d90fd5b60209181520190565b60207f20696e207573657227732077616c6c6574000000000000000000000000000000917f5661756c74436f72653a20696e73756666696369656e742042656e746f55534460008201520152565b61134960316040926112e5565b611352816112ee565b0190565b61136c906020810190600081830391015261133c565b90565b1561137657565b61137e610203565b62461bcd60e51b81528061139460048201611356565b0390fd5b6113a190610275565b90565b6113ad90611398565b90565b6113b990610291565b90565b60009103126113c757565b61020e565b9160206113ee9294936113e760408201966000830190610310565b0190610bc2565b565b90565b61140761140261140c926113f0565b610272565b610368565b90565b600161141b9101610368565b90565b61142790610291565b90565b9061143482610750565b811015611445576020809102010190565b61089e565b6114549051610368565b90565b60207f7320696e207661756c7400000000000000000000000000000000000000000000917f5661756c74436f72653a20696e73756666696369656e74204c5420746f6b656e60008201520152565b6114b2602a6040926112e5565b6114bb81611457565b0190565b6114d590602081019060008183039101526114a5565b90565b156114df57565b6114e7610203565b62461bcd60e51b8152806114fd600482016114bf565b0390fd5b9061150b826135cc565b91611555602061152b6115266115216003611221565b61123a565b611246565b6370a082319061154a339261153e610203565b958694859384936112a0565b83526004830161031d565b03915afa801561179c576115859160009161176e575b5061157e61157884610368565b91610368565b101561136f565b61159f61159a6115956003611221565b6113a4565b6113b0565b90639dc29fac90339092803b15611769576115ce600080946115d96115c2610203565b978896879586946112a0565b8452600484016113cc565b03925af1801561176457611737575b506115f360006113f3565b5b8061161061160a61160560066108b4565b610368565b91610368565b101561173257611640600061163a61163361162d600686906108c3565b906102e8565b6005611060565b0161111c565b9061168960206116576116528561123a565b611246565b6370a082319061167e6116693061141e565b92611672610203565b958694859384936112a0565b83526004830161031d565b03915afa801561172d576116fa936116d66116db926116f5946000916116ff575b506116cf6116c96116c46116bf8c8a9061142a565b61144a565b610368565b91610368565b10156114d8565b61123a565b336116ef6116ea88869061142a565b61144a565b916139d3565b61140f565b6115f4565b611720915060203d8111611726575b6117188183611277565b8101906112b5565b386116aa565b503d61170e565b6112d4565b509050565b6117579060003d811161175d575b61174f8183611277565b8101906113bc565b386115e8565b503d611745565b6112d4565b611252565b61178f915060203d8111611795575b6117878183611277565b8101906112b5565b3861156b565b503d61177d565b6112d4565b905090565b60207f6967682e20546f74616c2076616c75653a200000000000000000000000000000917f5661756c74436f72653a20707269636520646576696174696f6e20746f6f206860008201520152565b611800603280926117a1565b611809816117a6565b0190565b5190565b60005b838110611825575050906000910152565b806020918301518185015201611814565b61185b611852926020926118498161180d565b948580936117a1565b93849101611811565b0190565b60007f2c204d696e696d756d2072657175697265643a20000000000000000000000000910152565b611893601480926117a1565b61189c8161185f565b0190565b6118ba6118c593926118b46118bf936117f4565b90611836565b611887565b90611836565b90565b90565b6118ea6118f36020936118f8936118e18161180d565b938480936112e5565b95869101611811565b611257565b0190565b61191291602082019160008184039101526118cb565b90565b1561191d5750565b61193e90611929610203565b91829162461bcd60e51b8352600483016118fc565b0390fd5b61194b906129c9565b92909261195860006113f3565b5b8061197561196f61196a60066108b4565b610368565b91610368565b10156119cd576119c8906119c361199f61199a611994600685906108c3565b906102e8565b61123a565b336119a93061141e565b906119bd6119b88b879061142a565b61144a565b92613a51565b61140f565b611959565b5091611a34919350611a2e836119eb6119e584610368565b91610368565b1191611a29611a026119fc87613b4a565b92613b4a565b91611a1a611a0e610203565b938492602084016118a0565b60208201810382520382611277565b6118c8565b90611915565b611a4e611a49611a446003611221565b6113a4565b6113b0565b906340c10f1990339092803b15611acc57611a7d60008094611a88611a71610203565b978896879586946112a0565b8452600484016113cc565b03925af18015611ac757611a9a575b50565b611aba9060003d8111611ac0575b611ab28183611277565b8101906113bc565b38611a97565b503d611aa8565b6112d4565b611252565b606090565b90611ae9611ae2610203565b9283611277565b565b67ffffffffffffffff8111611b035760208091020190565b611261565b90611b1a611b1583611aeb565b611ad6565b918252565b369037565b90611b49611b3183611b08565b92602080611b3f8693611aeb565b9201910390611b1f565b565b90611b558261049e565b811015611b66576020809102010190565b61089e565b90611b75906104b1565b9052565b611b81611ad1565b50611b94611b8f60066108b4565b611b24565b611b9e60006113f3565b5b80611bbb611bb5611bb060066108b4565b610368565b91610368565b1015611c0f57611c0a90611c05611bf36000611bed6005611be7611be1600688906108c3565b906102e8565b90611060565b016110f5565b611c008591849092611b4b565b611b6b565b61140f565b611b9f565b5090565b91611c28969492959391909192939495613ea0565b565b60207f74696f6e00000000000000000000000000000000000000000000000000000000917f4f6e6c7920676f7665726e6f722063616e2063616c6c20746869732066756e6360008201520152565b611c8560246040926112e5565b611c8e81611c2a565b0190565b611ca89060208101906000818303910152611c78565b90565b15611cb257565b611cba610203565b62461bcd60e51b815280611cd060048201611c92565b0390fd5b611d0290611cfd33611cf7611cf1611cec6002611221565b610223565b91610223565b14611cab565b611f16565b565b60007f4173736574206973206e6f7420737570706f7274656400000000000000000000910152565b611d3960166020926112e5565b611d4281611d04565b0190565b611d5c9060208101906000818303910152611d2c565b90565b15611d6657565b611d6e610203565b62461bcd60e51b815280611d8460048201611d46565b0390fd5b611d9c611d97611da1926113f0565b610272565b6104b1565b90565b60001b90565b90611db660ff91611da4565b9181191691161790565b611dc990610961565b90565b90565b90611de4611ddf611deb92611dc0565b611dcc565b8254611daa565b9055565b634e487b7160e01b600052601160045260246000fd5b611e14611e1a91939293610368565b92610368565b8203918211611e2557565b611def565b1b90565b91906008611e4e910291611e4860018060a01b0384611e2a565b92611e2a565b9181191691161790565b90565b9190611e71611e6c611e799361029d565b611e58565b908354611e2e565b9055565b90565b634e487b7160e01b600052603160045260246000fd5b5490565b600052602060002090565b611eae81611e96565b821015611ec957611ec0600191611e9a565b91020190600090565b61089e565b600090565b611ee591611edf611ece565b91611e5b565b565b611ef081611e96565b8015611f11576001900390611f0e611f088383611ea5565b90611ed3565b55565b611e80565b611f35611f306000611f2a60058590611060565b01611098565b611d5f565b611f6081611f506000611f4a60058690611060565b016110f5565b611f5a6000611d88565b91614569565b611f78600080611f7260058590611060565b01611dcf565b611f8260006113f3565b5b80611f9f611f99611f9460066108b4565b610368565b91610368565b101561207a57611fba611fb4600683906108c3565b906102e8565b611fcc611fc684610223565b91610223565b14611fdf57611fda9061140f565b611f83565b6120259061201f612017612011600661200b611ffb60066108b4565b6120056001610cd1565b90611e05565b906108c3565b906102e8565b9160066108c3565b90611e5b565b6120376120326006611e7d565b611ee7565b5b6120627f37803e2125c48ee96c38ddf04e826daf335b0e1603579040fd275aba6d06b6fc9161029d565b9061206b610203565b80612075816103ae565b0390a2565b50612038565b61208990611cd4565b565b606090565b67ffffffffffffffff81116120a85760208091020190565b611261565b906120bf6120ba83612090565b611ad6565b918252565b369037565b906120ee6120d6836120ad565b926020806120e48693612090565b92019103906120c4565b565b6120f990610275565b90565b612105906120f0565b90565b61211190610291565b90565b9050519061212182610dca565b565b9060208282031261213d5761213a91600001612114565b90565b61020e565b90565b61215961215461215e92612142565b610272565b610368565b90565b61216a90610973565b604d811161217857600a0a90565b611def565b61218690610275565b90565b6121929061217d565b90565b61219e90610291565b90565b906121ab90610368565b9052565b6121b761208b565b506121c260066108b4565b6121cb816120c9565b916121d660006113f3565b5b806121ea6121e485610368565b91610368565b10156123655761225d90612209612203600683906108c3565b906102e8565b602061224761224261223c6000612236600561223061222a60068b906108c3565b906102e8565b90611060565b0161111c565b936120fc565b612108565b63313ce56790612255610203565b9586926112a0565b8252818061226d600482016103ae565b03915afa908115612360576122a161229c6122966020946122c897600091612333575b50612161565b92612189565b612195565b6122bd63c6e6f5926122b1610203565b968794859384936112a0565b835260048301610bcf565b03915afa91821561232e576122fb926122f691600091612300575b506122f1879184909261142a565b6121a1565b61140f565b6121d7565b612321915060203d8111612327575b6123198183611277565b8101906112b5565b386122e3565b503d61230f565b6112d4565b6123539150863d8111612359575b61234b8183611277565b810190612123565b38612290565b503d612341565b6112d4565b5091905090565b61239a906123953361238f6123896123846002611221565b610223565b91610223565b14611cab565b6123d7565b565b906123ad60018060a01b0391611da4565b9181191691161790565b906123cc6123c76123d39261029d565b611e58565b825461239c565b9055565b6123e28160046123b7565b61240c7fb12580e226e25bbb446909adeb7b42f7dd51fc77e9b58f14f321016cbd68c16a9161029d565b90612415610203565b8061241f816103ae565b0390a2565b61242d9061236c565b565b606090565b67ffffffffffffffff811161244c5760208091020190565b611261565b9061246361245e83612434565b611ad6565b918252565b6124726080611ad6565b90565b600090565b600090565b600090565b600090565b612491612468565b906020808080856124a0612475565b8152016124ab61247a565b8152016124b661247f565b8152016124c1612484565b81525050565b6124cf612489565b90565b60005b8281106124e157505050565b6020906124ec6124c7565b81840152016124d5565b9061251b61250383612451565b926020806125118693612434565b92019103906124d2565b565b906125278261094e565b811015612538576020809102010190565b61089e565b9061254790610961565b9052565b9061255590610973565b9052565b9061256390610223565b9052565b906125cc6125c36000612578612468565b9461258f612587838301611098565b83880161253d565b6125a661259d8383016110c5565b6020880161254b565b6125bd6125b48383016110f5565b60408801611b6b565b0161111c565b60608401612559565b565b6125d790612567565b90565b6125e261242f565b506125f56125f060066108b4565b6124f6565b6125ff60006113f3565b5b8061261c61261661261160066108b4565b610368565b91610368565b10156126705761266b90612664612649600561264361263d600686906108c3565b906102e8565b90611060565b8461265484926125ce565b61265e838361251d565b5261251d565b515061140f565b612600565b5090565b906126a39161269e3361269861269261268d6002611221565b610223565b91610223565b14611cab565b6126a5565b565b6126b46126b9929160096102a9565b6123b7565b565b906126c591612674565b565b600090565b6126d590610275565b90565b6126e1906126cc565b90565b6126ed90610291565b90565b90565b61270761270261270c926126f0565b610272565b610368565b90565b61271e61272491939293610368565b92610368565b91612730838202610368565b92818404149015171561273f57565b611def565b634e487b7160e01b600052601260045260246000fd5b61276661276c91610368565b91610368565b908115612777570490565b612744565b9390602061279d6127986127c7966127926126c7565b506126d8565b6126e4565b63aea91078906127bc84926127b0610203565b988994859384936112a0565b83526004830161031d565b03915afa801561298357612888956128506128619461285c9461285694602099600091612956575b50916000146128fb578161281361280d670de0b6b3a76400006126f3565b91610368565b106128d2575b612833600061282d61284b935b6005611060565b016110c5565b93612845670de0b6b3a76400006126f3565b9061270f565b61275a565b90614642565b92612189565b612195565b61287d63c6e6f592612871610203565b958694859384936112a0565b835260048301610bcf565b03915afa9081156128cd5760009161289f575b5090565b6128c0915060203d81116128c6575b6128b88183611277565b8101906112b5565b3861289b565b503d6128ae565b6112d4565b905061284b612833600061282d6128f0670de0b6b3a76400006126f3565b949350505050612819565b81612916612910670de0b6b3a76400006126f3565b91610368565b1161292d575b612833600061282d61284b93612826565b905061284b612833600061282d61294b670de0b6b3a76400006126f3565b94935050505061291c565b61297691508a3d811161297c575b61296e8183611277565b8101906112b5565b386127ef565b503d612964565b6112d4565b61299c6129976129a1926104b1565b610272565b610368565b90565b6129b36129b991939293610368565b92610368565b82018092116129c457565b611def565b6129d161208b565b506129da6126c7565b506129e560066108b4565b916129ef836120c9565b926129f9816120c9565b90612a0460006113f3565b92612a0f60006113f3565b935b84612a24612a1e85610368565b91610368565b1015612b8457612a8a90612a43612a3d600688906108c3565b906102e8565b906020612a60612a5b612a566004611221565b6126d8565b6126e4565b63aea9107890612a7f8592612a73610203565b978894859384936112a0565b83526004830161031d565b03915afa8015612b7f57612af1612b1c93612b0392612b2296600091612b51575b509081612ac8612ac2670de0b6b3a76400006126f3565b91610368565b11612b28575b612ae76000612ae1612aec936005611060565b016110f5565b612988565b61270f565b612afe8b918a909261142a565b6121a1565b612b16612b118a899061142a565b61144a565b906129a4565b9461140f565b93612a11565b9050612aec612ae76000612ae1612b46670de0b6b3a76400006126f3565b949350505050612ace565b612b72915060203d8111612b78575b612b6a8183611277565b8101906112b5565b38612aab565b503d612b60565b6112d4565b92959194909350612b9560006113f3565b93612ba060006113f3565b945b85612bb5612baf89610368565b91610368565b1015612ceb57612c16612c5491612bfd612beb612be487612bde612bd98d8c61142a565b61144a565b9061270f565b899061275a565b612bf88c918b909261142a565b6121a1565b612c10612c0b8b8a9061142a565b61144a565b906129a4565b956020612c3e612c39612c34612c2e600686906108c3565b906102e8565b6120fc565b612108565b63313ce56790612c4c610203565b9485926112a0565b82528180612c64600482016103ae565b03915afa8015612ce657612c9b612cad91612cb294600091612cb8575b50612c95612c908d869061142a565b61144a565b90614642565b612ca88b9184909261142a565b6121a1565b61140f565b94612ba2565b612cd9915060203d8111612cdf575b612cd18183611277565b810190612123565b38612c81565b503d612cc7565b6112d4565b96945094505050509190565b612d1c33612d16612d10612d0b6002611221565b610223565b91610223565b14611cab565b612d24612d26565b565b612d2e6146f9565b565b612d38612cf7565b565b90612d6b939291612d6633612d60612d5a612d556002611221565b610223565b91610223565b14611cab565b612e35565b565b60081b90565b90612d8061ff0091612d6d565b9181191691161790565b612d9e612d99612da392610973565b610272565b610973565b90565b90565b90612dbe612db9612dc592612d8a565b612da6565b8254612d73565b9055565b60301b90565b90612de76601000000000000600160d01b0391612dc9565b9181191691161790565b90612e06612e01612e0d9261029d565b611e58565b8254612dcf565b9055565b916020612e33929493612e2c60408201966000830190611176565b0190611183565b565b909192612ea990612e5b612e566000612e5060058790611060565b01611098565b611d5f565b612e7d83612e766000612e7060058890611060565b016110f5565b8791614569565b612e95846000612e8f60058790611060565b01612da9565b6000612ea360058590611060565b01612df1565b9091612ed57fd19afa6a62432ff0578526c79ab25d5e83049cfd7c7dade58cb858714dc0df039261029d565b92612eea612ee1610203565b92839283612e11565b0390a2565b90612efb939291612d3a565b565b90612f2e939291612f2933612f23612f1d612f186002611221565b610223565b91610223565b14611cab565b612fe9565b565b60007f417373657420697320616c726561647920737570706f72746564000000000000910152565b612f65601a6020926112e5565b612f6e81612f30565b0190565b612f889060208101906000818303910152612f58565b90565b15612f9257565b612f9a610203565b62461bcd60e51b815280612fb060048201612f72565b0390fd5b9081549168010000000000000000831015612fe45782612fdc916001612fe295018155611ea5565b90611e5b565b565b611261565b9091926130749061301861301361300d600061300760058890611060565b01611098565b15610961565b612f8b565b61302f836000906130298892611d88565b90614569565b6130486001600061304260058790611060565b01611dcf565b61306084600061305a60058790611060565b01612da9565b600061306e60058590611060565b01612df1565b6130886130816006611e7d565b8290612fb4565b90916130b47f62bd751f51149024e62ea3228318ca127fd1c35241bf764fba1e4b27d255e9309261029d565b926130c96130c0610203565b92839283612e11565b0390a2565b906130da939291612efd565b565b61310a90613105336130ff6130f96130f46002611221565b610223565b91610223565b14611cab565b61310c565b565b6131178160036123b7565b6131417f81b85e876e8723f9d61f238308ea004b759aee15ab163f6bd9b2cde9b20cc6189161029d565b9061314a610203565b80613154816103ae565b0390a2565b613162906130dc565b565b906131939161318e3361318861318261317d6002611221565b610223565b91610223565b14611cab565b6131eb565b565b906131a260001991611da4565b9181191691161790565b6131c06131bb6131c592610368565b610272565b610368565b90565b90565b906131e06131db6131e7926131ac565b6131c8565b8254613195565b9055565b6131fa6131ff92916008610f5c565b6131cb565b565b9061320b91613164565b565b61321961321e916110a5565b61107e565b90565b61322b905461320d565b90565b61323a61323f91611078565b6110ab565b90565b61324c905461322e565b90565b61326361325e61326892610cce565b610272565b610973565b90565b61327490610291565b90565b60207f647920696e697469616c697a6564000000000000000000000000000000000000917f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201520152565b6132d2602e6040926112e5565b6132db81613277565b0190565b6132f590602081019060008183039101526132c5565b90565b156132ff57565b613307610203565b62461bcd60e51b81528061331d600482016132df565b0390fd5b9061333661333161333d92612d8a565b612da6565b8254611daa565b9055565b9061335661335161335d92611dc0565b611dcc565b8254612d73565b9055565b61336a9061324f565b9052565b919061338290600060208501940190613361565b565b6133d161339a6133946000613221565b15610961565b918280613483575b8015613434575b6133b2906132f8565b6133c66133bf600161324f565b6000613321565b82613423575b613553565b6133d8575b565b6133e3600080613341565b600161341b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249891613412610203565b9182918261336e565b0390a16133d6565b61342f60016000613341565b6133cc565b5061344f6134496134443061326b565b61498a565b15610961565b8061345a575b6133a9565b506133b26134686000613242565b61347b613475600161324f565b91610973565b149050613455565b5061348e6000613242565b6134a161349b600161324f565b91610973565b106133a2565b6134bb6134b66134c0926113f0565b610272565b610218565b90565b6134cc906134a7565b90565b60007f476f7665726e6f722063616e6e6f74206265207a65726f206164647265737300910152565b613504601f6020926112e5565b61350d816134cf565b0190565b61352790602081019060008183039101526134f7565b90565b1561353157565b613539610203565b62461bcd60e51b81528061354f60048201613511565b0390fd5b6135849061357d8161357661357061356b60006134c3565b610223565b91610223565b141561352a565b60026123b7565b565b61358f90613384565b565b61359b90516104b1565b90565b6135aa6135af91611078565b610b89565b90565b6135bc905461359e565b90565b6135c99051610223565b90565b6135d461208b565b506135e76135e260066108b4565b6120c9565b906135f26004611221565b906135fd60006113f3565b5b8061361a61361461360f60066108b4565b610368565b91610368565b10156136b7576136b2906136ad61369b61363f613639600685906108c3565b906102e8565b61365361364e60058390611060565b6125ce565b61369160606136896136798a61367361366e60408801613591565b612988565b9061270f565b61368360016135b2565b9061275a565b9392016135bf565b889160019361277c565b6136a8879184909261142a565b6121a1565b61140f565b6135fe565b50505090565b6136c56126c7565b506136d060006113f3565b906136db60006113f3565b915b826136f96136f36136ee60066108b4565b610368565b91610368565b10156139a55761371461370e600685906108c3565b906102e8565b61375c602061372a6137258461123a565b611246565b6370a082319061375161373c3061141e565b92613745610203565b958694859384936112a0565b83526004830161031d565b03915afa9081156139a057600091613972575b5091613788600061378260058590611060565b0161111c565b6137d0602061379e6137998461123a565b611246565b6370a08231906137c56137b03061141e565b926137b9610203565b958694859384936112a0565b83526004830161031d565b03915afa91821561396d576137fc6137f761382394602094600091613940575b5092612189565b612195565b6138186307a2d13a61380c610203565b958694859384936112a0565b835260048301610bcf565b03915afa90811561393b5761388a946020926138489260009161390e575b50906129a4565b9261386361385e6138596004611221565b6126d8565b6126e4565b61387f63aea91078613873610203565b978894859384936112a0565b83526004830161031d565b03915afa8015613909576138b26138cf936138c9926138d5966000916138db575b509061270f565b6138c3670de0b6b3a76400006126f3565b9061275a565b906129a4565b9261140f565b916136dd565b6138fc915060203d8111613902575b6138f48183611277565b8101906112b5565b386138ab565b503d6138ea565b6112d4565b61392e9150843d8111613934575b6139268183611277565b8101906112b5565b38613841565b503d61391c565b6112d4565b6139609150853d8111613966575b6139588183611277565b8101906112b5565b386137f0565b503d61394e565b6112d4565b613993915060203d8111613999575b61398b8183611277565b8101906112b5565b3861376f565b503d613981565b6112d4565b90915090565b63ffffffff60e01b1690565b6139cb6139c66139d0926104b1565b6112a0565b6139ab565b90565b91613a17600492613a08613a1c95936139ef63a9059cbb6139b7565b926139f8610203565b96879460208601908152016113cc565b60208201810382520383611277565b614ad3565b565b604090613a48613a4f9496959396613a3e60608401986000850190610310565b6020830190610310565b0190610bc2565b565b613a9e9391613a8a600494613a999394613a6e6323b872dd6139b7565b93919091613a7a610203565b9788956020870190815201613a1e565b60208201810382520383611277565b614ad3565b565b606090565b90613ab09101610368565b90565b67ffffffffffffffff8111613ad157613acd602091611257565b0190565b611261565b90613ae8613ae383613ab3565b611ad6565b918252565b369037565b90613b17613aff83613ad6565b92602080613b0d8693613ab3565b9201910390613aed565b565b6001613b259103610368565b90565b613b34613b3a91610368565b91610368565b908115613b45570490565b612744565b613b52613aa0565b50613b6f613b5f82614c95565b613b696001610cd1565b90613aa5565b90613b7982613af2565b91613b826126c7565b5060200182015b600115613bed57613b9c613bc891613b19565b916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353613bc2600a612145565b90613b28565b80613bdc613bd660006113f3565b91610368565b14613be75790613b89565b50505b90565b5050613bea565b60007f416d6f756e74206d7573742062652067726561746572207468616e2030000000910152565b613c29601d6020926112e5565b613c3281613bf4565b0190565b613c4c9060208101906000818303910152613c1c565b90565b15613c5657565b613c5e610203565b62461bcd60e51b815280613c7460048201613c36565b0390fd5b5090565b60007f496e76616c696420726f757465722064617461206c656e677468000000000000910152565b613cb1601a6020926112e5565b613cba81613c7c565b0190565b613cd49060208101906000818303910152613ca4565b90565b15613cde57565b613ce6610203565b62461bcd60e51b815280613cfc60048201613cbe565b0390fd5b9190811015613d10576020020190565b61089e565b35613d1f8161022f565b90565b600080fd5b600080fd5b600080fd5b903590600160200381360303821215613d73570180359067ffffffffffffffff8211613d6e57602001916001820236038313613d6957565b613d2c565b613d27565b613d22565b90821015613d93576020613d8f9202810190613d31565b9091565b61089e565b613dce613dd594613dc4606094989795613dba608086019a6000870190610310565b6020850190610310565b6040830190610310565b0190610bc2565b565b90565b613dee613de9613df392613dd7565b610272565b610368565b90565b60207f64207765696768747320746f6f20686967680000000000000000000000000000917f5661756c74436f72653a20646576696174696f6e2066726f6d2064657369726560008201520152565b613e5160326040926112e5565b613e5a81613df6565b0190565b613e749060208101906000818303910152613e44565b90565b15613e7e57565b613e86610203565b62461bcd60e51b815280613e9c60048201613e5e565b0390fd5b9496939195608052613ec7613ec26000613ebc60058990611060565b01611098565b611d5f565b613ee481613ede613ed860006113f3565b91610368565b11613c4f565b613f15613ef48860805190613c78565b613f0f613f09613f0460066108b4565b610368565b91610368565b14613cd7565b613f1f60016135b2565b92613f2a60006113f3565b94613f3560066108b4565b97613f4060006113f3565b965b87613f55613f4f8c610368565b91610368565b10156143da57613f70613f6a60068a906108c3565b906102e8565b80613f83613f7d8c610223565b91610223565b141560001461431557613fe991613fa4613f9f60058490611060565b6125ce565b6020613fb7613fb28561123a565b611246565b6370a0823190613fde613fc93061141e565b92613fd2610203565b988994859384936112a0565b83526004830161031d565b03915afa801561431057614046946000916142e2575b50602061401c6140176140126004611221565b6126d8565b6126e4565b63aea910789061403b879261402f610203565b998a94859384936112a0565b83526004830161031d565b03915afa80156142dd578f956000916142af575b50948c8b8a8861407a614074670de0b6b3a76400006126f3565b91610368565b1161427f575b9161409d6140986140a9936140af9695908491613d00565b613d15565b92906080519091613d78565b91614ff6565b6140f760206140c56140c08761123a565b611246565b6370a08231906140ec6140d73061141e565b926140e0610203565b958694859384936112a0565b83526004830161031d565b03915afa90811561427a5760009161424c575b509061411591611e05565b928c90888d8c61412492613d00565b61412d90613d15565b9085927fffebebfb273923089a3ed6bac0fd4686ac740307859becadeb82f998e30db6149361415a610203565b9384936141679385613d98565b0390a1879060400161417890613591565b61418190612988565b61418a9161270f565b896141949161275a565b808361419f90610368565b906141a990610368565b116000146142339461422c9461420a6141eb6142269561420f95614239576141e66141d5828690611e05565b5b6141e06064613dda565b9061270f565b61275a565b6142046141fe6141f9610ced565b610368565b91610368565b10613e77565b61270f565b614220670de0b6b3a76400006126f3565b9061275a565b906129a4565b975b61140f565b96613f42565b6141e6614247858390611e05565b6141d6565b61426d915060203d8111614273575b6142658183611277565b8101906112b5565b3861410a565b503d61425b565b6112d4565b97506140af929161409d6140986140a9936142a1670de0b6b3a76400006126f3565b9b9395965093505050614080565b6142d0915060203d81116142d6575b6142c88183611277565b8101906112b5565b3861405a565b503d6142be565b6112d4565b614303915060203d8111614309575b6142fb8183611277565b8101906112b5565b38613fff565b503d6142f1565b6112d4565b602061435c9161433561433061432b6004611221565b6126d8565b6126e4565b61435163aea91078614345610203565b958694859384936112a0565b83526004830161031d565b03915afa9182156143d55761439b614384614233946143a1946000916143a7575b508961270f565b614395670de0b6b3a76400006126f3565b9061275a565b906129a4565b9761422e565b6143c8915060203d81116143ce575b6143c08183611277565b8101906112b5565b3861437d565b503d6143b6565b6112d4565b985095509750505050506144489150614442836143ff6143f984610368565b91610368565b119161443d61441661441087613b4a565b92613b4a565b9161442e614422610203565b938492602084016118a0565b60208201810382520382611277565b6118c8565b90611915565b61446261445d6144586003611221565b6113a4565b6113b0565b906340c10f1990339092803b156144e0576144916000809461449c614485610203565b978896879586946112a0565b8452600484016113cc565b03925af180156144db576144ae575b50565b6144ce9060003d81116144d4575b6144c68183611277565b8101906113bc565b386144ab565b503d6144bc565b6112d4565b611252565b60101b90565b906144fc65ffffffff0000916144e5565b9181191691161790565b61451a61451561451f926104b1565b610272565b6104b1565b90565b90565b9061453a61453561454192614506565b614522565b82546144eb565b9055565b91602061456792949361456060408201966000830190611183565b0190611183565b565b6145a161459a61458b61457c60016135b2565b61458587612988565b906129a4565b61459485612988565b90611e05565b60016131cb565b6145b98360006145b360058590611060565b01614525565b90916145e57ffe53ad22d287601d2ed917d8aedf4a9bf6f948833c8b55fbc07d8a4e1cdd77899261029d565b926145fa6145f1610203565b92839283614545565b0390a2565b90565b61461661461161461b926145ff565b610272565b610973565b90565b61462a61463091610973565b91610973565b90039060ff821161463d57565b611def565b61464a6126c7565b508061465f6146596012614602565b91610973565b1060001461468f5761468661468161468c939261467c6012614602565b61461e565b612161565b9061275a565b90565b806146a361469d6012614602565b91610973565b116146ac575090565b6146cc6146c76146d293926146c16012614602565b9061461e565b612161565b9061270f565b90565b6146de90610275565b90565b6146ea906146d5565b90565b6146f690610291565b90565b61470360066108b4565b9061470e60006113f3565b5b8061472261471c85610368565b91610368565b10156149805761474561474061473a600684906108c3565b906102e8565b61123a565b90614786602061475484611246565b6370a082319061477b6147663061141e565b9261476f610203565b958694859384936112a0565b83526004830161031d565b03915afa90811561497b5760009161494d575b506147b66147b160086147ab86611246565b90610f5c565b6135b2565b90806147ca6147c484610368565b91610368565b1061494157906147d991611e05565b6147f56147f060096147ea86611246565b906102a9565b611221565b908161481261480c61480760006134c3565b610223565b91610223565b141580614926575b614831575b505061482c91505b61140f565b61470f565b61485661483d836146e1565b6148518661484a836146ed565b85916139d3565b6146ed565b9363b6b55f2582863b156149215761488e9661488360008094614877610203565b9a8b95869485936112a0565b835260048301610bcf565b03925af190811561491c5761482c956148ac926148ef575b50611246565b9190916148e57f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d936148dc610203565b93849384613a1e565b0390a1388061481f565b61490f9060003d8111614915575b6149078183611277565b8101906113bc565b386148a6565b503d6148fd565b6112d4565b611252565b508061493b61493560006113f3565b91610368565b1161481a565b505061482c9150614827565b61496e915060203d8111614974575b6149668183611277565b8101906112b5565b38614799565b503d61495c565b6112d4565b509050565b600090565b614992614985565b503b6149a76149a160006113f3565b91610368565b1190565b60007f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6149dd6020613ad6565b906149ea602083016149ab565b565b6149f46149d3565b90565b5190565b90505190614a0882610c1a565b565b90602082820312614a2457614a21916000016149fb565b90565b61020e565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201520152565b614a84602a6040926112e5565b614a8d81614a29565b0190565b614aa79060208101906000818303910152614a77565b90565b15614ab157565b614ab9610203565b62461bcd60e51b815280614acf60048201614a91565b0390fd5b614b1d91614ae3614af292611246565b90614aec6149ec565b916150a4565b614afb816149f7565b614b0e614b0860006113f3565b91610368565b14908115614b1f575b50614aaa565b565b614b3a91506020614b2f826149f7565b818301019101614a0a565b38614b17565b90565b614b57614b52614b5c92614b40565b610272565b610368565b90565b90565b614b76614b71614b7b92614b5f565b610272565b610368565b90565b90565b614b95614b90614b9a92614b7e565b610272565b610368565b90565b90565b614bb4614baf614bb992614b9d565b610272565b610368565b90565b90565b614bd3614bce614bd892614bbc565b610272565b610368565b90565b90565b614bf2614bed614bf792614bdb565b610272565b610368565b90565b90565b614c11614c0c614c1692614bfa565b610272565b610368565b90565b90565b614c30614c2b614c3592614c19565b610272565b610368565b90565b90565b614c4f614c4a614c5492614c38565b610272565b610368565b90565b90565b614c6e614c69614c7392614c57565b610272565b610368565b90565b90565b614c8d614c88614c9292614c76565b610272565b610368565b90565b614c9d6126c7565b50614ca860006113f3565b9080614cd7614cd17a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000614b43565b91610368565b1015614eaf575b80614cff614cf96d04ee2d6d415b85acef8100000000614b81565b91610368565b1015614e74575b80614d20614d1a662386f26fc10000614bbf565b91610368565b1015614e40575b80614d3e614d386305f5e100614bfd565b91610368565b1015614e0f575b80614d5a614d54612710614c3b565b91610368565b1015614de0575b80614d75614d6f6064613dda565b91610368565b1015614db2575b614d8f614d89600a612145565b91610368565b1015614d99575b90565b614dad90614da76001610cd1565b90613aa5565b614d96565b614dc9614dda91614dc36064613dda565b90613b28565b91614dd46002614c79565b90613aa5565b90614d7c565b614df8614e0991614df2612710614c3b565b90613b28565b91614e036004614c5a565b90613aa5565b90614d61565b614e29614e3a91614e236305f5e100614bfd565b90613b28565b91614e346008614c1c565b90613aa5565b90614d45565b614e5d614e6e91614e57662386f26fc10000614bbf565b90613b28565b91614e686010614bde565b90613aa5565b90614d27565b614e98614ea991614e926d04ee2d6d415b85acef8100000000614b81565b90613b28565b91614ea36020614ba0565b90613aa5565b90614d06565b614ee0614ef191614eda7a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000614b43565b90613b28565b91614eeb6040614b62565b90613aa5565b90614cde565b905090565b90826000939282370152565b909182614f1881614f1f93614ef7565b8093614efc565b0190565b9091614f2e92614f08565b90565b67ffffffffffffffff8111614f4f57614f4b602091611257565b0190565b611261565b90614f66614f6183614f31565b611ad6565b918252565b606090565b3d600014614f8d57614f813d614f54565b903d6000602084013e5b565b614f95614f6b565b90614f8b565b60007f556e6b6e6f776e20726561736f6e000000000000000000000000000000000000910152565b614fd0600e6020926112e5565b614fd981614f9b565b0190565b614ff39060208101906000818303910152614fc3565b90565b9060009283809392615012615009610203565b93849283614f23565b03925af1615028615021614f70565b9115610961565b61502f5750565b615038816149f7565b61504b61504560006113f3565b91610368565b116000146150815761505f61507d916118c8565b615067610203565b918291634ecb9b6d60e01b8352600483016118fc565b0390fd5b615089610203565b634ecb9b6d60e01b8152806150a060048201614fdd565b0390fd5b906150c492916150b2614f6b565b50906150be60006113f3565b9161517d565b90565b6150d090610291565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201520152565b61512e60266040926112e5565b615137816150d3565b0190565b6151519060208101906000818303910152615121565b90565b1561515b57565b615163610203565b62461bcd60e51b8152806151796004820161513b565b0390fd5b91600080916151d4959361518f614f6b565b506151b661519c306150c7565b316151af6151a985610368565b91610368565b1015615154565b8591602082019151925af1916151ca614f70565b909290919261525b565b90565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b61520c601d6020926112e5565b615215816151d7565b0190565b61522f90602081019060008183039101526151ff565b90565b1561523957565b615241610203565b62461bcd60e51b81528061525760048201615219565b0390fd5b919290615266614f6b565b506000146152ac5750615278826149f7565b61528b61528560006113f3565b91610368565b14615295575b5090565b6152a16152a69161498a565b615232565b38615291565b82906152b7826149f7565b6152ca6152c460006113f3565b91610368565b116000146152db5750805190602001fd5b6152fc906152e7610203565b91829162461bcd60e51b8352600483016118fc565b0390fdfea2646970667358221220a009f460a36f3979617c9a133a3cad2160fa108f9c6f098380bcd4820124b1fc64736f6c634300081b0033","deployedBytecode":"0x60a06040526004361015610013575b611208565b61001e6000356101fd565b80630a789ece146101f85780630b5580a4146101f35780630c340a24146101ee57806315e6bc99146101e957806322acb867146101e45780632fd34f5f146101df5780634a3e6544146101da5780634a5e42b1146101d55780634a7fe890146101d05780634d69ee0e146101cb57806355a29e91146101c6578063578e5c22146101c157806367e4ac2c146101bc57806372cb5d97146101b757806377736ed8146101b2578063829c8db7146101ad57806396c82e57146101a85780639b68c768146101a3578063a158b3ae1461019e578063a1b2439e14610199578063abaa991614610194578063aee3fee71461018f578063b0ce3dfa1461018a578063b5c705b514610185578063b658e9f814610180578063bca678e01461017b578063c4d66de814610176578063c9339e9f14610171578063caa648b41461016c5763f11b81880361000e576111cf565b61102b565b610ff6565b610fc3565b610f8e565b610f28565b610ec7565b610e90565b610e59565b610d97565b610d61565b610d05565b610c95565b610be5565b610b54565b610b0f565b610ac1565b610a5e565b610919565b610869565b610826565b6107f1565b61071d565b6106e8565b610694565b610548565b61046a565b610407565b6103b4565b610333565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61022c90610218565b90565b61023881610223565b0361023f57565b600080fd5b905035906102518261022f565b565b9060208282031261026d5761026a91600001610244565b90565b61020e565b90565b61028961028461028e92610218565b610272565b610218565b90565b61029a90610275565b90565b6102a690610291565b90565b906102b39061029d565b600052602052604060002090565b1c90565b60018060a01b031690565b6102e09060086102e593026102c1565b6102c5565b90565b906102f391546102d0565b90565b61030d906103086007916000926102a9565b6102e8565b90565b61031990610223565b9052565b919061033190600060208501940190610310565b565b346103635761035f61034e610349366004610253565b6102f6565b610356610203565b9182918261031d565b0390f35b610209565b90565b61037481610368565b0361037b57565b600080fd5b9050359061038d8261036b565b565b906020828203126103a9576103a691600001610380565b90565b61020e565b60000190565b346103e2576103cc6103c736600461038f565b611501565b6103d4610203565b806103de816103ae565b0390f35b610209565b60009103126103f257565b61020e565b61040460026000906102e8565b90565b34610437576104173660046103e7565b6104336104226103f7565b61042a610203565b9182918261031d565b0390f35b610209565b919060408382031261046557806104596104629260008601610380565b93602001610380565b90565b61020e565b346104995761048361047d36600461043c565b90611942565b61048b610203565b80610495816103ae565b0390f35b610209565b5190565b60209181520190565b60200190565b63ffffffff1690565b6104c3906104b1565b9052565b906104d4816020936104ba565b0190565b60200190565b906104fb6104f56104ee8461049e565b80936104a2565b926104ab565b9060005b81811061050c5750505090565b90919261052561051f60019286516104c7565b946104d8565b91019190916104ff565b61054591602082019160008184039101526104de565b90565b34610578576105583660046103e7565b610574610563611b79565b61056b610203565b9182918261052f565b0390f35b610209565b600080fd5b600080fd5b600080fd5b909182601f830112156105c65781359167ffffffffffffffff83116105c15760200192602083028401116105bc57565b610587565b610582565b61057d565b909182601f830112156106055781359167ffffffffffffffff83116106005760200192602083028401116105fb57565b610587565b610582565b61057d565b909160a08284031261068f576106238360008401610244565b926106318160208501610380565b9261063f8260408301610380565b92606082013567ffffffffffffffff811161068a578361066091840161058c565b929093608082013567ffffffffffffffff81116106855761068192016105cb565b9091565b610213565b610213565b61020e565b346106c9576106b36106a736600461060a565b95949094939193611c13565b6106bb610203565b806106c5816103ae565b0390f35b610209565b6106e5906106e06009916000926102a9565b6102e8565b90565b34610718576107146107036106fe366004610253565b6106ce565b61070b610203565b9182918261031d565b0390f35b610209565b3461074b57610735610730366004610253565b612080565b61073d610203565b80610747816103ae565b0390f35b610209565b5190565b60209181520190565b60200190565b61076c90610368565b9052565b9061077d81602093610763565b0190565b60200190565b906107a461079e61079784610750565b8093610754565b9261075d565b9060005b8181106107b55750505090565b9091926107ce6107c86001928651610770565b94610781565b91019190916107a8565b6107ee9160208201916000818403910152610787565b90565b34610821576108013660046103e7565b61081d61080c6121af565b610814610203565b918291826107d8565b0390f35b610209565b346108545761083e610839366004610253565b612424565b610846610203565b80610850816103ae565b0390f35b610209565b61086660046000906102e8565b90565b34610899576108793660046103e7565b610895610884610859565b61088c610203565b9182918261031d565b0390f35b610209565b634e487b7160e01b600052603260045260246000fd5b5490565b600052602060002090565b6108cc816108b4565b8210156108e7576108de6001916108b8565b91020190600090565b61089e565b60066108f7816108b4565b821015610914576109119161090b916108c3565b906102e8565b90565b600080fd5b346109495761094561093461092f36600461038f565b6108ec565b61093c610203565b9182918261031d565b0390f35b610209565b5190565b60209181520190565b60200190565b151590565b61096f90610961565b9052565b60ff1690565b61098290610973565b9052565b61098f90610223565b9052565b906060806109db936109ad60008201516000860190610966565b6109bf60208201516020860190610979565b6109d1604082015160408601906104ba565b0151910190610986565b565b906109ea81608093610993565b0190565b60200190565b90610a11610a0b610a048461094e565b8093610952565b9261095b565b9060005b818110610a225750505090565b909192610a3b610a3560019286516109dd565b946109ee565b9101919091610a15565b610a5b91602082019160008184039101526109f4565b90565b34610a8e57610a6e3660046103e7565b610a8a610a796125da565b610a81610203565b91829182610a45565b0390f35b610209565b9190604083820312610abc5780610ab0610ab99260008601610244565b93602001610244565b90565b61020e565b34610af057610ada610ad4366004610a93565b906126bb565b610ae2610203565b80610aec816103ae565b0390f35b610209565b610b0c90610b07600a916000926102a9565b6102e8565b90565b34610b3f57610b3b610b2a610b25366004610253565b610af5565b610b32610203565b9182918261031d565b0390f35b610209565b610b5160036000906102e8565b90565b34610b8457610b643660046103e7565b610b80610b6f610b44565b610b77610203565b9182918261031d565b0390f35b610209565b90565b610b9c906008610ba193026102c1565b610b89565b90565b90610baf9154610b8c565b90565b610bbf6001600090610ba4565b90565b610bcb90610368565b9052565b9190610be390600060208501940190610bc2565b565b34610c1557610bf53660046103e7565b610c11610c00610bb2565b610c08610203565b91829182610bcf565b0390f35b610209565b610c2381610961565b03610c2a57565b600080fd5b90503590610c3c82610c1a565b565b919060a083820312610c9057610c578160008501610380565b92610c658260208301610244565b92610c8d610c768460408501610244565b93610c848160608601610244565b93608001610c2f565b90565b61020e565b34610cc957610cc5610cb4610cab366004610c3e565b9392909261277c565b610cbc610203565b91829182610bcf565b0390f35b610209565b90565b610ce5610ce0610cea92610cce565b610272565b610368565b90565b610cf76001610cd1565b90565b610d02610ced565b90565b34610d3557610d153660046103e7565b610d31610d20610cfa565b610d28610203565b91829182610bcf565b0390f35b610209565b92916020610d57610d5f9360408701908782036000890152610787565b940190610bc2565b565b34610d9257610d79610d7436600461038f565b6129c9565b90610d8e610d85610203565b92839283610d3a565b0390f35b610209565b34610dc557610da73660046103e7565b610daf612d30565b610db7610203565b80610dc1816103ae565b0390f35b610209565b610dd381610973565b03610dda57565b600080fd5b90503590610dec82610dca565b565b610df7816104b1565b03610dfe57565b600080fd5b90503590610e1082610dee565b565b608081830312610e5457610e298260008301610244565b92610e51610e3a8460208501610ddf565b93610e488160408601610e03565b93606001610244565b90565b61020e565b34610e8b57610e75610e6c366004610e12565b92919091612eef565b610e7d610203565b80610e87816103ae565b0390f35b610209565b34610ec257610eac610ea3366004610e12565b929190916130ce565b610eb4610203565b80610ebe816103ae565b0390f35b610209565b34610ef557610edf610eda366004610253565b613159565b610ee7610203565b80610ef1816103ae565b0390f35b610209565b9190604083820312610f235780610f17610f209260008601610244565b93602001610380565b90565b61020e565b34610f5757610f41610f3b366004610efa565b90613201565b610f49610203565b80610f53816103ae565b0390f35b610209565b90610f669061029d565b600052602052604060002090565b610f8b90610f86600891600092610f5c565b610ba4565b90565b34610fbe57610fba610fa9610fa4366004610253565b610f74565b610fb1610203565b91829182610bcf565b0390f35b610209565b34610ff157610fdb610fd6366004610253565b613586565b610fe3610203565b80610fed816103ae565b0390f35b610209565b346110265761102261101161100c36600461038f565b6135cc565b611019610203565b918291826107d8565b0390f35b610209565b3461105b5761103b3660046103e7565b6110576110466136bd565b61104e610203565b91829182610bcf565b0390f35b610209565b9061106a9061029d565b600052602052604060002090565b60001c90565b60ff1690565b61109061109591611078565b61107e565b90565b6110a29054611084565b90565b60081c90565b60ff1690565b6110bd6110c2916110a5565b6110ab565b90565b6110cf90546110b1565b90565b60101c90565b63ffffffff1690565b6110ed6110f2916110d2565b6110d8565b90565b6110ff90546110e1565b90565b60301c90565b61111461111991611102565b6102c5565b90565b6111269054611108565b90565b611134906005611060565b9061114160008301611098565b9161114e600082016110c5565b91611166600061115f8185016110f5565b930161111c565b90565b61117290610961565b9052565b61117f90610973565b9052565b61118c906104b1565b9052565b6111c66111cd946111bc6060949897956111b2608086019a6000870190611169565b6020850190611176565b6040830190611183565b0190610310565b565b34611203576111ff6111ea6111e5366004610253565b611129565b906111f6949294610203565b94859485611190565b0390f35b610209565b600080fd5b61121961121e91611078565b6102c5565b90565b61122b905461120d565b90565b61123790610275565b90565b6112439061122e565b90565b61124f90610291565b90565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061128190611257565b810190811067ffffffffffffffff82111761129b57604052565b611261565b60e01b90565b905051906112b38261036b565b565b906020828203126112cf576112cc916000016112a6565b90565b61020e565b6112dc610203565b3d6000823e3d90fd5b60209181520190565b60207f20696e207573657227732077616c6c6574000000000000000000000000000000917f5661756c74436f72653a20696e73756666696369656e742042656e746f55534460008201520152565b61134960316040926112e5565b611352816112ee565b0190565b61136c906020810190600081830391015261133c565b90565b1561137657565b61137e610203565b62461bcd60e51b81528061139460048201611356565b0390fd5b6113a190610275565b90565b6113ad90611398565b90565b6113b990610291565b90565b60009103126113c757565b61020e565b9160206113ee9294936113e760408201966000830190610310565b0190610bc2565b565b90565b61140761140261140c926113f0565b610272565b610368565b90565b600161141b9101610368565b90565b61142790610291565b90565b9061143482610750565b811015611445576020809102010190565b61089e565b6114549051610368565b90565b60207f7320696e207661756c7400000000000000000000000000000000000000000000917f5661756c74436f72653a20696e73756666696369656e74204c5420746f6b656e60008201520152565b6114b2602a6040926112e5565b6114bb81611457565b0190565b6114d590602081019060008183039101526114a5565b90565b156114df57565b6114e7610203565b62461bcd60e51b8152806114fd600482016114bf565b0390fd5b9061150b826135cc565b91611555602061152b6115266115216003611221565b61123a565b611246565b6370a082319061154a339261153e610203565b958694859384936112a0565b83526004830161031d565b03915afa801561179c576115859160009161176e575b5061157e61157884610368565b91610368565b101561136f565b61159f61159a6115956003611221565b6113a4565b6113b0565b90639dc29fac90339092803b15611769576115ce600080946115d96115c2610203565b978896879586946112a0565b8452600484016113cc565b03925af1801561176457611737575b506115f360006113f3565b5b8061161061160a61160560066108b4565b610368565b91610368565b101561173257611640600061163a61163361162d600686906108c3565b906102e8565b6005611060565b0161111c565b9061168960206116576116528561123a565b611246565b6370a082319061167e6116693061141e565b92611672610203565b958694859384936112a0565b83526004830161031d565b03915afa801561172d576116fa936116d66116db926116f5946000916116ff575b506116cf6116c96116c46116bf8c8a9061142a565b61144a565b610368565b91610368565b10156114d8565b61123a565b336116ef6116ea88869061142a565b61144a565b916139d3565b61140f565b6115f4565b611720915060203d8111611726575b6117188183611277565b8101906112b5565b386116aa565b503d61170e565b6112d4565b509050565b6117579060003d811161175d575b61174f8183611277565b8101906113bc565b386115e8565b503d611745565b6112d4565b611252565b61178f915060203d8111611795575b6117878183611277565b8101906112b5565b3861156b565b503d61177d565b6112d4565b905090565b60207f6967682e20546f74616c2076616c75653a200000000000000000000000000000917f5661756c74436f72653a20707269636520646576696174696f6e20746f6f206860008201520152565b611800603280926117a1565b611809816117a6565b0190565b5190565b60005b838110611825575050906000910152565b806020918301518185015201611814565b61185b611852926020926118498161180d565b948580936117a1565b93849101611811565b0190565b60007f2c204d696e696d756d2072657175697265643a20000000000000000000000000910152565b611893601480926117a1565b61189c8161185f565b0190565b6118ba6118c593926118b46118bf936117f4565b90611836565b611887565b90611836565b90565b90565b6118ea6118f36020936118f8936118e18161180d565b938480936112e5565b95869101611811565b611257565b0190565b61191291602082019160008184039101526118cb565b90565b1561191d5750565b61193e90611929610203565b91829162461bcd60e51b8352600483016118fc565b0390fd5b61194b906129c9565b92909261195860006113f3565b5b8061197561196f61196a60066108b4565b610368565b91610368565b10156119cd576119c8906119c361199f61199a611994600685906108c3565b906102e8565b61123a565b336119a93061141e565b906119bd6119b88b879061142a565b61144a565b92613a51565b61140f565b611959565b5091611a34919350611a2e836119eb6119e584610368565b91610368565b1191611a29611a026119fc87613b4a565b92613b4a565b91611a1a611a0e610203565b938492602084016118a0565b60208201810382520382611277565b6118c8565b90611915565b611a4e611a49611a446003611221565b6113a4565b6113b0565b906340c10f1990339092803b15611acc57611a7d60008094611a88611a71610203565b978896879586946112a0565b8452600484016113cc565b03925af18015611ac757611a9a575b50565b611aba9060003d8111611ac0575b611ab28183611277565b8101906113bc565b38611a97565b503d611aa8565b6112d4565b611252565b606090565b90611ae9611ae2610203565b9283611277565b565b67ffffffffffffffff8111611b035760208091020190565b611261565b90611b1a611b1583611aeb565b611ad6565b918252565b369037565b90611b49611b3183611b08565b92602080611b3f8693611aeb565b9201910390611b1f565b565b90611b558261049e565b811015611b66576020809102010190565b61089e565b90611b75906104b1565b9052565b611b81611ad1565b50611b94611b8f60066108b4565b611b24565b611b9e60006113f3565b5b80611bbb611bb5611bb060066108b4565b610368565b91610368565b1015611c0f57611c0a90611c05611bf36000611bed6005611be7611be1600688906108c3565b906102e8565b90611060565b016110f5565b611c008591849092611b4b565b611b6b565b61140f565b611b9f565b5090565b91611c28969492959391909192939495613ea0565b565b60207f74696f6e00000000000000000000000000000000000000000000000000000000917f4f6e6c7920676f7665726e6f722063616e2063616c6c20746869732066756e6360008201520152565b611c8560246040926112e5565b611c8e81611c2a565b0190565b611ca89060208101906000818303910152611c78565b90565b15611cb257565b611cba610203565b62461bcd60e51b815280611cd060048201611c92565b0390fd5b611d0290611cfd33611cf7611cf1611cec6002611221565b610223565b91610223565b14611cab565b611f16565b565b60007f4173736574206973206e6f7420737570706f7274656400000000000000000000910152565b611d3960166020926112e5565b611d4281611d04565b0190565b611d5c9060208101906000818303910152611d2c565b90565b15611d6657565b611d6e610203565b62461bcd60e51b815280611d8460048201611d46565b0390fd5b611d9c611d97611da1926113f0565b610272565b6104b1565b90565b60001b90565b90611db660ff91611da4565b9181191691161790565b611dc990610961565b90565b90565b90611de4611ddf611deb92611dc0565b611dcc565b8254611daa565b9055565b634e487b7160e01b600052601160045260246000fd5b611e14611e1a91939293610368565b92610368565b8203918211611e2557565b611def565b1b90565b91906008611e4e910291611e4860018060a01b0384611e2a565b92611e2a565b9181191691161790565b90565b9190611e71611e6c611e799361029d565b611e58565b908354611e2e565b9055565b90565b634e487b7160e01b600052603160045260246000fd5b5490565b600052602060002090565b611eae81611e96565b821015611ec957611ec0600191611e9a565b91020190600090565b61089e565b600090565b611ee591611edf611ece565b91611e5b565b565b611ef081611e96565b8015611f11576001900390611f0e611f088383611ea5565b90611ed3565b55565b611e80565b611f35611f306000611f2a60058590611060565b01611098565b611d5f565b611f6081611f506000611f4a60058690611060565b016110f5565b611f5a6000611d88565b91614569565b611f78600080611f7260058590611060565b01611dcf565b611f8260006113f3565b5b80611f9f611f99611f9460066108b4565b610368565b91610368565b101561207a57611fba611fb4600683906108c3565b906102e8565b611fcc611fc684610223565b91610223565b14611fdf57611fda9061140f565b611f83565b6120259061201f612017612011600661200b611ffb60066108b4565b6120056001610cd1565b90611e05565b906108c3565b906102e8565b9160066108c3565b90611e5b565b6120376120326006611e7d565b611ee7565b5b6120627f37803e2125c48ee96c38ddf04e826daf335b0e1603579040fd275aba6d06b6fc9161029d565b9061206b610203565b80612075816103ae565b0390a2565b50612038565b61208990611cd4565b565b606090565b67ffffffffffffffff81116120a85760208091020190565b611261565b906120bf6120ba83612090565b611ad6565b918252565b369037565b906120ee6120d6836120ad565b926020806120e48693612090565b92019103906120c4565b565b6120f990610275565b90565b612105906120f0565b90565b61211190610291565b90565b9050519061212182610dca565b565b9060208282031261213d5761213a91600001612114565b90565b61020e565b90565b61215961215461215e92612142565b610272565b610368565b90565b61216a90610973565b604d811161217857600a0a90565b611def565b61218690610275565b90565b6121929061217d565b90565b61219e90610291565b90565b906121ab90610368565b9052565b6121b761208b565b506121c260066108b4565b6121cb816120c9565b916121d660006113f3565b5b806121ea6121e485610368565b91610368565b10156123655761225d90612209612203600683906108c3565b906102e8565b602061224761224261223c6000612236600561223061222a60068b906108c3565b906102e8565b90611060565b0161111c565b936120fc565b612108565b63313ce56790612255610203565b9586926112a0565b8252818061226d600482016103ae565b03915afa908115612360576122a161229c6122966020946122c897600091612333575b50612161565b92612189565b612195565b6122bd63c6e6f5926122b1610203565b968794859384936112a0565b835260048301610bcf565b03915afa91821561232e576122fb926122f691600091612300575b506122f1879184909261142a565b6121a1565b61140f565b6121d7565b612321915060203d8111612327575b6123198183611277565b8101906112b5565b386122e3565b503d61230f565b6112d4565b6123539150863d8111612359575b61234b8183611277565b810190612123565b38612290565b503d612341565b6112d4565b5091905090565b61239a906123953361238f6123896123846002611221565b610223565b91610223565b14611cab565b6123d7565b565b906123ad60018060a01b0391611da4565b9181191691161790565b906123cc6123c76123d39261029d565b611e58565b825461239c565b9055565b6123e28160046123b7565b61240c7fb12580e226e25bbb446909adeb7b42f7dd51fc77e9b58f14f321016cbd68c16a9161029d565b90612415610203565b8061241f816103ae565b0390a2565b61242d9061236c565b565b606090565b67ffffffffffffffff811161244c5760208091020190565b611261565b9061246361245e83612434565b611ad6565b918252565b6124726080611ad6565b90565b600090565b600090565b600090565b600090565b612491612468565b906020808080856124a0612475565b8152016124ab61247a565b8152016124b661247f565b8152016124c1612484565b81525050565b6124cf612489565b90565b60005b8281106124e157505050565b6020906124ec6124c7565b81840152016124d5565b9061251b61250383612451565b926020806125118693612434565b92019103906124d2565b565b906125278261094e565b811015612538576020809102010190565b61089e565b9061254790610961565b9052565b9061255590610973565b9052565b9061256390610223565b9052565b906125cc6125c36000612578612468565b9461258f612587838301611098565b83880161253d565b6125a661259d8383016110c5565b6020880161254b565b6125bd6125b48383016110f5565b60408801611b6b565b0161111c565b60608401612559565b565b6125d790612567565b90565b6125e261242f565b506125f56125f060066108b4565b6124f6565b6125ff60006113f3565b5b8061261c61261661261160066108b4565b610368565b91610368565b10156126705761266b90612664612649600561264361263d600686906108c3565b906102e8565b90611060565b8461265484926125ce565b61265e838361251d565b5261251d565b515061140f565b612600565b5090565b906126a39161269e3361269861269261268d6002611221565b610223565b91610223565b14611cab565b6126a5565b565b6126b46126b9929160096102a9565b6123b7565b565b906126c591612674565b565b600090565b6126d590610275565b90565b6126e1906126cc565b90565b6126ed90610291565b90565b90565b61270761270261270c926126f0565b610272565b610368565b90565b61271e61272491939293610368565b92610368565b91612730838202610368565b92818404149015171561273f57565b611def565b634e487b7160e01b600052601260045260246000fd5b61276661276c91610368565b91610368565b908115612777570490565b612744565b9390602061279d6127986127c7966127926126c7565b506126d8565b6126e4565b63aea91078906127bc84926127b0610203565b988994859384936112a0565b83526004830161031d565b03915afa801561298357612888956128506128619461285c9461285694602099600091612956575b50916000146128fb578161281361280d670de0b6b3a76400006126f3565b91610368565b106128d2575b612833600061282d61284b935b6005611060565b016110c5565b93612845670de0b6b3a76400006126f3565b9061270f565b61275a565b90614642565b92612189565b612195565b61287d63c6e6f592612871610203565b958694859384936112a0565b835260048301610bcf565b03915afa9081156128cd5760009161289f575b5090565b6128c0915060203d81116128c6575b6128b88183611277565b8101906112b5565b3861289b565b503d6128ae565b6112d4565b905061284b612833600061282d6128f0670de0b6b3a76400006126f3565b949350505050612819565b81612916612910670de0b6b3a76400006126f3565b91610368565b1161292d575b612833600061282d61284b93612826565b905061284b612833600061282d61294b670de0b6b3a76400006126f3565b94935050505061291c565b61297691508a3d811161297c575b61296e8183611277565b8101906112b5565b386127ef565b503d612964565b6112d4565b61299c6129976129a1926104b1565b610272565b610368565b90565b6129b36129b991939293610368565b92610368565b82018092116129c457565b611def565b6129d161208b565b506129da6126c7565b506129e560066108b4565b916129ef836120c9565b926129f9816120c9565b90612a0460006113f3565b92612a0f60006113f3565b935b84612a24612a1e85610368565b91610368565b1015612b8457612a8a90612a43612a3d600688906108c3565b906102e8565b906020612a60612a5b612a566004611221565b6126d8565b6126e4565b63aea9107890612a7f8592612a73610203565b978894859384936112a0565b83526004830161031d565b03915afa8015612b7f57612af1612b1c93612b0392612b2296600091612b51575b509081612ac8612ac2670de0b6b3a76400006126f3565b91610368565b11612b28575b612ae76000612ae1612aec936005611060565b016110f5565b612988565b61270f565b612afe8b918a909261142a565b6121a1565b612b16612b118a899061142a565b61144a565b906129a4565b9461140f565b93612a11565b9050612aec612ae76000612ae1612b46670de0b6b3a76400006126f3565b949350505050612ace565b612b72915060203d8111612b78575b612b6a8183611277565b8101906112b5565b38612aab565b503d612b60565b6112d4565b92959194909350612b9560006113f3565b93612ba060006113f3565b945b85612bb5612baf89610368565b91610368565b1015612ceb57612c16612c5491612bfd612beb612be487612bde612bd98d8c61142a565b61144a565b9061270f565b899061275a565b612bf88c918b909261142a565b6121a1565b612c10612c0b8b8a9061142a565b61144a565b906129a4565b956020612c3e612c39612c34612c2e600686906108c3565b906102e8565b6120fc565b612108565b63313ce56790612c4c610203565b9485926112a0565b82528180612c64600482016103ae565b03915afa8015612ce657612c9b612cad91612cb294600091612cb8575b50612c95612c908d869061142a565b61144a565b90614642565b612ca88b9184909261142a565b6121a1565b61140f565b94612ba2565b612cd9915060203d8111612cdf575b612cd18183611277565b810190612123565b38612c81565b503d612cc7565b6112d4565b96945094505050509190565b612d1c33612d16612d10612d0b6002611221565b610223565b91610223565b14611cab565b612d24612d26565b565b612d2e6146f9565b565b612d38612cf7565b565b90612d6b939291612d6633612d60612d5a612d556002611221565b610223565b91610223565b14611cab565b612e35565b565b60081b90565b90612d8061ff0091612d6d565b9181191691161790565b612d9e612d99612da392610973565b610272565b610973565b90565b90565b90612dbe612db9612dc592612d8a565b612da6565b8254612d73565b9055565b60301b90565b90612de76601000000000000600160d01b0391612dc9565b9181191691161790565b90612e06612e01612e0d9261029d565b611e58565b8254612dcf565b9055565b916020612e33929493612e2c60408201966000830190611176565b0190611183565b565b909192612ea990612e5b612e566000612e5060058790611060565b01611098565b611d5f565b612e7d83612e766000612e7060058890611060565b016110f5565b8791614569565b612e95846000612e8f60058790611060565b01612da9565b6000612ea360058590611060565b01612df1565b9091612ed57fd19afa6a62432ff0578526c79ab25d5e83049cfd7c7dade58cb858714dc0df039261029d565b92612eea612ee1610203565b92839283612e11565b0390a2565b90612efb939291612d3a565b565b90612f2e939291612f2933612f23612f1d612f186002611221565b610223565b91610223565b14611cab565b612fe9565b565b60007f417373657420697320616c726561647920737570706f72746564000000000000910152565b612f65601a6020926112e5565b612f6e81612f30565b0190565b612f889060208101906000818303910152612f58565b90565b15612f9257565b612f9a610203565b62461bcd60e51b815280612fb060048201612f72565b0390fd5b9081549168010000000000000000831015612fe45782612fdc916001612fe295018155611ea5565b90611e5b565b565b611261565b9091926130749061301861301361300d600061300760058890611060565b01611098565b15610961565b612f8b565b61302f836000906130298892611d88565b90614569565b6130486001600061304260058790611060565b01611dcf565b61306084600061305a60058790611060565b01612da9565b600061306e60058590611060565b01612df1565b6130886130816006611e7d565b8290612fb4565b90916130b47f62bd751f51149024e62ea3228318ca127fd1c35241bf764fba1e4b27d255e9309261029d565b926130c96130c0610203565b92839283612e11565b0390a2565b906130da939291612efd565b565b61310a90613105336130ff6130f96130f46002611221565b610223565b91610223565b14611cab565b61310c565b565b6131178160036123b7565b6131417f81b85e876e8723f9d61f238308ea004b759aee15ab163f6bd9b2cde9b20cc6189161029d565b9061314a610203565b80613154816103ae565b0390a2565b613162906130dc565b565b906131939161318e3361318861318261317d6002611221565b610223565b91610223565b14611cab565b6131eb565b565b906131a260001991611da4565b9181191691161790565b6131c06131bb6131c592610368565b610272565b610368565b90565b90565b906131e06131db6131e7926131ac565b6131c8565b8254613195565b9055565b6131fa6131ff92916008610f5c565b6131cb565b565b9061320b91613164565b565b61321961321e916110a5565b61107e565b90565b61322b905461320d565b90565b61323a61323f91611078565b6110ab565b90565b61324c905461322e565b90565b61326361325e61326892610cce565b610272565b610973565b90565b61327490610291565b90565b60207f647920696e697469616c697a6564000000000000000000000000000000000000917f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201520152565b6132d2602e6040926112e5565b6132db81613277565b0190565b6132f590602081019060008183039101526132c5565b90565b156132ff57565b613307610203565b62461bcd60e51b81528061331d600482016132df565b0390fd5b9061333661333161333d92612d8a565b612da6565b8254611daa565b9055565b9061335661335161335d92611dc0565b611dcc565b8254612d73565b9055565b61336a9061324f565b9052565b919061338290600060208501940190613361565b565b6133d161339a6133946000613221565b15610961565b918280613483575b8015613434575b6133b2906132f8565b6133c66133bf600161324f565b6000613321565b82613423575b613553565b6133d8575b565b6133e3600080613341565b600161341b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249891613412610203565b9182918261336e565b0390a16133d6565b61342f60016000613341565b6133cc565b5061344f6134496134443061326b565b61498a565b15610961565b8061345a575b6133a9565b506133b26134686000613242565b61347b613475600161324f565b91610973565b149050613455565b5061348e6000613242565b6134a161349b600161324f565b91610973565b106133a2565b6134bb6134b66134c0926113f0565b610272565b610218565b90565b6134cc906134a7565b90565b60007f476f7665726e6f722063616e6e6f74206265207a65726f206164647265737300910152565b613504601f6020926112e5565b61350d816134cf565b0190565b61352790602081019060008183039101526134f7565b90565b1561353157565b613539610203565b62461bcd60e51b81528061354f60048201613511565b0390fd5b6135849061357d8161357661357061356b60006134c3565b610223565b91610223565b141561352a565b60026123b7565b565b61358f90613384565b565b61359b90516104b1565b90565b6135aa6135af91611078565b610b89565b90565b6135bc905461359e565b90565b6135c99051610223565b90565b6135d461208b565b506135e76135e260066108b4565b6120c9565b906135f26004611221565b906135fd60006113f3565b5b8061361a61361461360f60066108b4565b610368565b91610368565b10156136b7576136b2906136ad61369b61363f613639600685906108c3565b906102e8565b61365361364e60058390611060565b6125ce565b61369160606136896136798a61367361366e60408801613591565b612988565b9061270f565b61368360016135b2565b9061275a565b9392016135bf565b889160019361277c565b6136a8879184909261142a565b6121a1565b61140f565b6135fe565b50505090565b6136c56126c7565b506136d060006113f3565b906136db60006113f3565b915b826136f96136f36136ee60066108b4565b610368565b91610368565b10156139a55761371461370e600685906108c3565b906102e8565b61375c602061372a6137258461123a565b611246565b6370a082319061375161373c3061141e565b92613745610203565b958694859384936112a0565b83526004830161031d565b03915afa9081156139a057600091613972575b5091613788600061378260058590611060565b0161111c565b6137d0602061379e6137998461123a565b611246565b6370a08231906137c56137b03061141e565b926137b9610203565b958694859384936112a0565b83526004830161031d565b03915afa91821561396d576137fc6137f761382394602094600091613940575b5092612189565b612195565b6138186307a2d13a61380c610203565b958694859384936112a0565b835260048301610bcf565b03915afa90811561393b5761388a946020926138489260009161390e575b50906129a4565b9261386361385e6138596004611221565b6126d8565b6126e4565b61387f63aea91078613873610203565b978894859384936112a0565b83526004830161031d565b03915afa8015613909576138b26138cf936138c9926138d5966000916138db575b509061270f565b6138c3670de0b6b3a76400006126f3565b9061275a565b906129a4565b9261140f565b916136dd565b6138fc915060203d8111613902575b6138f48183611277565b8101906112b5565b386138ab565b503d6138ea565b6112d4565b61392e9150843d8111613934575b6139268183611277565b8101906112b5565b38613841565b503d61391c565b6112d4565b6139609150853d8111613966575b6139588183611277565b8101906112b5565b386137f0565b503d61394e565b6112d4565b613993915060203d8111613999575b61398b8183611277565b8101906112b5565b3861376f565b503d613981565b6112d4565b90915090565b63ffffffff60e01b1690565b6139cb6139c66139d0926104b1565b6112a0565b6139ab565b90565b91613a17600492613a08613a1c95936139ef63a9059cbb6139b7565b926139f8610203565b96879460208601908152016113cc565b60208201810382520383611277565b614ad3565b565b604090613a48613a4f9496959396613a3e60608401986000850190610310565b6020830190610310565b0190610bc2565b565b613a9e9391613a8a600494613a999394613a6e6323b872dd6139b7565b93919091613a7a610203565b9788956020870190815201613a1e565b60208201810382520383611277565b614ad3565b565b606090565b90613ab09101610368565b90565b67ffffffffffffffff8111613ad157613acd602091611257565b0190565b611261565b90613ae8613ae383613ab3565b611ad6565b918252565b369037565b90613b17613aff83613ad6565b92602080613b0d8693613ab3565b9201910390613aed565b565b6001613b259103610368565b90565b613b34613b3a91610368565b91610368565b908115613b45570490565b612744565b613b52613aa0565b50613b6f613b5f82614c95565b613b696001610cd1565b90613aa5565b90613b7982613af2565b91613b826126c7565b5060200182015b600115613bed57613b9c613bc891613b19565b916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353613bc2600a612145565b90613b28565b80613bdc613bd660006113f3565b91610368565b14613be75790613b89565b50505b90565b5050613bea565b60007f416d6f756e74206d7573742062652067726561746572207468616e2030000000910152565b613c29601d6020926112e5565b613c3281613bf4565b0190565b613c4c9060208101906000818303910152613c1c565b90565b15613c5657565b613c5e610203565b62461bcd60e51b815280613c7460048201613c36565b0390fd5b5090565b60007f496e76616c696420726f757465722064617461206c656e677468000000000000910152565b613cb1601a6020926112e5565b613cba81613c7c565b0190565b613cd49060208101906000818303910152613ca4565b90565b15613cde57565b613ce6610203565b62461bcd60e51b815280613cfc60048201613cbe565b0390fd5b9190811015613d10576020020190565b61089e565b35613d1f8161022f565b90565b600080fd5b600080fd5b600080fd5b903590600160200381360303821215613d73570180359067ffffffffffffffff8211613d6e57602001916001820236038313613d6957565b613d2c565b613d27565b613d22565b90821015613d93576020613d8f9202810190613d31565b9091565b61089e565b613dce613dd594613dc4606094989795613dba608086019a6000870190610310565b6020850190610310565b6040830190610310565b0190610bc2565b565b90565b613dee613de9613df392613dd7565b610272565b610368565b90565b60207f64207765696768747320746f6f20686967680000000000000000000000000000917f5661756c74436f72653a20646576696174696f6e2066726f6d2064657369726560008201520152565b613e5160326040926112e5565b613e5a81613df6565b0190565b613e749060208101906000818303910152613e44565b90565b15613e7e57565b613e86610203565b62461bcd60e51b815280613e9c60048201613e5e565b0390fd5b9496939195608052613ec7613ec26000613ebc60058990611060565b01611098565b611d5f565b613ee481613ede613ed860006113f3565b91610368565b11613c4f565b613f15613ef48860805190613c78565b613f0f613f09613f0460066108b4565b610368565b91610368565b14613cd7565b613f1f60016135b2565b92613f2a60006113f3565b94613f3560066108b4565b97613f4060006113f3565b965b87613f55613f4f8c610368565b91610368565b10156143da57613f70613f6a60068a906108c3565b906102e8565b80613f83613f7d8c610223565b91610223565b141560001461431557613fe991613fa4613f9f60058490611060565b6125ce565b6020613fb7613fb28561123a565b611246565b6370a0823190613fde613fc93061141e565b92613fd2610203565b988994859384936112a0565b83526004830161031d565b03915afa801561431057614046946000916142e2575b50602061401c6140176140126004611221565b6126d8565b6126e4565b63aea910789061403b879261402f610203565b998a94859384936112a0565b83526004830161031d565b03915afa80156142dd578f956000916142af575b50948c8b8a8861407a614074670de0b6b3a76400006126f3565b91610368565b1161427f575b9161409d6140986140a9936140af9695908491613d00565b613d15565b92906080519091613d78565b91614ff6565b6140f760206140c56140c08761123a565b611246565b6370a08231906140ec6140d73061141e565b926140e0610203565b958694859384936112a0565b83526004830161031d565b03915afa90811561427a5760009161424c575b509061411591611e05565b928c90888d8c61412492613d00565b61412d90613d15565b9085927fffebebfb273923089a3ed6bac0fd4686ac740307859becadeb82f998e30db6149361415a610203565b9384936141679385613d98565b0390a1879060400161417890613591565b61418190612988565b61418a9161270f565b896141949161275a565b808361419f90610368565b906141a990610368565b116000146142339461422c9461420a6141eb6142269561420f95614239576141e66141d5828690611e05565b5b6141e06064613dda565b9061270f565b61275a565b6142046141fe6141f9610ced565b610368565b91610368565b10613e77565b61270f565b614220670de0b6b3a76400006126f3565b9061275a565b906129a4565b975b61140f565b96613f42565b6141e6614247858390611e05565b6141d6565b61426d915060203d8111614273575b6142658183611277565b8101906112b5565b3861410a565b503d61425b565b6112d4565b97506140af929161409d6140986140a9936142a1670de0b6b3a76400006126f3565b9b9395965093505050614080565b6142d0915060203d81116142d6575b6142c88183611277565b8101906112b5565b3861405a565b503d6142be565b6112d4565b614303915060203d8111614309575b6142fb8183611277565b8101906112b5565b38613fff565b503d6142f1565b6112d4565b602061435c9161433561433061432b6004611221565b6126d8565b6126e4565b61435163aea91078614345610203565b958694859384936112a0565b83526004830161031d565b03915afa9182156143d55761439b614384614233946143a1946000916143a7575b508961270f565b614395670de0b6b3a76400006126f3565b9061275a565b906129a4565b9761422e565b6143c8915060203d81116143ce575b6143c08183611277565b8101906112b5565b3861437d565b503d6143b6565b6112d4565b985095509750505050506144489150614442836143ff6143f984610368565b91610368565b119161443d61441661441087613b4a565b92613b4a565b9161442e614422610203565b938492602084016118a0565b60208201810382520382611277565b6118c8565b90611915565b61446261445d6144586003611221565b6113a4565b6113b0565b906340c10f1990339092803b156144e0576144916000809461449c614485610203565b978896879586946112a0565b8452600484016113cc565b03925af180156144db576144ae575b50565b6144ce9060003d81116144d4575b6144c68183611277565b8101906113bc565b386144ab565b503d6144bc565b6112d4565b611252565b60101b90565b906144fc65ffffffff0000916144e5565b9181191691161790565b61451a61451561451f926104b1565b610272565b6104b1565b90565b90565b9061453a61453561454192614506565b614522565b82546144eb565b9055565b91602061456792949361456060408201966000830190611183565b0190611183565b565b6145a161459a61458b61457c60016135b2565b61458587612988565b906129a4565b61459485612988565b90611e05565b60016131cb565b6145b98360006145b360058590611060565b01614525565b90916145e57ffe53ad22d287601d2ed917d8aedf4a9bf6f948833c8b55fbc07d8a4e1cdd77899261029d565b926145fa6145f1610203565b92839283614545565b0390a2565b90565b61461661461161461b926145ff565b610272565b610973565b90565b61462a61463091610973565b91610973565b90039060ff821161463d57565b611def565b61464a6126c7565b508061465f6146596012614602565b91610973565b1060001461468f5761468661468161468c939261467c6012614602565b61461e565b612161565b9061275a565b90565b806146a361469d6012614602565b91610973565b116146ac575090565b6146cc6146c76146d293926146c16012614602565b9061461e565b612161565b9061270f565b90565b6146de90610275565b90565b6146ea906146d5565b90565b6146f690610291565b90565b61470360066108b4565b9061470e60006113f3565b5b8061472261471c85610368565b91610368565b10156149805761474561474061473a600684906108c3565b906102e8565b61123a565b90614786602061475484611246565b6370a082319061477b6147663061141e565b9261476f610203565b958694859384936112a0565b83526004830161031d565b03915afa90811561497b5760009161494d575b506147b66147b160086147ab86611246565b90610f5c565b6135b2565b90806147ca6147c484610368565b91610368565b1061494157906147d991611e05565b6147f56147f060096147ea86611246565b906102a9565b611221565b908161481261480c61480760006134c3565b610223565b91610223565b141580614926575b614831575b505061482c91505b61140f565b61470f565b61485661483d836146e1565b6148518661484a836146ed565b85916139d3565b6146ed565b9363b6b55f2582863b156149215761488e9661488360008094614877610203565b9a8b95869485936112a0565b835260048301610bcf565b03925af190811561491c5761482c956148ac926148ef575b50611246565b9190916148e57f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d936148dc610203565b93849384613a1e565b0390a1388061481f565b61490f9060003d8111614915575b6149078183611277565b8101906113bc565b386148a6565b503d6148fd565b6112d4565b611252565b508061493b61493560006113f3565b91610368565b1161481a565b505061482c9150614827565b61496e915060203d8111614974575b6149668183611277565b8101906112b5565b38614799565b503d61495c565b6112d4565b509050565b600090565b614992614985565b503b6149a76149a160006113f3565b91610368565b1190565b60007f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6149dd6020613ad6565b906149ea602083016149ab565b565b6149f46149d3565b90565b5190565b90505190614a0882610c1a565b565b90602082820312614a2457614a21916000016149fb565b90565b61020e565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201520152565b614a84602a6040926112e5565b614a8d81614a29565b0190565b614aa79060208101906000818303910152614a77565b90565b15614ab157565b614ab9610203565b62461bcd60e51b815280614acf60048201614a91565b0390fd5b614b1d91614ae3614af292611246565b90614aec6149ec565b916150a4565b614afb816149f7565b614b0e614b0860006113f3565b91610368565b14908115614b1f575b50614aaa565b565b614b3a91506020614b2f826149f7565b818301019101614a0a565b38614b17565b90565b614b57614b52614b5c92614b40565b610272565b610368565b90565b90565b614b76614b71614b7b92614b5f565b610272565b610368565b90565b90565b614b95614b90614b9a92614b7e565b610272565b610368565b90565b90565b614bb4614baf614bb992614b9d565b610272565b610368565b90565b90565b614bd3614bce614bd892614bbc565b610272565b610368565b90565b90565b614bf2614bed614bf792614bdb565b610272565b610368565b90565b90565b614c11614c0c614c1692614bfa565b610272565b610368565b90565b90565b614c30614c2b614c3592614c19565b610272565b610368565b90565b90565b614c4f614c4a614c5492614c38565b610272565b610368565b90565b90565b614c6e614c69614c7392614c57565b610272565b610368565b90565b90565b614c8d614c88614c9292614c76565b610272565b610368565b90565b614c9d6126c7565b50614ca860006113f3565b9080614cd7614cd17a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000614b43565b91610368565b1015614eaf575b80614cff614cf96d04ee2d6d415b85acef8100000000614b81565b91610368565b1015614e74575b80614d20614d1a662386f26fc10000614bbf565b91610368565b1015614e40575b80614d3e614d386305f5e100614bfd565b91610368565b1015614e0f575b80614d5a614d54612710614c3b565b91610368565b1015614de0575b80614d75614d6f6064613dda565b91610368565b1015614db2575b614d8f614d89600a612145565b91610368565b1015614d99575b90565b614dad90614da76001610cd1565b90613aa5565b614d96565b614dc9614dda91614dc36064613dda565b90613b28565b91614dd46002614c79565b90613aa5565b90614d7c565b614df8614e0991614df2612710614c3b565b90613b28565b91614e036004614c5a565b90613aa5565b90614d61565b614e29614e3a91614e236305f5e100614bfd565b90613b28565b91614e346008614c1c565b90613aa5565b90614d45565b614e5d614e6e91614e57662386f26fc10000614bbf565b90613b28565b91614e686010614bde565b90613aa5565b90614d27565b614e98614ea991614e926d04ee2d6d415b85acef8100000000614b81565b90613b28565b91614ea36020614ba0565b90613aa5565b90614d06565b614ee0614ef191614eda7a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000614b43565b90613b28565b91614eeb6040614b62565b90613aa5565b90614cde565b905090565b90826000939282370152565b909182614f1881614f1f93614ef7565b8093614efc565b0190565b9091614f2e92614f08565b90565b67ffffffffffffffff8111614f4f57614f4b602091611257565b0190565b611261565b90614f66614f6183614f31565b611ad6565b918252565b606090565b3d600014614f8d57614f813d614f54565b903d6000602084013e5b565b614f95614f6b565b90614f8b565b60007f556e6b6e6f776e20726561736f6e000000000000000000000000000000000000910152565b614fd0600e6020926112e5565b614fd981614f9b565b0190565b614ff39060208101906000818303910152614fc3565b90565b9060009283809392615012615009610203565b93849283614f23565b03925af1615028615021614f70565b9115610961565b61502f5750565b615038816149f7565b61504b61504560006113f3565b91610368565b116000146150815761505f61507d916118c8565b615067610203565b918291634ecb9b6d60e01b8352600483016118fc565b0390fd5b615089610203565b634ecb9b6d60e01b8152806150a060048201614fdd565b0390fd5b906150c492916150b2614f6b565b50906150be60006113f3565b9161517d565b90565b6150d090610291565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201520152565b61512e60266040926112e5565b615137816150d3565b0190565b6151519060208101906000818303910152615121565b90565b1561515b57565b615163610203565b62461bcd60e51b8152806151796004820161513b565b0390fd5b91600080916151d4959361518f614f6b565b506151b661519c306150c7565b316151af6151a985610368565b91610368565b1015615154565b8591602082019151925af1916151ca614f70565b909290919261525b565b90565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b61520c601d6020926112e5565b615215816151d7565b0190565b61522f90602081019060008183039101526151ff565b90565b1561523957565b615241610203565b62461bcd60e51b81528061525760048201615219565b0390fd5b919290615266614f6b565b506000146152ac5750615278826149f7565b61528b61528560006113f3565b91610368565b14615295575b5090565b6152a16152a69161498a565b615232565b38615291565b82906152b7826149f7565b6152ca6152c460006113f3565b91610368565b116000146152db5750805190602001fd5b6152fc906152e7610203565b91829162461bcd60e51b8352600483016118fc565b0390fdfea2646970667358221220a009f460a36f3979617c9a133a3cad2160fa108f9c6f098380bcd4820124b1fc64736f6c634300081b0033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"string","name":"reason","type":"string"}],"name":"SwapFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint8","name":"decimals","type":"uint8"},{"indexed":false,"internalType":"uint32","name":"weight","type":"uint32"}],"name":"AssetAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AssetAllocated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint8","name":"decimals","type":"uint8"},{"indexed":false,"internalType":"uint32","name":"weight","type":"uint32"}],"name":"AssetChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"}],"name":"AssetRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint32","name":"oldWeight","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"newWeight","type":"uint32"}],"name":"AssetWeightChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"bentoUSD","type":"address"}],"name":"BentoUSDUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"governor","type":"address"}],"name":"GovernorUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oracleRouter","type":"address"}],"name":"OracleRouterUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"inputAsset","type":"address"},{"indexed":false,"internalType":"address","name":"outputAsset","type":"address"},{"indexed":false,"internalType":"address","name":"router","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allAssets","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allocate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"assetToEthenaWalletProxy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"assetToStrategy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"assets","outputs":[{"internalType":"bool","name":"isSupported","type":"bool"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint32","name":"weight","type":"uint32"},{"internalType":"address","name":"ltToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoUSD","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"uint32","name":"_weight","type":"uint32"},{"internalType":"address","name":"_ltToken","type":"address"}],"name":"changeAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"address","name":"ltToken","type":"address"},{"internalType":"address","name":"priceOracle","type":"address"},{"internalType":"bool","name":"redeemFlag","type":"bool"}],"name":"convertToLTAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deviationTolerance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAssets","outputs":[{"components":[{"internalType":"bool","name":"isSupported","type":"bool"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint32","name":"weight","type":"uint32"},{"internalType":"address","name":"ltToken","type":"address"}],"internalType":"struct VaultStorage.Asset[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"desiredAmount","type":"uint256"}],"name":"getDepositAssetAmounts","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"inputAmount","type":"uint256"}],"name":"getOutputLTAmounts","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenToShareRatios","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWeights","outputs":[{"internalType":"uint32[]","name":"","type":"uint32[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"governor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_governor","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"ltTokenToAsset","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"minimalAmountInVault","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_minimumBentoUSDAmount","type":"uint256"},{"internalType":"address[]","name":"_routers","type":"address[]"},{"internalType":"bytes[]","name":"_routerData","type":"bytes[]"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_minimumBentoUSDAmount","type":"uint256"}],"name":"mintBasket","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"oracleRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"redeemLTBasket","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"}],"name":"removeAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"uint32","name":"_weight","type":"uint32"},{"internalType":"address","name":"_ltToken","type":"address"}],"name":"setAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_bentoUSD","type":"address"}],"name":"setBentoUSD","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setMinimalAmountInVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracleRouter","type":"address"}],"name":"setOracleRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"address","name":"_strategy","type":"address"}],"name":"setStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalWeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]}