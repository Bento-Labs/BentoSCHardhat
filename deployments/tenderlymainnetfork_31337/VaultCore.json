{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.27\"},\"sources\":{\"contracts/vault/VaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IOracle} from \\\"../interfaces/IOracle.sol\\\";\\nimport {VaultAdmin} from \\\"./VaultAdmin.sol\\\";\\nimport {BentoUSD} from \\\"../BentoUSD.sol\\\";\\nimport {IStrategy} from \\\"../interfaces/IStrategy.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {EthenaWalletProxyManager} from \\\"./EthenaWalletProxyManager.sol\\\";\\nimport {EthenaWalletProxy} from \\\"../utils/EthenaWalletProxy.sol\\\";\\nimport {AssetInfo, StrategyType} from \\\"./VaultDefinitions.sol\\\";\\n\\n/**\\n * @title VaultCore\\n * @notice Core vault implementation for BentoUSD stablecoin system\\n * @dev Handles minting, redeeming, and asset allocation operations\\n */\\ncontract VaultCore is Initializable, VaultAdmin, EthenaWalletProxyManager {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n    uint256 public constant deviationTolerance = 100; // in BPS\\n    uint256 constant ONE = 1e18;\\n\\n    event Swap(\\n        address inputAsset,\\n        address outputAsset,\\n        address router,\\n        uint256 amount\\n    );\\n\\n    event AssetAllocated(\\n        address asset,\\n        uint256 amount\\n    );\\n\\n    error SwapFailed(string reason);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // === External State-Changing Functions ===\\n    \\n    function initialize(address _governor) public initializer {\\n        if (_governor == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        governor = _governor;\\n    }\\n\\n    /**\\n     * @notice Mints BentoUSD tokens in exchange for a single supported asset\\n     * @param _recipient Address to receive minted BentoUSD\\n     * @param _asset Address of the input asset\\n     * @param _amount Amount of input asset to deposit\\n     * @param _minimumBentoUSDAmount Minimum acceptable BentoUSD output\\n     * @param _routers Array of DEX router addresses for swaps\\n     * @param _routerData Encoded swap data for each router\\n     */\\n    function mintWithOneToken(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumBentoUSDAmount,\\n        address[] calldata _routers,\\n        bytes[] calldata _routerData\\n    ) external {\\n        // Implementation here\\n    }\\n\\n    /**\\n     * @notice Mints BentoUSD by depositing a proportional basket of all supported assets\\n     * @param _recipient Address to receive minted BentoUSD\\n     * @param _amount Total USD value to deposit\\n     * @param _minimumBentoUSDAmount Minimum acceptable BentoUSD output\\n     */\\n    function mintBasket(\\n        address _recipient,\\n        uint256 _amount,\\n        uint256 _minimumBentoUSDAmount\\n    ) public {\\n        (uint256[] memory amounts, uint256 totalAmount) = getDepositAssetAmounts(_amount);\\n        uint256 assetLength = allAssets.length;\\n        for (uint256 i; i < assetLength; ++i) {\\n            address assetAddress = allAssets[i];\\n            IERC20(assetAddress).safeTransferFrom(msg.sender, address(this), amounts[i]);\\n        }\\n        if (totalAmount < _minimumBentoUSDAmount) {\\n            revert SlippageTooHigh();\\n        }\\n        BentoUSD(bentoUSD).mint(_recipient, totalAmount);\\n    }\\n\\n    /**\\n     * @notice Mints BentoUSD and stakes it in BentoUSDPlus\\n     * @param _recipient Address to receive staked BentoUSDPlus\\n     * @param _amount Total USD value to deposit\\n     * @param _minimumBentoUSDAmount Minimum acceptable BentoUSD output\\n     */\\n    function mintWithBasketAndStake(\\n        address _recipient,\\n        uint256 _amount,\\n        uint256 _minimumBentoUSDAmount\\n    ) external {\\n        mintBasket(address(this), _amount, _minimumBentoUSDAmount);\\n        BentoUSD(bentoUSD).approve(address(bentoUSDPlus), _amount);\\n        IERC4626(bentoUSDPlus).deposit(_amount, _recipient);\\n    }\\n\\n    /**\\n     * @notice Redeems BentoUSD for liquid staking tokens of supported assets\\n     * @param _recipient Address to receive withdrawn assets\\n     * @param _amount Amount of BentoUSD to redeem\\n     */\\n    function redeemLTBasket(address _recipient, uint256 _amount) external {\\n        uint256[] memory ltAmounts = getOutputLTAmounts(_amount);\\n        BentoUSD(bentoUSD).burn(msg.sender, _amount);\\n        uint256 allAssetsLength = allAssets.length;\\n        for (uint256 i; i < allAssetsLength; ++i) {\\n            address assetAddress = allAssets[i];\\n            address ltToken = assetToAssetInfo[assetAddress].ltToken;\\n            if (IERC20(ltToken).balanceOf(address(this)) < ltAmounts[i]) {\\n                revert InsufficientBalance();\\n            }\\n            IERC20(ltToken).safeTransfer(_recipient, ltAmounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Redeems BentoUSD for underlying assets\\n     * @param _recipient Address to receive withdrawn assets\\n     * @param _amount Amount of BentoUSD to redeem\\n     */\\n    function redeemUnderlyingBasket(address _recipient, uint256 _amount) external {\\n        uint256 allAssetsLength = allAssets.length;\\n        // we burn the BentoUSD tokens\\n        BentoUSD(bentoUSD).burn(msg.sender, _amount);\\n        // first we try to withdraw from the buffer wallet inside the vault core\\n        // if not enough, we try to exchange the yield-bearing token to the underlying stable token\\n        for (uint256 i; i < allAssetsLength; ++i) {\\n            address assetAddress = allAssets[i];\\n            AssetInfo memory assetInfo = assetToAssetInfo[assetAddress];\\n            uint256 adjustedPrice = adjustPrice(IOracle(oracleRouter).price(assetAddress), true);\\n            uint256 amountToRedeem = _amount.mulDiv(assetInfo.weight * ONE, totalWeight * adjustedPrice, Math.Rounding.Down);\\n            // we need to scale the decimals\\n            amountToRedeem = scaleDecimals(amountToRedeem, 18, assetInfo.decimals);\\n            // get the buffer balance\\n            uint256 amountInBuffer = IERC20(assetAddress).balanceOf(address(this));\\n            if (amountInBuffer >= amountToRedeem) {\\n                // if the buffer has enough, we can just transfer the amount to the user\\n                IERC20(assetAddress).safeTransfer(_recipient, amountToRedeem);\\n            } else {\\n                // the missing amount is in underlying assets\\n                uint256 missingAmount = amountToRedeem - amountInBuffer;\\n                address ltToken = assetInfo.ltToken;\\n                if (assetInfo.strategyType == StrategyType.Generalized4626) {\\n                    // for ERC4626-compliant LTs we can withdraw directly\\n                    // msg.sender is the receiver and this contract is currently holding the LTs\\n                    IERC4626(ltToken).withdraw(missingAmount, msg.sender, address(this));\\n                } else if (assetInfo.strategyType == StrategyType.Ethena) {\\n                    // the ethena wallet proxy corresponding to msg.sender\\n                    address ethenaWalletProxy = userToEthenaWalletProxy[msg.sender];\\n                    if (ethenaWalletProxy == address(0)) {\\n                        ethenaWalletProxy = address(new EthenaWalletProxy(ltToken, address(this), msg.sender));\\n                        userToEthenaWalletProxy[msg.sender] = ethenaWalletProxy;\\n                    }\\n\\n                    // we cannot withdraw yet, here we just start the unbonding period\\n                    uint256 missingAmountInLT = IERC4626(ltToken).convertToShares(missingAmount);\\n                    IERC4626(ltToken).transfer(ethenaWalletProxy, missingAmountInLT);\\n                    commitWithdraw(missingAmountInLT, ethenaWalletProxy);\\n                } else {\\n                    // for other types of LTs we perform the logics through a specialized strategy contract\\n                    // we need to send LTs to this strategy contract first\\n                    address strategy = assetInfo.strategy;\\n                    uint256 missingAmountInLT = IStrategy(strategy).convertToShares(missingAmount);\\n                    IERC20(ltToken).safeTransfer(strategy, missingAmountInLT);\\n                    IStrategy(strategy).redeem(_recipient, missingAmountInLT);\\n                    // the transfer of underlying assets to the user is done in the strategy contract\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Allocates excess assets in the vault to yield-generating strategies\\n     * @dev Can only be called by the governor\\n     */\\n    function allocate() external onlyGovernor {\\n        _allocate();\\n    }\\n\\n    // === Internal State-Changing Functions ===\\n\\n    function _allocate() internal virtual {\\n        uint256 allAssetsLength = allAssets.length;\\n        for (uint256 i; i < allAssetsLength; ++i) {\\n            IERC20 asset = IERC20(allAssets[i]);\\n            uint256 assetBalance = asset.balanceOf(address(this));\\n            AssetInfo memory assetInfo = assetToAssetInfo[allAssets[i]];\\n            uint256 minimalAmount = assetInfo.minimalAmountInVault;\\n            if (assetBalance < minimalAmount) continue;\\n            // Multiply the balance by the vault buffer modifier and truncate\\n            // to the scale of the asset decimals\\n            uint256 allocateAmount = assetBalance - minimalAmount;\\n\\n            // if the strategy is a generalized 4626 or ethena, we deposit into the lt token directly\\n            // otherwise we deposit into the strategy proxy\\n            if (assetInfo.strategyType == StrategyType.Generalized4626 || assetInfo.strategyType == StrategyType.Ethena) {\\n                address ltToken = assetInfo.ltToken;\\n                // if the asset is USDT, we need to set the allowance to 0 first\\n                if (address(asset) == 0xdAC17F958D2ee523a2206206994597C13D831ec7) {\\n                    asset.safeApprove(ltToken, 0);\\n                } \\n                asset.safeApprove(ltToken, allocateAmount);\\n                IERC4626(ltToken).deposit(allocateAmount, address(this));\\n            } else {\\n                IStrategy(assetInfo.strategy).deposit(allocateAmount);\\n            }\\n            // the event should include how much LT tokens we get back\\n                emit AssetAllocated(\\n                    address(asset),\\n                    allocateAmount\\n                );\\n            }\\n        }\\n\\n    // === Public/External View Functions ===\\n\\n    /**\\n     * @notice Calculates the required amounts of each asset for a proportional deposit\\n     * @param desiredAmount Total USD value to be deposited\\n     * @return Array of asset amounts and total USD value\\n     */\\n    function getDepositAssetAmounts(uint256 desiredAmount) public view returns (uint256[] memory, uint256) {\\n        uint256 numberOfAssets = allAssets.length;\\n        // the relative weights also take into account the price of the asset\\n        uint256[] memory relativeWeights = new uint256[](numberOfAssets);\\n        uint256[] memory amounts = new uint256[](numberOfAssets);\\n        uint256 totalRelativeWeight = 0;\\n        for (uint256 i; i < numberOfAssets; ++i) {\\n            address assetAddress = allAssets[i];\\n            // we round it upwards to avoid rounding errors detrimental for the protocol\\n            uint256 assetPrice = IOracle(oracleRouter).price(assetAddress);\\n            if (assetPrice > ONE) {\\n                assetPrice = ONE;\\n            }\\n            relativeWeights[i] = assetToAssetInfo[assetAddress].weight * assetPrice;\\n            totalRelativeWeight += relativeWeights[i];\\n        }\\n        uint256 totalAmount = 0;\\n        for (uint256 i; i < numberOfAssets; ++i) {\\n            // here the amount[i] has 18 decimals (because bentoUSD has 18 decimals)\\n            amounts[i] = (desiredAmount * relativeWeights[i]) / totalRelativeWeight;\\n            totalAmount += amounts[i];\\n            // we need to scale it to the decimals of the asset\\n            amounts[i] = scaleDecimals(amounts[i], 18, IERC20Metadata(allAssets[i]).decimals());\\n        }\\n        return (amounts, totalAmount);\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of LTs to withdraw for a given amount of BentoUSD\\n     * @param inputAmount Amount of BentoUSD to redeem\\n     * @return Array of LT amounts\\n     */\\n    function getOutputLTAmounts(uint256 inputAmount) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](allAssets.length);\\n        address priceOracle = oracleRouter;\\n        uint256 assetLength = allAssets.length;\\n        for (uint256 i; i < assetLength; ++i) {\\n            address asset = allAssets[i];\\n            AssetInfo memory assetInfo = assetToAssetInfo[asset];\\n            // first we calculate the amount corresponding to the asset in USD \\n            // the amount has 18 decimals (because bentoUSD has 18 decimals)\\n            uint256 partialInputAmount = inputAmount.mulDiv(assetInfo.weight, totalWeight, Math.Rounding.Down);\\n            uint256 adjustedPrice = adjustPrice(IOracle(priceOracle).price(asset), true);\\n            // we need to scale it to the decimals of the asset\\n            uint256 normalizedAmount = scaleDecimals(partialInputAmount.mulDiv(ONE, adjustedPrice, Math.Rounding.Down), 18, IERC20Metadata(asset).decimals());\\n            address ltToken = assetInfo.ltToken;\\n            amounts[i] = IERC4626(ltToken).convertToShares(normalizedAmount);\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Returns the total value of assets in the vault\\n     * @return Total value in USD\\n     */\\n    function getTotalValue() public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        uint256 assetLength = allAssets.length;\\n        for (uint256 i; i < assetLength; ++i) {\\n            address asset = allAssets[i];\\n            // Get direct asset balance\\n            uint256 balance = IERC20(asset).balanceOf(address(this));\\n            \\n            // Get LT token balance and convert to underlying\\n            address ltToken = assetToAssetInfo[asset].ltToken;\\n            uint256 ltBalance = IERC20(ltToken).balanceOf(address(this));\\n            uint256 underlyingBalance = IERC4626(ltToken).convertToAssets(ltBalance);\\n            \\n            // Get total balance (direct + underlying from LT)\\n            uint256 totalBalance = balance + underlyingBalance;\\n            \\n            // Multiply by price to get USD value\\n            uint256 assetPrice = adjustPrice(IOracle(oracleRouter).price(asset), false);\\n            totalValue += totalBalance.mulDiv(assetPrice, ONE, Math.Rounding.Down);\\n        }\\n        return totalValue;\\n    }\\n\\n    /**\\n     * @notice Mints reward based on the total value of the vault\\n     */\\n    function mintReward() public {\\n        uint256 totalValue = getTotalValue();\\n        uint256 bentoUSDBalance = BentoUSD(bentoUSD).balanceOf(address(this));\\n        BentoUSD(bentoUSD).mint(msg.sender, totalValue - bentoUSDBalance);\\n    }\\n\\n\\n\\n    // === Internal Pure Functions ===\\n    function adjustPrice(uint256 price, bool redeemFlag) internal pure returns (uint256) {\\n        if (redeemFlag) {\\n            if (price < ONE) {\\n                price = ONE;\\n            }\\n        } else {\\n            if (price > ONE) {\\n                price = ONE;\\n            }\\n        }\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Scale the amount with \\\"from\\\" decimals to an amount with \\\"to\\\" decimals\\n     * @param amount The amount to scale\\n     * @param from The current decimals of the asset\\n     * @param to The target decimals\\n     * @return The scaled amount\\n     */\\n    function scaleDecimals(uint256 amount, uint8 from, uint8 to) internal pure returns (uint256) {\\n        if (from < to) {\\n            // if the asset has less than 18 decimals, we add 0s to the end\\n            return amount * 10 ** (to - from);\\n        } else if (from > to) {\\n            // if the asset has more than 18 decimals, we remove the extra decimals\\n            return amount / 10 ** (from - to);\\n        }\\n        return amount;\\n    }\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"contracts/utils/Errors.sol\":{\"content\":\"pragma solidity 0.8.27;\\n\\ncontract Errors {\\n    error Unauthorized();\\n    error ZeroAddress();\\n    error ZeroAmount();\\n    error Inconsistency();\\n    error DefaultValueRequired();\\n    error NotSupported();\\n    error StalePrice();\\n    error SlippageTooHigh();\\n    error InsufficientBalance();\\n}\",\"versionPragma\":\"0.8.27\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint _start,\\n        uint _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"versionPragma\":\">=0.8.0 <0.9.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(\\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\\n            \\\"LzApp: invalid source sending contract\\\"\\n        );\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint _nativeFee\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(\\n        uint16 _dstChainId,\\n        uint16 _type,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit + _extraGas, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) {\\n            // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = _path;\\n        emit SetTrustedRemote(_remoteChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(\\n        uint16 _dstChainId,\\n        uint16 _packetType,\\n        uint _minGas\\n    ) external onlyOwner {\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n        require(_buf.length >= 4);\\n        uint _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.6\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft(),\\n            150,\\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\\n        );\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload,\\n        bytes memory _reason\\n    ) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/interfaces/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCore is IERC165 {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"./interfaces/IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\\n    using BytesLib for bytes;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint16 public constant PT_SEND = 0;\\n\\n    bool public useCustomAdapterParams;\\n\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = abi.encode(PT_SEND, _toAddress, _amount);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        uint16 packetType;\\n        assembly {\\n            packetType := mload(add(_payload, 32))\\n        }\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        uint amount = _debitFrom(_from, _dstChainId, _toAddress, _amount);\\n\\n        bytes memory lzPayload = abi.encode(PT_SEND, _toAddress, amount);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(\\n        uint16 _srcChainId,\\n        bytes memory,\\n        uint64,\\n        bytes memory _payload\\n    ) internal virtual {\\n        (, bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (uint16, bytes, uint));\\n\\n        address to = toAddressBytes.toAddress(0);\\n\\n        amount = _creditTo(_srcChainId, to, amount);\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _checkAdapterParams(\\n        uint16 _dstChainId,\\n        uint16 _pkType,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _debitFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n\\n    function _creditTo(\\n        uint16 _srcChainId,\\n        address _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the OFT standard\\n */\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./interfaces/IOFT.sol\\\";\\nimport \\\"./OFTCore.sol\\\";\\n\\n// override decimal() function is needed\\ncontract OFT is OFTCore, ERC20, IOFT {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint\\n    ) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(this);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return totalSupply();\\n    }\\n\\n    function _debitFrom(\\n        address _from,\\n        uint16,\\n        bytes memory,\\n        uint _amount\\n    ) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    function _creditTo(\\n        uint16,\\n        address _toAddress,\\n        uint _amount\\n    ) internal virtual override returns (uint) {\\n        _mint(_toAddress, _amount);\\n        return _amount;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/BentoUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\nimport {OFT} from \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFT.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Errors} from \\\"./utils/Errors.sol\\\";\\n\\ncontract BentoUSD is Ownable, OFT, Errors {\\n    address public bentoUSDVault;\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) OFT(_name, _symbol, _lzEndpoint) Ownable() {\\n        // Any additional initialization logic\\n    }\\n\\n    // TODO: for mainnet we will need to remove the minting right from owner.\\n    function mint(address _to, uint256 _amount) public {\\n        if (msg.sender != bentoUSDVault && msg.sender != owner()) {\\n            revert Unauthorized();\\n        }\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _from, uint256 _amount) public {\\n        if (msg.sender != bentoUSDVault && msg.sender != owner()) {\\n            revert Unauthorized();\\n        }\\n        _burn(_from, _amount);\\n    }\\n\\n    function setBentoUSDVault(address _bentoUSDVault) public onlyOwner {\\n        bentoUSDVault = _bentoUSDVault;\\n    }\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n    function convertToShares(uint256 _amount) external returns (uint256);\\n    function redeem(address _recipient, uint256 _amount) external;\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"contracts/interfaces/IStakedUSDe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\n/**\\n * @title Interface to interact with sUSDe (StakedUSDeV2)\\n */\\ninterface IStakedUSDe {\\n    // on which \\n    function cooldownAssets(uint256 assets) external returns (uint256 shares);\\n\\n    function cooldownShares(uint256 shares) external returns (uint256 assets);\\n    function unstake(address receiver) external;\\n   function setCooldownDuration(uint24 duration) external;\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"contracts/utils/EthenaWalletProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\nimport {IStakedUSDe} from \\\"../interfaces/IStakedUSDe.sol\\\";\\nimport {Errors} from \\\"./Errors.sol\\\";\\n// Since we cannot stake directly to Ethena from the staking vault, as then the unbonding period would be bound to one address, we use proxy to have separate unbonding periods for each user.\\n\\n/**\\n * @title EthenaWalletProxy\\n * @notice Since we cannot stake directly to Ethena from the staking vault, as then the unbonding period would be bound to one address, we use proxy to have separate unbonding periods for each user. We don't need to implement deposit here because we use batch deposit from the bentoUSDVault to Ethena.\\n */\\ncontract EthenaWalletProxy is Errors {\\n    /// @notice Address of the Ethena vault (sUSDe)\\n    /// @dev On Ethereum mainnet it is ssumed to be at address 0x9D39A5DE30e57443BfF2A8307A4256c8797A3497\\n    address public ethenaVault;\\n    address public bentoUSDVault;\\n    address public user;\\n\\n    /**\\n     * @notice Initializes the EthenaWalletProxy contract\\n     * @param _ethenaVault The address of the Ethena vault\\n     * @param _bentoUSDVault The address of the BentoUSD vault\\n     * @param _user The address of the user owning the proxy\\n     */\\n    constructor(address _ethenaVault, address _bentoUSDVault, address _user) {\\n        ethenaVault = _ethenaVault;\\n        bentoUSDVault = _bentoUSDVault;\\n        user = _user;\\n    }\\n    \\n    /**\\n     * @notice Commits a withdrawal by triggering the cooldown period\\n     * @dev Only callable by the BentoUSD vault\\n     * @param _amount The amount to withdraw\\n     */\\n    function commitWithdraw(uint256 _amount) external {\\n        if (msg.sender != bentoUSDVault) {\\n            revert Unauthorized();\\n        }\\n        // there is a mitmatch between Ethena onchain code (which has only one parameter) and github repo (which has 2 parameters) for cooldownShares\\n        IStakedUSDe(ethenaVault).cooldownShares(_amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws the staked assets to a recipient\\n     * @dev Only callable by the owner of the wallet proxy\\n     * @param _recipient The address to receive the unstaked assets\\n     */\\n    function withdraw(address _recipient) external {\\n        if (msg.sender != user) {\\n            revert Unauthorized();\\n        }\\n        IStakedUSDe(ethenaVault).unstake(_recipient);\\n    }\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/vault/EthenaWalletProxyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\n/**\\n * @title Generalized 4626 Strategy\\n * @notice Investment strategy for ERC-4626 Tokenized Vaults\\n */\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC4626 } from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport { EthenaWalletProxy } from \\\"../utils/EthenaWalletProxy.sol\\\";\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\ncontract EthenaWalletProxyManager is Errors {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => address) public userToEthenaWalletProxy;\\n\\n    /**\\n     * @dev commit to a withdrawal request in Ethena protocol, which triggers the unbonding period\\n     * @param _assetAmount Amount of asset to withdraw\\n     * @param _ethenaWalletProxy Address of the Ethena wallet proxy\\n     */\\n    function commitWithdraw(\\n        uint256 _assetAmount,\\n        address _ethenaWalletProxy\\n    ) internal virtual {\\n        if (_assetAmount == 0) {\\n            revert ZeroAmount();\\n        }\\n        // slither-disable-next-line unused-return\\n        EthenaWalletProxy(_ethenaWalletProxy).commitWithdraw(_assetAmount);\\n    }\\n    /** Function to withdraw from Ethena protocol after the unbonding period is over\\n     * @param _recipient Address to receive withdrawn asset\\n     */\\n    function withdrawFromEthena(address _recipient) external {\\n        address _ethenaWalletProxy = userToEthenaWalletProxy[msg.sender];\\n        EthenaWalletProxy(_ethenaWalletProxy).withdraw(_recipient);\\n    }\\n\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"contracts/vault/VaultDefinitions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\n// We put the definitions outside so they can be imported to different contracts (in this case VaultCore and VaultInspector)\\n    enum StrategyType {\\n        Generalized4626,\\n        Ethena,\\n        Other\\n    }\\n    struct AssetInfo {\\n        address ltToken;\\n        uint32 weight;\\n        uint8 decimals;\\n        uint8 index;\\n        StrategyType strategyType;\\n        address strategy;\\n        uint256 minimalAmountInVault;\\n    }\",\"versionPragma\":\"0.8.27\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\n/**\\n * @title BentoToken VaultStorage contract\\n * @notice This contract holds the state variables and mappings for asset management in the vault\\n * \\n * Author: Le Anh Dung, Bento Labs\\n */\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {AssetInfo, StrategyType} from \\\"./VaultDefinitions.sol\\\";\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\ncontract VaultStorage is Errors {\\n    using SafeERC20 for IERC20;\\n\\n\\n\\n    uint256 public totalWeight;\\n\\n    address public governor;\\n    address public bentoUSD;\\n    address public bentoUSDPlus;\\n    address public oracleRouter;\\n\\n    /// @dev Mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => AssetInfo) public assetToAssetInfo;\\n    /// @dev List of all assets supported by the vault.\\n    // slither-disable-next-line uninitialized-state\\n    address[] public allAssets;\\n\\n    function getAssetInfos() public view returns (AssetInfo[] memory) {\\n        AssetInfo[] memory _assets = new AssetInfo[](allAssets.length);\\n        uint256 allAssetsLength = allAssets.length;\\n        for (uint256 i; i < allAssetsLength; i++) {\\n            _assets[i] = assetToAssetInfo[allAssets[i]];\\n        }\\n        return _assets;\\n    }\\n\\n    function getAllAssets() public view returns (address[] memory) {\\n        return allAssets;\\n    }\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/vault/VaultAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\n/**\\n * @title bentoToken VaultAdmin contract\\n * @notice The VaultAdmin contract makes configuration and admin calls on the vault.\\n * @dev This contract is responsible for managing assets and configurations within the vault.\\n * It includes functions to set oracle routers, manage assets, and update weights.\\n * Only the governor can execute these functions.\\n * \\n * Author: Le Anh Dung\\n */\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IOracle} from \\\"../interfaces/IOracle.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./VaultStorage.sol\\\";\\nimport {AssetInfo, StrategyType} from \\\"./VaultDefinitions.sol\\\";\\n\\ncontract VaultAdmin is VaultStorage {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetAdded(address indexed asset, uint32 weight);\\n    event AssetRemoved(address indexed asset);\\n\\n    /***************************************\\n                 Configuration\\n    ****************************************/\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set address of price provider.\\n     * @param _oracleRouter Address of price provider\\n     */\\n    function setOracleRouter(address _oracleRouter) external onlyGovernor {\\n        oracleRouter = _oracleRouter;\\n    }\\n\\n    /**\\n     * @notice Set the address of BentoUSD.\\n     * @param _bentoUSD Address of BentoUSD\\n     */\\n    function setBentoUSD(address _bentoUSD) external onlyGovernor {\\n        bentoUSD = _bentoUSD;\\n    }\\n\\n    /**\\n     * @notice Set the address of BentoUSDPlus.\\n     * @param _bentoUSDPlus Address of BentoUSDPlus\\n     */\\n    function setBentoUSDPlus(address _bentoUSDPlus) external onlyGovernor {\\n        bentoUSDPlus = _bentoUSDPlus;\\n    }\\n\\n    /**\\n     * @notice Add a new asset to the vault.\\n     * @param _asset The address of the asset\\n     * @param _decimals The number of decimals of the asset\\n     * @param _weight The weight of the asset\\n     * @param _ltToken The address of the underlying token\\n     * @param _strategyType The type of the strategy\\n     * @param _strategy The address of the strategy\\n     * @param _minimalAmountInVault The minimal amount of the asset in the vault\\n     */\\n    function setAsset(\\n        address _asset,\\n        uint8 _decimals,\\n        uint32 _weight,\\n        address _ltToken,\\n        StrategyType _strategyType,\\n        address _strategy,\\n        uint256 _minimalAmountInVault\\n    ) external onlyGovernor {\\n        if (_asset == address(0) || _ltToken == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        // if the asset is not supported, add it to the list\\n        if (assetToAssetInfo[_asset].ltToken == address(0)) {\\n            allAssets.push(_asset);\\n            assetToAssetInfo[_asset].index = uint8(allAssets.length - 1);\\n        }\\n        // change the weight and also the total weight\\n        uint32 oldWeight = assetToAssetInfo[_asset].weight;\\n        _changeAssetWeight(_asset, oldWeight, _weight);\\n        \\n        AssetInfo storage asset = assetToAssetInfo[_asset];\\n        asset.ltToken = _ltToken;\\n        asset.weight = _weight;\\n        // this is the decimals of the underlying asset\\n        // we try to get the decimals from onchain source if possible\\n        try IERC20Metadata(_asset).decimals() returns (uint8 decimals_) {\\n            if (decimals_ != _decimals) {\\n                revert Inconsistency();\\n            }\\n            asset.decimals = decimals_;\\n        } catch {\\n            asset.decimals = _decimals;\\n        }\\n        asset.strategyType = _strategyType;\\n        if (_strategyType == StrategyType.Generalized4626 || _strategyType == StrategyType.Ethena) {\\n            if (_strategy != address(0)) {\\n                revert DefaultValueRequired();\\n            }\\n        } else {\\n            if (_strategy == address(0)) {\\n                revert Inconsistency();\\n            }\\n        }\\n        if (_strategyType != StrategyType.Other) {\\n            if (IERC4626(_ltToken).asset() != _asset) {\\n                revert Inconsistency();\\n            }\\n        }\\n        asset.minimalAmountInVault = _minimalAmountInVault;\\n\\n        emit AssetAdded(_asset, _weight);\\n    }\\n\\n    /**\\n     * @notice Remove an asset from the vault.\\n     * @param _asset The address of the asset\\n     */\\n    function removeAsset(address _asset) external onlyGovernor {\\n        if (assetToAssetInfo[_asset].ltToken == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _changeAssetWeight(_asset, assetToAssetInfo[_asset].weight, 0);\\n        uint256 allAssetsLength = allAssets.length;\\n        for (uint256 i; i < allAssetsLength; ++i) {\\n            if (allAssets[i] == _asset) {\\n                allAssets[i] = allAssets[allAssets.length - 1];\\n                // since we move the last element to the current position, we need to update the index of the new last element\\n                assetToAssetInfo[allAssets[i]].index = uint8(i);\\n                allAssets.pop();\\n                break;\\n            }\\n        }\\n        emit AssetRemoved(_asset);\\n    }\\n\\n    /**\\n     * @notice Change the weight of an asset and update the total weight of all assets.\\n     * @param _asset The address of the asset\\n     * @param _oldWeight The old weight of the asset\\n     * @param _newWeight The new weight of the asset\\n     */\\n    function _changeAssetWeight(\\n        address _asset,\\n        uint32 _oldWeight,\\n        uint32 _newWeight\\n    ) internal {\\n        totalWeight = totalWeight + _newWeight - _oldWeight;\\n        assetToAssetInfo[_asset].weight = _newWeight;\\n    }\\n}\\n\",\"versionPragma\":\"0.8.27\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.2\"}}}","address":"0x34A61F0333f672FA91906eEAF0edAaef738CA816","bytecode":"0x6080806040523460bd576000549060ff8260081c16606b575060ff808216036031575b604051612edb90816100c38239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386022565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80630248ddaa14611cf65780630329e33c14611b995780630c340a2414611b705780631522451914611533578063174f57af14611450578063266c91a5146114275780632acada4d1461135f5780633e55e5801461117b5780634a5e42b114610fa65780634d69ee0e14610f5c57806355a29e9114610f33578063578e5c2214610eef57806357e2850714610e5257806360938db514610dcc57806361f8991814610d82578063829c8db714610d5957806396c82e5714610d3b578063a158b3ae14610d1f578063a1b2439e14610ce1578063a594e81e14610cc6578063ab8bca0c14610c5b578063abaa9916146107d2578063b5c705b51461077a578063c4d66de81461062f578063c9339e9f146105f7578063caa648b4146105d4578063d45d8425146101945763e45d65df1461015157600080fd5b34610191576020366003190112610191576020906001600160a01b03610175611df4565b16815260088252604060018060a01b0391205416604051908152f35b80fd5b50346101915760e0366003190112610191576101ae611df4565b60243560ff8116908181036105d0576044359063ffffffff8216928383036105cc576064356001600160a01b03811692908390036105c8576084359160038310156105c45760a4356001600160a01b03811692908390036105c0576002546001600160a01b031633036105b2576001600160a01b03881697881580156105aa575b61059b57888a52600660205260408a20546001600160a01b0316156104eb575b50878952600660205261027a63ffffffff60408b205460a01c166102758960015461200f565b611fb8565b600155878952600660205260408920805463ffffffff60a01b191660a088901b63ffffffff60a01b16179055878952600660205260408920805463ffffffff60a01b1987166001600160c01b03199091161760a09790971b63ffffffff60a01b1696909617865560405163313ce56760e01b8152916020836004818c5afa8a93816104ba575b506104835750855460ff60c01b191660c09190911b60ff60c01b16178555505b61032982611e4a565b835460ff60d01b191660d083901b60ff60d01b1617845561034982611e4a565b81158015610470575b1561045457610445576002905b61036881611e4a565b036103a6575b507fa5018518746db5e7a6deddc5d2fb0297f409c5c2c0d24ef212302425b71dbd8091602091600260c435910155604051908152a280f35b6020600491604051928380926338d52e0f60e01b82525afa801561043a57849186916103f1575b506001600160a01b0316036103e2573861036e565b630d917f2f60e21b8452600484fd5b9150506020813d602011610432575b8161040d60209383611f32565b8101031261042e57516001600160a01b038116810361042e578390386103cd565b8480fd5b3d9150610400565b6040513d87823e3d90fd5b639952d2e960e01b8652600486fd5b156104615760029061035f565b630d917f2f60e21b8652600486fd5b5061047a82611e4a565b60018214610352565b905060ff8216036104ab57845460ff60c01b191660c09190911b60ff60c01b16178455610320565b630d917f2f60e21b8852600488fd5b6104dd91945060203d6020116104e4575b6104d58183611f32565b81019061203c565b9238610300565b503d6104cb565b6007546801000000000000000081101561058757906105138260016105379401600755611e6a565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b600754600019810190811161057357888a52600660205260408a20805460ff60c81b191660c89290921b60ff60c81b169190911790553861024f565b634e487b7160e01b8a52601160045260248afd5b634e487b7160e01b8b52604160045260248bfd5b63d92e233d60e01b8a5260048afd5b50851561022f565b6282b42960e81b8952600489fd5b8880fd5b8780fd5b8680fd5b8580fd5b8380fd5b503461019157806003193601126101915760206105ef6125ae565b604051908152f35b50346101915760203660031901126101915761062b61061760043561235d565b604051918291602083526020830190611e9b565b0390f35b503461019157602036600319011261019157610649611df4565b81549060ff8260081c16159182809361076d575b8015610756575b156106fa5760ff1981166001178455826106e9575b506001600160a01b031680156106da576001600160601b0360a01b60025416176002556106a35780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b63d92e233d60e01b8352600483fd5b61ffff191661010117835538610679565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156106645750600160ff821614610664565b50600160ff82161061065d565b503461019157602036600319011261019157610794611df4565b6002546001600160a01b031633036107c45760018060a01b03166001600160601b0360a01b600354161760035580f35b6282b42960e81b8252600482fd5b50346101915780600319360112610191576002546001600160a01b03163303610c4d57600754815b818110610805578280f35b61080e81611e6a565b90546040516370a0823160e01b8152306004820152929160031b1c6001600160a01b0316602083602481845afa92831561043a578593610c18575b5061085382611e6a565b60018060a01b0391549060031b1c168552600660205260408520856040519161087b83611f00565b60ff815460018060a01b038116855263ffffffff8160a01c166020860152818160c01c166040860152818160c81c16606086015260d01c169560808401966108c281611e4a565b875260018201546001600160a01b031660a0850190815260029092015460c0850181905290818110610c0957906108f891611fb8565b95805161090481611e4a565b61090d81611e4a565b15908115610beb575b5015610b5e575050516001600160a01b0316928573dac17f958d2ee523a2206206994597c13d831ec78314610b25575b5080158015610aae575b15610a4a5760405163095ea7b360e01b60208201526001600160a01b0385166024820152604480820183905281526109939061098d606482611f32565b836128a0565b604051636e553f6560e01b81526004810182905230602482015293602090859060449082908a905af1918215610a3f576001947f60a87e0712ebfb325304641a2056198edc17feb06aeac8f8a57a1087a859db8d93610a11575b505b604080516001600160a01b039290921682526020820192909252a15b016107fa565b610a319060203d8111610a38575b610a298183611f32565b810190611f6c565b50386109ed565b503d610a1f565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b50604051636eb1769f60e11b815230600482015260248101859052602081604481865afa908115610b1a578791610ae7575b5015610950565b905060203d8111610b13575b610afd8183611f32565b6020826000928101031261019157505138610ae0565b503d610af3565b6040513d89823e3d90fd5b610a4a57610b5860405163095ea7b360e01b6020820152856024820152600060448201526044815261098d606482611f32565b85610946565b519091506001600160a01b0316803b15610be75781809160246040518094819363b6b55f2560e01b83528a60048401525af18015610bdc57610bc7575b50506001927f60a87e0712ebfb325304641a2056198edc17feb06aeac8f8a57a1087a859db8d916109ef565b81610bd191611f32565b61042e578438610b9b565b6040513d84823e3d90fd5b5080fd5b6001915051610bf981611e4a565b610c0281611e4a565b1438610916565b50505050505060019150610a0b565b90925060203d8111610c46575b610c2f8183611f32565b602082600092810103126101915750519138610849565b503d610c25565b6282b42960e81b8152600490fd5b50346101915760c036600319011261019157610c75611df4565b50610c7e611e0a565b5060843567ffffffffffffffff8111610be757610c9f903690600401611ecf565b505060a43567ffffffffffffffff8111610be757610cc1903690600401611ecf565b505080f35b503461019157610cde610cd836611e20565b91612262565b80f35b503461019157602036600319011261019157610d15610d01600435612055565b604051928392604084526040840190611e9b565b9060208301520390f35b5034610191578060031936011261019157602060405160648152f35b50346101915780600319360112610191576020600154604051908152f35b50346101915780600319360112610191576003546040516001600160a01b039091168152602090f35b503461019157602036600319011261019157610d9c611df4565b6002546001600160a01b031633036107c45760018060a01b03166001600160601b0360a01b600454161760045580f35b50346101915760203660031901126101915780610de7611df4565b338252600860205260408220546001600160a01b031690813b15610e4e576040516351cff8d960e01b81526001600160a01b0390911660048201529082908290602490829084905af18015610bdc57610e3d5750f35b81610e4791611f32565b6101915780f35b5050fd5b50346101915760203660031901126101915760e0906040906001600160a01b03610e7a611df4565b16815260066020522080549060ff8260d01c1690600260018060a01b036001830154169101549160ff6040519460018060a01b038116865263ffffffff8160a01c166020870152818160c01c16604087015260c81c166060850152610ede81611e4a565b608084015260a083015260c0820152f35b50346101915760203660031901126101915760043590600754821015610191576020610f1a83611e6a565b905460405160039290921b1c6001600160a01b03168152f35b50346101915780600319360112610191576005546040516001600160a01b039091168152602090f35b503461019157602036600319011261019157610f76611df4565b6002546001600160a01b031633036107c45760018060a01b03166001600160601b0360a01b600554161760055580f35b503461019157602036600319011261019157610fc0611df4565b6002546001600160a01b031633036107c4576001600160a01b03908116808352600660205260408320549091161561116c57808252600660205261101363ffffffff604084205460a01c16600154611fb8565b600155808252600660205260408220805463ffffffff60a01b19169055600754825b818110611066575b50507f37803e2125c48ee96c38ddf04e826daf335b0e1603579040fd275aba6d06b6fc8280a280f35b8261107082611e6a565b905460039190911b1c6001600160a01b03161461108f57600101611035565b9050600754600019810190811161115857611111916110cd6110b260ff93611e6a565b905460039190911b1c6001600160a01b031661051383611e6a565b6110d681611e6a565b905460039190911b1c6001600160a01b03168552600660205260408520805460ff60c81b19169290911660c81b60ff60c81b16919091179055565b6007548015611144576000190161112781611e6a565b81549060018060a01b039060031b1b19169055600755388061103d565b634e487b7160e01b83526031600452602483fd5b634e487b7160e01b84526011600452602484fd5b63d92e233d60e01b8252600482fd5b503461019157806003193601126101915760075461119881611fc5565b906111a66040519283611f32565b808252601f196111b582611fc5565b01835b81811061131e575050825b818110611272578284604051918291602083016020845282518091526020604085019301915b8181106111f7575050500390f35b91935091602060e060019260c08751858060a01b03815116835263ffffffff85820151168584015260ff604082015116604084015260ff6060820151166060840152608081015161124781611e4a565b6080840152858060a01b0360a08201511660a0840152015160c08201520194019101918493926111e9565b8061127e600192611e6a565b838060a01b0391549060031b1c1685526006602052604085206002604051916112a683611f00565b60ff8154868060a01b038116855263ffffffff8160a01c166020860152818160c01c166040860152818160c81c16606086015260d01c166112e681611e4a565b6080840152848060a01b03858201541660a0840152015460c082015261130c8286611f7b565b526113178185611f7b565b50016111c3565b60209060405161132d81611f00565b86815286838201528660408201528660608201528660808201528660a08201528660c0820152828287010152016111b8565b503461019157806003193601126101915760405180602060075491828152018091600785527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890855b81811061140857505050826113be910383611f32565b604051928392602084019060208552518091526040840192915b8181106113e6575050500390f35b82516001600160a01b03168452859450602093840193909201916001016113d8565b82546001600160a01b03168452602090930192600192830192016113a8565b50346101915780600319360112610191576004546040516001600160a01b039091168152602090f35b50346101915780600319360112610191578061146a6125ae565b6003546040516370a0823160e01b81523060048201526001600160a01b0390911691602082602481865afa9182156115285784926114eb575b50906114ae91611fb8565b90803b15610e4e576040516340c10f1960e01b8152336004820152602481019290925282908290604490829084905af18015610bdc57610e3d5750f35b915092506020813d602011611520575b8161150860209383611f32565b8101031261151b575183926114ae6114a3565b600080fd5b3d91506114fb565b6040513d86823e3d90fd5b50346101915760403660031901126101915761154d611df4565b600754600354602435929084906001600160a01b0316803b15610be757604051632770a7eb60e21b8152336004820152602481018690529082908290604490829084905af18015610bdc57611b5b575b5050835b8281106115ac578480f35b6115b581611e6a565b905460039190911b1c6001600160a01b031680865260066020526040808720905192916115e184611f00565b81549360018060a01b0385168152602081019463ffffffff8160a01c168652602460ff6040840192818160c01c168452818160c81c16606086015260d01c1696608084019761162f81611e4a565b885260018601546001600160a01b0390811660a0860190815260029097015460c08601526005546040516315d5220f60e31b8152600481018890529360209285928391165afa918215611b50578c92611b1b575b50670de0b6b3a76400008210611b0b575b63ffffffff90511690670de0b6b3a7640000820291808304670de0b6b3a76400001490151715611af7579160ff6116dd8c6116e6948f966116d790600154611f8f565b9161281c565b9151169061284f565b95604051946370a0823160e01b8652306004870152602086602481885afa8015611aec5789968491611aac575b508881106117335750505050509261172d916001946127de565b016115a1565b919450929661174492969550611fb8565b945182516001600160a01b03909116929061175e81611e4a565b61176781611e4a565b6117cc575050606460209293946040519586938492632d182be560e21b845260048401523360248401523060448401525af1918215610a3f576001926117ae575b5061172d565b6117c59060203d8111610a3857610a298183611f32565b50386117a8565b600190959395516117dc81611e4a565b6117e581611e4a565b036119e05750338852600860205260408820549192506001600160a01b0390911690811561195a575b604051926363737ac960e11b84526004840152602083602481845afa92831561191a578893611925575b5060405163a9059cbb60e01b81526001600160a01b03831660048201526024810184905290602090829060449082908c905af1801561191a576118ee575b5081156118df5786916001600160a01b0390911690813b156118db578291602483926040519485938492634b77556360e01b845260048401525af18015610bdc576118c6575b505060019061172d565b816118d091611f32565b61042e5784386118bc565b8280fd5b631f2a200560e01b8752600487fd5b61190e9060203d8111611913575b6119068183611f32565b810190611f54565b611876565b503d6118fc565b6040513d8a823e3d90fd5b90925060203d8111611953575b61193c8183611f32565b602082600092810103126101915750519138611838565b503d611932565b905060405161034b8082019082821067ffffffffffffffff8311176119cc576060918391612b5b833984815230602082015233604082015203019088f08015610b1a5733885260086020526040882080546001600160a01b0319166001600160a01b039290921691821790559061180e565b634e487b7160e01b8a52604160045260248afd5b516040516363737ac960e11b815260048101939093526001600160a01b03169060208360248187865af1928315611528578493611a70575b508282611a24926127de565b803b156118db576040516301e9a69560e41b81526001600160a01b0386166004820152602481019290925282908290604490829084905af18015610bdc576118c657505060019061172d565b919350915060203d8111611aa5575b611a898183611f32565b6020826000928101031261019157505187929091611a24611a18565b503d611a7f565b929495965050915060203d8111611ae5575b611ac88183611f32565b602082600092810103126101915750918a91889594935138611713565b503d611abe565b6040513d85823e3d90fd5b634e487b7160e01b8c52601160045260248cfd5b670de0b6b3a76400009150611694565b90915060203d8111611b49575b611b328183611f32565b602082600092810103126101915750519038611683565b503d611b28565b6040513d8e823e3d90fd5b81611b6591611f32565b6105d057833861159d565b50346101915780600319360112610191576002546040516001600160a01b039091168152602090f35b503461019157604036600319011261019157611bb3611df4565b6024359082611bc18361235d565b9260018060a01b036003541690813b156118db57604051632770a7eb60e21b8152336004820152602481019190915291908290604490829084905af1801561152857611ce2575b5060075491835b838110611c1a578480f35b611c2381611e6a565b90546001600160a01b0360039290921b1c811686526006602090815260408088205490516370a0823160e01b81523060048201529216919081602481855afa908115610b1a578791611caf575b50611c7b8385611f7b565b5111611ca05790611c9a60019285611c938487611f7b565b51916127de565b01611c0f565b631e9acf1760e31b8652600486fd5b905060203d8111611cdb575b611cc58183611f32565b6020826000928101031261019157505138611c70565b503d611cbb565b83611cef91949294611f32565b9138611c08565b503461019157611d57611d14611d0b36611e20565b81939130612262565b6003546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018590529094602092869216908290889082906044820190565b03925af191821561152857611dab93602093611dd9575b5060048054604051636e553f6560e01b8152918201929092526001600160a01b039283166024820152938492909116908290869082906044820190565b03925af18015610bdc57611dbd575080f35b611dd59060203d602011610a3857610a298183611f32565b5080f35b611def90843d8611611913576119068183611f32565b611d6e565b600435906001600160a01b038216820361151b57565b602435906001600160a01b038216820361151b57565b606090600319011261151b576004356001600160a01b038116810361151b57906024359060443590565b60031115611e5457565b634e487b7160e01b600052602160045260246000fd5b600754811015611e8557600760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b906020808351928381520192019060005b818110611eb95750505090565b8251845260209384019390920191600101611eac565b9181601f8401121561151b5782359167ffffffffffffffff831161151b576020808501948460051b01011161151b57565b60e0810190811067ffffffffffffffff821117611f1c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611f1c57604052565b9081602091031261151b5751801515810361151b5790565b9081602091031261151b575190565b8051821015611e855760209160051b010190565b81810292918115918404141715611fa257565b634e487b7160e01b600052601160045260246000fd5b91908203918211611fa257565b67ffffffffffffffff8111611f1c5760051b60200190565b90611fe782611fc5565b611ff46040519182611f32565b8281528092612005601f1991611fc5565b0190602036910137565b91908201809211611fa257565b8115612026570490565b634e487b7160e01b600052601260045260246000fd5b9081602091031261151b575160ff8116810361151b5790565b9060075461206281611fdd565b61206b82611fdd565b9160008060018060a01b03600554165b8382106121785750506000956000935b83851061209b5750505050509190565b90919293966120dd906120c1856120bc6120b58c87611f7b565b5187611f8f565b61201c565b6120cb8a89611f7b565b526120d68988611f7b565b519061200f565b966120e88187611f7b565b5190600460206120f783611e6a565b905460405163313ce56760e01b81529384929091839160031b1c6001600160a01b03165afa801561216c576001936121379260009261214c575b5061284f565b6121418289611f7b565b52019392919061208b565b61216591925060203d81116104e4576104d58183611f32565b9038612131565b6040513d6000823e3d90fd5b909293969161218684611e6a565b90546040516315d5220f60e31b815260039290921b1c6001600160a01b031660048201819052602082602481875afa91821561216c5760009261222d575b50916121fd82600194670de0b6b3a764000061221295921161221d575b600052600660205263ffffffff60406000205460a01c16611f8f565b612207878c611f7b565b526120d6868b611f7b565b92979493019061207b565b670de0b6b3a764000091506121e1565b90916020823d821161225a575b8161224760209383611f32565b81010312610191575051906121fd6121c4565b3d915061223a565b9061226c90612055565b919092600754600094855b8281106122f85750505082106122e9576003546001600160a01b031690813b156105d0576040516340c10f1960e01b81526001600160a01b03919091166004820152602481019290925282908290604490829084905af18015610bdc576122dc575050565b816122e691611f32565b50565b63428637bb60e11b8352600483fd5b80612357612307600193611e6a565b848060a01b0391549060031b1c1661231f8386611f7b565b5190604051916323b872dd60e01b6020840152336024840152306044840152606483015260648252612352608483611f32565b6128a0565b01612277565b6007549061236a82611fdd565b6005546001549193916000916001600160a01b0316825b8481106123915750505050505090565b61239a81611e6a565b60018060a01b0391549060031b1c168060005260066020526040600020906124378563ffffffff604051946123ce86611f00565b600281549160018060a01b038316885260ff6020890193858160a01c168552818160c01c1660408b0152818160c81c1660608b015260d01c1661241081611e4a565b608089015260018101546001600160a01b031660a0890152015460c087015251168a61281c565b906040516315d5220f60e31b8152816004820152602081602481895afa90811561216c5760009161257d575b50670de0b6b3a7640000811061256e575b61248990670de0b6b3a76400006000946129c5565b918761255a575060206004916040519283809263313ce56760e01b82525afa801561216c576020926124c292600092612542575061284f565b91516040516363737ac960e11b81526004810193909352829060249082906001600160a01b03165afa90811561216c57600091612510575b5090600191612509828a611f7b565b5201612381565b906020823d821161253a575b8161252960209383611f32565b8101031261019157505160016124fa565b3d915061251c565b612165919250843d81116104e4576104d58183611f32565b634e487b7160e01b81526021600452602490fd5b50670de0b6b3a7640000612474565b906020823d82116125a6575b8161259660209383611f32565b8101031261019157505138612463565b3d9150612589565b60075460055460009182918291906001600160a01b03165b8184106125d4575050505090565b909192936125e185611e6a565b90546040516370a0823160e01b815230600482015260039290921b1c6001600160a01b03169190602081602481865afa90811561216c576000916127ad575b5082600052600660205260018060a01b03604060002054166040516370a0823160e01b8152306004820152602081602481855afa801561216c5760009061277b575b602091506024604051809481936303d1689d60e11b835260048301525afa90811561216c57600091612748575b506126999161200f565b91604051906315d5220f60e31b82526004820152602081602481875afa90811561216c57600091612717575b50670de0b6b3a76400008111612708575b670de0b6b3a76400006126eb916000946129c5565b918561255a57506001916126fe9161200f565b94019291906125c6565b50670de0b6b3a76400006126d6565b906020823d8211612740575b8161273060209383611f32565b81010312610191575051386126c5565b3d9150612723565b906020823d8211612773575b8161276160209383611f32565b8101031261019157505161269961268f565b3d9150612754565b6020823d82116127a5575b8161279360209383611f32565b81010312610191575060209051612662565b3d9150612786565b906020823d82116127d6575b816127c660209383611f32565b8101031261019157505138612620565b3d91506127b9565b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261281a91612352606483611f32565b565b9061282792916129c5565b90565b9060ff8091169116039060ff8211611fa257565b60ff16604d8111611fa257600a0a90565b9060ff81168060121060001461287d57509061287761287260126128279461282a565b61283e565b90611f8f565b601211612888575090565b9061289a61287261282793601261282a565b9061201c565b60018060a01b03166040916000808451926128bb8685611f32565b602084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602085015260208151910182865af13d156129b8573d9067ffffffffffffffff8211611f1c578451612931949092612922601f8201601f191660200185611f32565b83523d6000602085013e612a8a565b805190811591821561299e575b5050156129485750565b5162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6129b19250602080918301019101611f54565b388061293e565b9161293192606091612a8a565b916000198284099282810292838086109503948086039514612a7d5784831115612a405782910960018219018216809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505090612827925061201c565b91929015612aec5750815115612a9e575090565b3b15612aa75790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612aff5750805190602001fd5b6040519062461bcd60e51b8252602060048301528181519182602483015260005b838110612b425750508160006044809484010152601f80199101168101030190fd5b60208282018101516044878401015285935001612b2056fe60803460a357601f61034b38819003918201601f19168301916001600160401b0383118484101760a85780849260609460405283398101031260a35760428160be565b906057604060516020840160be565b920160be565b600080546001600160a01b039485166001600160a01b03199182161790915560018054938516938216939093179092556002805491909316911617905560405161027990816100d28239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820360a35756fe608080604052600436101561001357600080fd5b600090813560e01c9081634b77556314610180575080634f8632ba1461015757806351cff8d9146100aa578063cc31b256146100835763fc84bcaf1461005857600080fd5b346100805780600319360112610080576001546040516001600160a01b039091168152602090f35b80fd5b5034610080578060031936011261008057546040516001600160a01b039091168152602090f35b5034610080576020366003190112610080576004356001600160a01b03811690819003610153576002546001600160a01b0316330361014557815482916001600160a01b0390911690813b1561014157829160248392604051958693849263f2888dbb60e01b845260048401525af18015610134576101265780f35b61012f9161020b565b388180f35b50604051903d90823e3d90fd5b5050fd5b6282b42960e81b8252600482fd5b5080fd5b50346100805780600319360112610080576002546040516001600160a01b039091168152602090f35b905034610153576020366003190112610153576001546001600160a01b03163303610145576020816024818560018060a01b03815416639343d9e160e01b835260043560048401525af18015610200576101d8575080f35b602090813d83116101f9575b6101ee818361020b565b810103126100805780f35b503d6101e4565b6040513d84823e3d90fd5b90601f8019910116810190811067ffffffffffffffff82111761022d57604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c697223aff50ac068c9f55df96ff93fbcd7eb603afdc55f6f64c0eac16290abd64736f6c634300081b0033a2646970667358221220e905cfed7c32b1abcdbcfae1f2254f2e423a850671feb2b9dace5e719b2b29a764736f6c634300081b0033","deployedBytecode":"0x6080604052600436101561001257600080fd5b6000803560e01c80630248ddaa14611cf65780630329e33c14611b995780630c340a2414611b705780631522451914611533578063174f57af14611450578063266c91a5146114275780632acada4d1461135f5780633e55e5801461117b5780634a5e42b114610fa65780634d69ee0e14610f5c57806355a29e9114610f33578063578e5c2214610eef57806357e2850714610e5257806360938db514610dcc57806361f8991814610d82578063829c8db714610d5957806396c82e5714610d3b578063a158b3ae14610d1f578063a1b2439e14610ce1578063a594e81e14610cc6578063ab8bca0c14610c5b578063abaa9916146107d2578063b5c705b51461077a578063c4d66de81461062f578063c9339e9f146105f7578063caa648b4146105d4578063d45d8425146101945763e45d65df1461015157600080fd5b34610191576020366003190112610191576020906001600160a01b03610175611df4565b16815260088252604060018060a01b0391205416604051908152f35b80fd5b50346101915760e0366003190112610191576101ae611df4565b60243560ff8116908181036105d0576044359063ffffffff8216928383036105cc576064356001600160a01b03811692908390036105c8576084359160038310156105c45760a4356001600160a01b03811692908390036105c0576002546001600160a01b031633036105b2576001600160a01b03881697881580156105aa575b61059b57888a52600660205260408a20546001600160a01b0316156104eb575b50878952600660205261027a63ffffffff60408b205460a01c166102758960015461200f565b611fb8565b600155878952600660205260408920805463ffffffff60a01b191660a088901b63ffffffff60a01b16179055878952600660205260408920805463ffffffff60a01b1987166001600160c01b03199091161760a09790971b63ffffffff60a01b1696909617865560405163313ce56760e01b8152916020836004818c5afa8a93816104ba575b506104835750855460ff60c01b191660c09190911b60ff60c01b16178555505b61032982611e4a565b835460ff60d01b191660d083901b60ff60d01b1617845561034982611e4a565b81158015610470575b1561045457610445576002905b61036881611e4a565b036103a6575b507fa5018518746db5e7a6deddc5d2fb0297f409c5c2c0d24ef212302425b71dbd8091602091600260c435910155604051908152a280f35b6020600491604051928380926338d52e0f60e01b82525afa801561043a57849186916103f1575b506001600160a01b0316036103e2573861036e565b630d917f2f60e21b8452600484fd5b9150506020813d602011610432575b8161040d60209383611f32565b8101031261042e57516001600160a01b038116810361042e578390386103cd565b8480fd5b3d9150610400565b6040513d87823e3d90fd5b639952d2e960e01b8652600486fd5b156104615760029061035f565b630d917f2f60e21b8652600486fd5b5061047a82611e4a565b60018214610352565b905060ff8216036104ab57845460ff60c01b191660c09190911b60ff60c01b16178455610320565b630d917f2f60e21b8852600488fd5b6104dd91945060203d6020116104e4575b6104d58183611f32565b81019061203c565b9238610300565b503d6104cb565b6007546801000000000000000081101561058757906105138260016105379401600755611e6a565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b600754600019810190811161057357888a52600660205260408a20805460ff60c81b191660c89290921b60ff60c81b169190911790553861024f565b634e487b7160e01b8a52601160045260248afd5b634e487b7160e01b8b52604160045260248bfd5b63d92e233d60e01b8a5260048afd5b50851561022f565b6282b42960e81b8952600489fd5b8880fd5b8780fd5b8680fd5b8580fd5b8380fd5b503461019157806003193601126101915760206105ef6125ae565b604051908152f35b50346101915760203660031901126101915761062b61061760043561235d565b604051918291602083526020830190611e9b565b0390f35b503461019157602036600319011261019157610649611df4565b81549060ff8260081c16159182809361076d575b8015610756575b156106fa5760ff1981166001178455826106e9575b506001600160a01b031680156106da576001600160601b0360a01b60025416176002556106a35780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b63d92e233d60e01b8352600483fd5b61ffff191661010117835538610679565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156106645750600160ff821614610664565b50600160ff82161061065d565b503461019157602036600319011261019157610794611df4565b6002546001600160a01b031633036107c45760018060a01b03166001600160601b0360a01b600354161760035580f35b6282b42960e81b8252600482fd5b50346101915780600319360112610191576002546001600160a01b03163303610c4d57600754815b818110610805578280f35b61080e81611e6a565b90546040516370a0823160e01b8152306004820152929160031b1c6001600160a01b0316602083602481845afa92831561043a578593610c18575b5061085382611e6a565b60018060a01b0391549060031b1c168552600660205260408520856040519161087b83611f00565b60ff815460018060a01b038116855263ffffffff8160a01c166020860152818160c01c166040860152818160c81c16606086015260d01c169560808401966108c281611e4a565b875260018201546001600160a01b031660a0850190815260029092015460c0850181905290818110610c0957906108f891611fb8565b95805161090481611e4a565b61090d81611e4a565b15908115610beb575b5015610b5e575050516001600160a01b0316928573dac17f958d2ee523a2206206994597c13d831ec78314610b25575b5080158015610aae575b15610a4a5760405163095ea7b360e01b60208201526001600160a01b0385166024820152604480820183905281526109939061098d606482611f32565b836128a0565b604051636e553f6560e01b81526004810182905230602482015293602090859060449082908a905af1918215610a3f576001947f60a87e0712ebfb325304641a2056198edc17feb06aeac8f8a57a1087a859db8d93610a11575b505b604080516001600160a01b039290921682526020820192909252a15b016107fa565b610a319060203d8111610a38575b610a298183611f32565b810190611f6c565b50386109ed565b503d610a1f565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b50604051636eb1769f60e11b815230600482015260248101859052602081604481865afa908115610b1a578791610ae7575b5015610950565b905060203d8111610b13575b610afd8183611f32565b6020826000928101031261019157505138610ae0565b503d610af3565b6040513d89823e3d90fd5b610a4a57610b5860405163095ea7b360e01b6020820152856024820152600060448201526044815261098d606482611f32565b85610946565b519091506001600160a01b0316803b15610be75781809160246040518094819363b6b55f2560e01b83528a60048401525af18015610bdc57610bc7575b50506001927f60a87e0712ebfb325304641a2056198edc17feb06aeac8f8a57a1087a859db8d916109ef565b81610bd191611f32565b61042e578438610b9b565b6040513d84823e3d90fd5b5080fd5b6001915051610bf981611e4a565b610c0281611e4a565b1438610916565b50505050505060019150610a0b565b90925060203d8111610c46575b610c2f8183611f32565b602082600092810103126101915750519138610849565b503d610c25565b6282b42960e81b8152600490fd5b50346101915760c036600319011261019157610c75611df4565b50610c7e611e0a565b5060843567ffffffffffffffff8111610be757610c9f903690600401611ecf565b505060a43567ffffffffffffffff8111610be757610cc1903690600401611ecf565b505080f35b503461019157610cde610cd836611e20565b91612262565b80f35b503461019157602036600319011261019157610d15610d01600435612055565b604051928392604084526040840190611e9b565b9060208301520390f35b5034610191578060031936011261019157602060405160648152f35b50346101915780600319360112610191576020600154604051908152f35b50346101915780600319360112610191576003546040516001600160a01b039091168152602090f35b503461019157602036600319011261019157610d9c611df4565b6002546001600160a01b031633036107c45760018060a01b03166001600160601b0360a01b600454161760045580f35b50346101915760203660031901126101915780610de7611df4565b338252600860205260408220546001600160a01b031690813b15610e4e576040516351cff8d960e01b81526001600160a01b0390911660048201529082908290602490829084905af18015610bdc57610e3d5750f35b81610e4791611f32565b6101915780f35b5050fd5b50346101915760203660031901126101915760e0906040906001600160a01b03610e7a611df4565b16815260066020522080549060ff8260d01c1690600260018060a01b036001830154169101549160ff6040519460018060a01b038116865263ffffffff8160a01c166020870152818160c01c16604087015260c81c166060850152610ede81611e4a565b608084015260a083015260c0820152f35b50346101915760203660031901126101915760043590600754821015610191576020610f1a83611e6a565b905460405160039290921b1c6001600160a01b03168152f35b50346101915780600319360112610191576005546040516001600160a01b039091168152602090f35b503461019157602036600319011261019157610f76611df4565b6002546001600160a01b031633036107c45760018060a01b03166001600160601b0360a01b600554161760055580f35b503461019157602036600319011261019157610fc0611df4565b6002546001600160a01b031633036107c4576001600160a01b03908116808352600660205260408320549091161561116c57808252600660205261101363ffffffff604084205460a01c16600154611fb8565b600155808252600660205260408220805463ffffffff60a01b19169055600754825b818110611066575b50507f37803e2125c48ee96c38ddf04e826daf335b0e1603579040fd275aba6d06b6fc8280a280f35b8261107082611e6a565b905460039190911b1c6001600160a01b03161461108f57600101611035565b9050600754600019810190811161115857611111916110cd6110b260ff93611e6a565b905460039190911b1c6001600160a01b031661051383611e6a565b6110d681611e6a565b905460039190911b1c6001600160a01b03168552600660205260408520805460ff60c81b19169290911660c81b60ff60c81b16919091179055565b6007548015611144576000190161112781611e6a565b81549060018060a01b039060031b1b19169055600755388061103d565b634e487b7160e01b83526031600452602483fd5b634e487b7160e01b84526011600452602484fd5b63d92e233d60e01b8252600482fd5b503461019157806003193601126101915760075461119881611fc5565b906111a66040519283611f32565b808252601f196111b582611fc5565b01835b81811061131e575050825b818110611272578284604051918291602083016020845282518091526020604085019301915b8181106111f7575050500390f35b91935091602060e060019260c08751858060a01b03815116835263ffffffff85820151168584015260ff604082015116604084015260ff6060820151166060840152608081015161124781611e4a565b6080840152858060a01b0360a08201511660a0840152015160c08201520194019101918493926111e9565b8061127e600192611e6a565b838060a01b0391549060031b1c1685526006602052604085206002604051916112a683611f00565b60ff8154868060a01b038116855263ffffffff8160a01c166020860152818160c01c166040860152818160c81c16606086015260d01c166112e681611e4a565b6080840152848060a01b03858201541660a0840152015460c082015261130c8286611f7b565b526113178185611f7b565b50016111c3565b60209060405161132d81611f00565b86815286838201528660408201528660608201528660808201528660a08201528660c0820152828287010152016111b8565b503461019157806003193601126101915760405180602060075491828152018091600785527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890855b81811061140857505050826113be910383611f32565b604051928392602084019060208552518091526040840192915b8181106113e6575050500390f35b82516001600160a01b03168452859450602093840193909201916001016113d8565b82546001600160a01b03168452602090930192600192830192016113a8565b50346101915780600319360112610191576004546040516001600160a01b039091168152602090f35b50346101915780600319360112610191578061146a6125ae565b6003546040516370a0823160e01b81523060048201526001600160a01b0390911691602082602481865afa9182156115285784926114eb575b50906114ae91611fb8565b90803b15610e4e576040516340c10f1960e01b8152336004820152602481019290925282908290604490829084905af18015610bdc57610e3d5750f35b915092506020813d602011611520575b8161150860209383611f32565b8101031261151b575183926114ae6114a3565b600080fd5b3d91506114fb565b6040513d86823e3d90fd5b50346101915760403660031901126101915761154d611df4565b600754600354602435929084906001600160a01b0316803b15610be757604051632770a7eb60e21b8152336004820152602481018690529082908290604490829084905af18015610bdc57611b5b575b5050835b8281106115ac578480f35b6115b581611e6a565b905460039190911b1c6001600160a01b031680865260066020526040808720905192916115e184611f00565b81549360018060a01b0385168152602081019463ffffffff8160a01c168652602460ff6040840192818160c01c168452818160c81c16606086015260d01c1696608084019761162f81611e4a565b885260018601546001600160a01b0390811660a0860190815260029097015460c08601526005546040516315d5220f60e31b8152600481018890529360209285928391165afa918215611b50578c92611b1b575b50670de0b6b3a76400008210611b0b575b63ffffffff90511690670de0b6b3a7640000820291808304670de0b6b3a76400001490151715611af7579160ff6116dd8c6116e6948f966116d790600154611f8f565b9161281c565b9151169061284f565b95604051946370a0823160e01b8652306004870152602086602481885afa8015611aec5789968491611aac575b508881106117335750505050509261172d916001946127de565b016115a1565b919450929661174492969550611fb8565b945182516001600160a01b03909116929061175e81611e4a565b61176781611e4a565b6117cc575050606460209293946040519586938492632d182be560e21b845260048401523360248401523060448401525af1918215610a3f576001926117ae575b5061172d565b6117c59060203d8111610a3857610a298183611f32565b50386117a8565b600190959395516117dc81611e4a565b6117e581611e4a565b036119e05750338852600860205260408820549192506001600160a01b0390911690811561195a575b604051926363737ac960e11b84526004840152602083602481845afa92831561191a578893611925575b5060405163a9059cbb60e01b81526001600160a01b03831660048201526024810184905290602090829060449082908c905af1801561191a576118ee575b5081156118df5786916001600160a01b0390911690813b156118db578291602483926040519485938492634b77556360e01b845260048401525af18015610bdc576118c6575b505060019061172d565b816118d091611f32565b61042e5784386118bc565b8280fd5b631f2a200560e01b8752600487fd5b61190e9060203d8111611913575b6119068183611f32565b810190611f54565b611876565b503d6118fc565b6040513d8a823e3d90fd5b90925060203d8111611953575b61193c8183611f32565b602082600092810103126101915750519138611838565b503d611932565b905060405161034b8082019082821067ffffffffffffffff8311176119cc576060918391612b5b833984815230602082015233604082015203019088f08015610b1a5733885260086020526040882080546001600160a01b0319166001600160a01b039290921691821790559061180e565b634e487b7160e01b8a52604160045260248afd5b516040516363737ac960e11b815260048101939093526001600160a01b03169060208360248187865af1928315611528578493611a70575b508282611a24926127de565b803b156118db576040516301e9a69560e41b81526001600160a01b0386166004820152602481019290925282908290604490829084905af18015610bdc576118c657505060019061172d565b919350915060203d8111611aa5575b611a898183611f32565b6020826000928101031261019157505187929091611a24611a18565b503d611a7f565b929495965050915060203d8111611ae5575b611ac88183611f32565b602082600092810103126101915750918a91889594935138611713565b503d611abe565b6040513d85823e3d90fd5b634e487b7160e01b8c52601160045260248cfd5b670de0b6b3a76400009150611694565b90915060203d8111611b49575b611b328183611f32565b602082600092810103126101915750519038611683565b503d611b28565b6040513d8e823e3d90fd5b81611b6591611f32565b6105d057833861159d565b50346101915780600319360112610191576002546040516001600160a01b039091168152602090f35b503461019157604036600319011261019157611bb3611df4565b6024359082611bc18361235d565b9260018060a01b036003541690813b156118db57604051632770a7eb60e21b8152336004820152602481019190915291908290604490829084905af1801561152857611ce2575b5060075491835b838110611c1a578480f35b611c2381611e6a565b90546001600160a01b0360039290921b1c811686526006602090815260408088205490516370a0823160e01b81523060048201529216919081602481855afa908115610b1a578791611caf575b50611c7b8385611f7b565b5111611ca05790611c9a60019285611c938487611f7b565b51916127de565b01611c0f565b631e9acf1760e31b8652600486fd5b905060203d8111611cdb575b611cc58183611f32565b6020826000928101031261019157505138611c70565b503d611cbb565b83611cef91949294611f32565b9138611c08565b503461019157611d57611d14611d0b36611e20565b81939130612262565b6003546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018590529094602092869216908290889082906044820190565b03925af191821561152857611dab93602093611dd9575b5060048054604051636e553f6560e01b8152918201929092526001600160a01b039283166024820152938492909116908290869082906044820190565b03925af18015610bdc57611dbd575080f35b611dd59060203d602011610a3857610a298183611f32565b5080f35b611def90843d8611611913576119068183611f32565b611d6e565b600435906001600160a01b038216820361151b57565b602435906001600160a01b038216820361151b57565b606090600319011261151b576004356001600160a01b038116810361151b57906024359060443590565b60031115611e5457565b634e487b7160e01b600052602160045260246000fd5b600754811015611e8557600760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b906020808351928381520192019060005b818110611eb95750505090565b8251845260209384019390920191600101611eac565b9181601f8401121561151b5782359167ffffffffffffffff831161151b576020808501948460051b01011161151b57565b60e0810190811067ffffffffffffffff821117611f1c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611f1c57604052565b9081602091031261151b5751801515810361151b5790565b9081602091031261151b575190565b8051821015611e855760209160051b010190565b81810292918115918404141715611fa257565b634e487b7160e01b600052601160045260246000fd5b91908203918211611fa257565b67ffffffffffffffff8111611f1c5760051b60200190565b90611fe782611fc5565b611ff46040519182611f32565b8281528092612005601f1991611fc5565b0190602036910137565b91908201809211611fa257565b8115612026570490565b634e487b7160e01b600052601260045260246000fd5b9081602091031261151b575160ff8116810361151b5790565b9060075461206281611fdd565b61206b82611fdd565b9160008060018060a01b03600554165b8382106121785750506000956000935b83851061209b5750505050509190565b90919293966120dd906120c1856120bc6120b58c87611f7b565b5187611f8f565b61201c565b6120cb8a89611f7b565b526120d68988611f7b565b519061200f565b966120e88187611f7b565b5190600460206120f783611e6a565b905460405163313ce56760e01b81529384929091839160031b1c6001600160a01b03165afa801561216c576001936121379260009261214c575b5061284f565b6121418289611f7b565b52019392919061208b565b61216591925060203d81116104e4576104d58183611f32565b9038612131565b6040513d6000823e3d90fd5b909293969161218684611e6a565b90546040516315d5220f60e31b815260039290921b1c6001600160a01b031660048201819052602082602481875afa91821561216c5760009261222d575b50916121fd82600194670de0b6b3a764000061221295921161221d575b600052600660205263ffffffff60406000205460a01c16611f8f565b612207878c611f7b565b526120d6868b611f7b565b92979493019061207b565b670de0b6b3a764000091506121e1565b90916020823d821161225a575b8161224760209383611f32565b81010312610191575051906121fd6121c4565b3d915061223a565b9061226c90612055565b919092600754600094855b8281106122f85750505082106122e9576003546001600160a01b031690813b156105d0576040516340c10f1960e01b81526001600160a01b03919091166004820152602481019290925282908290604490829084905af18015610bdc576122dc575050565b816122e691611f32565b50565b63428637bb60e11b8352600483fd5b80612357612307600193611e6a565b848060a01b0391549060031b1c1661231f8386611f7b565b5190604051916323b872dd60e01b6020840152336024840152306044840152606483015260648252612352608483611f32565b6128a0565b01612277565b6007549061236a82611fdd565b6005546001549193916000916001600160a01b0316825b8481106123915750505050505090565b61239a81611e6a565b60018060a01b0391549060031b1c168060005260066020526040600020906124378563ffffffff604051946123ce86611f00565b600281549160018060a01b038316885260ff6020890193858160a01c168552818160c01c1660408b0152818160c81c1660608b015260d01c1661241081611e4a565b608089015260018101546001600160a01b031660a0890152015460c087015251168a61281c565b906040516315d5220f60e31b8152816004820152602081602481895afa90811561216c5760009161257d575b50670de0b6b3a7640000811061256e575b61248990670de0b6b3a76400006000946129c5565b918761255a575060206004916040519283809263313ce56760e01b82525afa801561216c576020926124c292600092612542575061284f565b91516040516363737ac960e11b81526004810193909352829060249082906001600160a01b03165afa90811561216c57600091612510575b5090600191612509828a611f7b565b5201612381565b906020823d821161253a575b8161252960209383611f32565b8101031261019157505160016124fa565b3d915061251c565b612165919250843d81116104e4576104d58183611f32565b634e487b7160e01b81526021600452602490fd5b50670de0b6b3a7640000612474565b906020823d82116125a6575b8161259660209383611f32565b8101031261019157505138612463565b3d9150612589565b60075460055460009182918291906001600160a01b03165b8184106125d4575050505090565b909192936125e185611e6a565b90546040516370a0823160e01b815230600482015260039290921b1c6001600160a01b03169190602081602481865afa90811561216c576000916127ad575b5082600052600660205260018060a01b03604060002054166040516370a0823160e01b8152306004820152602081602481855afa801561216c5760009061277b575b602091506024604051809481936303d1689d60e11b835260048301525afa90811561216c57600091612748575b506126999161200f565b91604051906315d5220f60e31b82526004820152602081602481875afa90811561216c57600091612717575b50670de0b6b3a76400008111612708575b670de0b6b3a76400006126eb916000946129c5565b918561255a57506001916126fe9161200f565b94019291906125c6565b50670de0b6b3a76400006126d6565b906020823d8211612740575b8161273060209383611f32565b81010312610191575051386126c5565b3d9150612723565b906020823d8211612773575b8161276160209383611f32565b8101031261019157505161269961268f565b3d9150612754565b6020823d82116127a5575b8161279360209383611f32565b81010312610191575060209051612662565b3d9150612786565b906020823d82116127d6575b816127c660209383611f32565b8101031261019157505138612620565b3d91506127b9565b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261281a91612352606483611f32565b565b9061282792916129c5565b90565b9060ff8091169116039060ff8211611fa257565b60ff16604d8111611fa257600a0a90565b9060ff81168060121060001461287d57509061287761287260126128279461282a565b61283e565b90611f8f565b601211612888575090565b9061289a61287261282793601261282a565b9061201c565b60018060a01b03166040916000808451926128bb8685611f32565b602084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602085015260208151910182865af13d156129b8573d9067ffffffffffffffff8211611f1c578451612931949092612922601f8201601f191660200185611f32565b83523d6000602085013e612a8a565b805190811591821561299e575b5050156129485750565b5162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6129b19250602080918301019101611f54565b388061293e565b9161293192606091612a8a565b916000198284099282810292838086109503948086039514612a7d5784831115612a405782910960018219018216809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b505090612827925061201c565b91929015612aec5750815115612a9e575090565b3b15612aa75790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612aff5750805190602001fd5b6040519062461bcd60e51b8252602060048301528181519182602483015260005b838110612b425750508160006044809484010152601f80199101168101030190fd5b60208282018101516044878401015285935001612b2056fe60803460a357601f61034b38819003918201601f19168301916001600160401b0383118484101760a85780849260609460405283398101031260a35760428160be565b906057604060516020840160be565b920160be565b600080546001600160a01b039485166001600160a01b03199182161790915560018054938516938216939093179092556002805491909316911617905560405161027990816100d28239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820360a35756fe608080604052600436101561001357600080fd5b600090813560e01c9081634b77556314610180575080634f8632ba1461015757806351cff8d9146100aa578063cc31b256146100835763fc84bcaf1461005857600080fd5b346100805780600319360112610080576001546040516001600160a01b039091168152602090f35b80fd5b5034610080578060031936011261008057546040516001600160a01b039091168152602090f35b5034610080576020366003190112610080576004356001600160a01b03811690819003610153576002546001600160a01b0316330361014557815482916001600160a01b0390911690813b1561014157829160248392604051958693849263f2888dbb60e01b845260048401525af18015610134576101265780f35b61012f9161020b565b388180f35b50604051903d90823e3d90fd5b5050fd5b6282b42960e81b8252600482fd5b5080fd5b50346100805780600319360112610080576002546040516001600160a01b039091168152602090f35b905034610153576020366003190112610153576001546001600160a01b03163303610145576020816024818560018060a01b03815416639343d9e160e01b835260043560048401525af18015610200576101d8575080f35b602090813d83116101f9575b6101ee818361020b565b810103126100805780f35b503d6101e4565b6040513d84823e3d90fd5b90601f8019910116810190811067ffffffffffffffff82111761022d57604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c697223aff50ac068c9f55df96ff93fbcd7eb603afdc55f6f64c0eac16290abd64736f6c634300081b0033a2646970667358221220e905cfed7c32b1abcdbcfae1f2254f2e423a850671feb2b9dace5e719b2b29a764736f6c634300081b0033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"DefaultValueRequired","type":"error"},{"inputs":[],"name":"Inconsistency","type":"error"},{"inputs":[],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"NotSupported","type":"error"},{"inputs":[],"name":"SlippageTooHigh","type":"error"},{"inputs":[],"name":"StalePrice","type":"error"},{"inputs":[{"internalType":"string","name":"reason","type":"string"}],"name":"SwapFailed","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"inputs":[],"name":"ZeroAmount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint32","name":"weight","type":"uint32"}],"name":"AssetAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AssetAllocated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"}],"name":"AssetRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"inputAsset","type":"address"},{"indexed":false,"internalType":"address","name":"outputAsset","type":"address"},{"indexed":false,"internalType":"address","name":"router","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allAssets","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allocate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"assetToAssetInfo","outputs":[{"internalType":"address","name":"ltToken","type":"address"},{"internalType":"uint32","name":"weight","type":"uint32"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"enum StrategyType","name":"strategyType","type":"uint8"},{"internalType":"address","name":"strategy","type":"address"},{"internalType":"uint256","name":"minimalAmountInVault","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoUSD","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoUSDPlus","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deviationTolerance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllAssets","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAssetInfos","outputs":[{"components":[{"internalType":"address","name":"ltToken","type":"address"},{"internalType":"uint32","name":"weight","type":"uint32"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"enum StrategyType","name":"strategyType","type":"uint8"},{"internalType":"address","name":"strategy","type":"address"},{"internalType":"uint256","name":"minimalAmountInVault","type":"uint256"}],"internalType":"struct AssetInfo[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"desiredAmount","type":"uint256"}],"name":"getDepositAssetAmounts","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"inputAmount","type":"uint256"}],"name":"getOutputLTAmounts","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"governor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_governor","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_minimumBentoUSDAmount","type":"uint256"}],"name":"mintBasket","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"mintReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_minimumBentoUSDAmount","type":"uint256"}],"name":"mintWithBasketAndStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_minimumBentoUSDAmount","type":"uint256"},{"internalType":"address[]","name":"_routers","type":"address[]"},{"internalType":"bytes[]","name":"_routerData","type":"bytes[]"}],"name":"mintWithOneToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"oracleRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"redeemLTBasket","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"redeemUnderlyingBasket","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"}],"name":"removeAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"uint32","name":"_weight","type":"uint32"},{"internalType":"address","name":"_ltToken","type":"address"},{"internalType":"enum StrategyType","name":"_strategyType","type":"uint8"},{"internalType":"address","name":"_strategy","type":"address"},{"internalType":"uint256","name":"_minimalAmountInVault","type":"uint256"}],"name":"setAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_bentoUSD","type":"address"}],"name":"setBentoUSD","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_bentoUSDPlus","type":"address"}],"name":"setBentoUSDPlus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracleRouter","type":"address"}],"name":"setOracleRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalWeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userToEthenaWalletProxy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"}],"name":"withdrawFromEthena","outputs":[],"stateMutability":"nonpayable","type":"function"}]}