{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.27\"},\"sources\":{\"contracts/vault/VaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {StableMath} from \\\"../utils/StableMath.sol\\\";\\nimport {IOracle} from \\\"../interfaces/IOracle.sol\\\";\\nimport {VaultAdmin} from \\\"./VaultAdmin.sol\\\";\\nimport {BentoUSD} from \\\"../BentoUSD.sol\\\";\\nimport {IStrategy} from \\\"../interfaces/IStrategy.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title VaultCore\\n * @notice Core vault implementation for BentoUSD stablecoin system\\n * @dev Handles minting, redeeming, and asset allocation operations\\n */\\ncontract VaultCore is Initializable, VaultAdmin {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n    uint256 public constant deviationTolerance = 1; // in percentage\\n\\n    event SwapResult(\\n        address inputAsset,\\n        address outputAsset,\\n        address router,\\n        uint256 amount\\n    );\\n\\n    event AssetAllocated(\\n        address asset,\\n        address strategy,\\n        uint256 amount\\n    );\\n\\n    error SwapFailed(string reason);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // === External Functions ===\\n    \\n    function initialize(address _governor) public initializer {\\n        require(_governor != address(0), \\\"Governor cannot be zero address\\\");\\n        governor = _governor;\\n    }\\n\\n    /**\\n     * @notice Mints BentoUSD tokens in exchange for a single supported asset\\n     * @param _asset Address of the input asset\\n     * @param _amount Amount of input asset to deposit\\n     * @param _minimumBentoUSDAmount Minimum acceptable BentoUSD output\\n     * @param _routers Array of DEX router addresses for swaps\\n     * @param _routerData Encoded swap data for each router\\n     */\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumBentoUSDAmount,\\n        address[] calldata _routers,\\n        bytes[] calldata _routerData\\n    ) external {\\n        _mint(_asset, _amount, _minimumBentoUSDAmount, _routers, _routerData);\\n    }\\n\\n    /**\\n     * @notice Mints BentoUSD by depositing a proportional basket of all supported assets\\n     * @param _amount Total USD value to deposit\\n     * @param _minimumBentoUSDAmount Minimum acceptable BentoUSD output\\n     */\\n    function mintBasket(\\n        uint256 _amount,\\n        uint256 _minimumBentoUSDAmount\\n    ) external {\\n        (uint256[] memory amounts, uint256 totalAmount) = getDepositAssetAmounts(_amount);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            address assetAddress = allAssets[i];\\n            IERC20(assetAddress).safeTransferFrom(msg.sender, address(this), amounts[i]);\\n        }\\n        require(\\n            totalAmount > _minimumBentoUSDAmount,\\n            string(\\n                abi.encodePacked(\\n            \\\"VaultCore: price deviation too high. Total value: \\\",\\n            Strings.toString(totalAmount),\\n            \\\", Minimum required: \\\",\\n                    Strings.toString(_minimumBentoUSDAmount)\\n                )\\n            )\\n        );\\n        BentoUSD(bentoUSD).mint(msg.sender, totalAmount);\\n    }\\n\\n    /**\\n     * @notice Redeems BentoUSD for liquid staking tokens of supported assets\\n     * @param _amount Amount of BentoUSD to redeem\\n     */\\n    function redeemLTBasket(uint256 _amount) external {\\n        uint256[] memory ltAmounts = getOutputLTAmounts(_amount);\\n        require(IERC20(bentoUSD).balanceOf(msg.sender) >= _amount, \\\"VaultCore: insufficient BentoUSD in user's wallet\\\");\\n        BentoUSD(bentoUSD).burn(msg.sender, _amount);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            address assetAddress = allAssets[i];\\n            address ltToken = assets[assetAddress].ltToken;\\n            require(IERC20(ltToken).balanceOf(address(this)) >= ltAmounts[i], \\\"VaultCore: insufficient LT tokens in vault\\\");\\n            IERC20(ltToken).safeTransfer(msg.sender, ltAmounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allocates excess assets in the vault to yield-generating strategies\\n     * @dev Can only be called by the governor\\n     */\\n    function allocate() external onlyGovernor {\\n        _allocate();\\n    }\\n\\n    // === Public View Functions ===\\n\\n    /**\\n     * @notice Calculates the required amounts of each asset for a proportional deposit\\n     * @param desiredAmount Total USD value to be deposited\\n     * @return Array of asset amounts and total USD value\\n     */\\n    function getDepositAssetAmounts(uint256 desiredAmount) public view returns (uint256[] memory, uint256) {\\n        uint256 numberOfAssets = allAssets.length;\\n        uint256[] memory relativeWeights = new uint256[](numberOfAssets);\\n        uint256[] memory amounts = new uint256[](numberOfAssets);\\n        uint256 totalRelativeWeight = 0;\\n        for (uint256 i = 0; i < numberOfAssets; i++) {\\n            address assetAddress = allAssets[i];\\n\\n            uint256 assetPrice = IOracle(oracleRouter).price(assetAddress);\\n            if (assetPrice > 1e18) {\\n                assetPrice = 1e18;\\n            }\\n            relativeWeights[i] = assets[assetAddress].weight * assetPrice;\\n            totalRelativeWeight += relativeWeights[i];\\n        }\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < numberOfAssets; i++) {\\n            // we round it upwards to avoid rounding errors detrimental for the protocol\\n            amounts[i] = (desiredAmount * relativeWeights[i]) / totalRelativeWeight;\\n            totalAmount += amounts[i];\\n            amounts[i] = normalizeDecimals(IERC20Metadata(allAssets[i]).decimals(), amounts[i]);\\n        }\\n        return (amounts, totalAmount);\\n    }\\n\\n    function getOutputLTAmounts(uint256 inputAmount) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](allAssets.length);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            address asset = allAssets[i];\\n            address ltToken = assets[asset].ltToken;\\n            uint256 partialInputAmount = (inputAmount * assets[asset].weight) / totalWeight;\\n            uint256 assetPrice = IOracle(oracleRouter).price(asset);\\n            if (assetPrice < 1e18) {\\n                assetPrice = 1e18;\\n            }\\n            uint256 partialInputAmountAfterPrice = normalizeDecimals(assets[asset].decimals, partialInputAmount * 1e18 / assetPrice);\\n            amounts[i] = IERC4626(ltToken).convertToShares(partialInputAmountAfterPrice);\\n        }\\n        return amounts;\\n    }\\n\\n    // === Internal Functions ===\\n\\n    function _mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumBentoUSDAmount,\\n        address[] calldata _routers,\\n        bytes[] calldata _routerData\\n    ) internal virtual {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            _routerData.length == allAssets.length,\\n            \\\"Invalid router data length\\\"\\n        );\\n\\n        // store total weight into a memory variable to save gas\\n        uint256 _totalWeight = totalWeight;\\n        uint256 _allAssetsLength = allAssets.length;\\n\\n        // store the total value of the basket\\n        uint256 totalValueOfBasket = 0;\\n        uint256 allAssetsLength = allAssets.length;\\n        // we iterate through all assets\\n        for (uint256 i = 0; i < allAssetsLength; i++) {\\n            address assetAddress = allAssets[i];\\n            // we only trade into assets that are not the asset we are depositing\\n            if (assetAddress != _asset) {\\n                Asset memory asset = assets[assetAddress];\\n                // get the balance of the asset before the trade\\n                uint256 balanceBefore = IERC20(assetAddress).balanceOf(\\n                    address(this)\\n                );\\n                // get asset price from oracle\\n                uint256 assetPrice = IOracle(oracleRouter).price(assetAddress);\\n                if (assetPrice > 1e18) {\\n                    assetPrice = 1e18;\\n                }\\n                _swap(_routers[i], _routerData[i]);\\n                // get the balance of the asset after the trade\\n                uint256 balanceAfter = IERC20(assetAddress).balanceOf(\\n                    address(this)\\n                );\\n                // get the amount of asset that is not in the balance after the trade\\n                uint256 outputAmount = balanceAfter - balanceBefore;\\n                emit SwapResult(\\n                    _asset,\\n                    assetAddress,\\n                    _routers[i],\\n                    outputAmount\\n                );\\n                uint256 expectedOutputAmount = (_amount * asset.weight) /\\n                    _totalWeight;\\n                uint256 deviation = (expectedOutputAmount > outputAmount)\\n                    ? expectedOutputAmount - outputAmount\\n                    : outputAmount - expectedOutputAmount;\\n                uint256 deviationPercentage = (deviation * 100) /\\n                    expectedOutputAmount;\\n                require(\\n                    deviationPercentage < deviationTolerance,\\n                    \\\"VaultCore: deviation from desired weights too high\\\"\\n                );\\n                totalValueOfBasket += (outputAmount * assetPrice) / 1e18;\\n            } else {\\n                uint256 assetPrice = IOracle(oracleRouter).price(assetAddress);\\n                totalValueOfBasket += (_amount * assetPrice) / 1e18;\\n            }\\n        }\\n\\n        require(\\n            totalValueOfBasket > _minimumBentoUSDAmount,\\n            string(\\n                abi.encodePacked(\\n                    \\\"VaultCore: price deviation too high. Total value: \\\",\\n                    Strings.toString(totalValueOfBasket),\\n                    \\\", Minimum required: \\\",\\n                    Strings.toString(_minimumBentoUSDAmount)\\n                )\\n            )\\n        );\\n        BentoUSD(bentoUSD).mint(msg.sender, totalValueOfBasket);\\n    }\\n\\n    function _swap(address _router, bytes calldata _routerData) internal {\\n        (bool success, bytes memory _data) = _router.call(_routerData);\\n        if (!success) {\\n            if (_data.length > 0) revert SwapFailed(string(_data));\\n            else revert SwapFailed(\\\"Unknown reason\\\");\\n        }\\n    }\\n\\n    function _redeemUnderlyingBasket(uint256 _amount) internal {\\n        uint256 allAssetsLength = allAssets.length;\\n        for (uint256 i = 0; i < allAssetsLength; i++) {\\n            address assetAddress = allAssets[i];\\n            uint256 assetPrice = IOracle(oracleRouter).price(assetAddress);\\n            if (assetPrice < 1e18) {\\n                assetPrice = 1e18;\\n            }\\n            uint256 amountToRedeem = (_amount *\\n                assets[assetAddress].weight *\\n                assetPrice) / (totalWeight * 1e18);\\n            IERC20(assetAddress).safeTransfer(msg.sender, amountToRedeem);\\n        }\\n        BentoUSD(bentoUSD).burn(msg.sender, _amount);\\n    }\\n\\n    function _redeemWithWaitingPeriod(uint256 _amount) internal {\\n        revert(\\\"VaultCore: redeemWithWaitingPeriod is not implemented\\\");\\n    }\\n\\n    function _allocate() internal virtual {\\n        uint256 allAssetsLength = allAssets.length;\\n        for (uint256 i = 0; i < allAssetsLength; ++i) {\\n            IERC20 asset = IERC20(allAssets[i]);\\n            uint256 assetBalance = asset.balanceOf(address(this));\\n            uint256 minimalAmount = minimalAmountInVault[address(asset)];\\n            if (assetBalance < minimalAmount) continue;\\n            // Multiply the balance by the vault buffer modifier and truncate\\n            // to the scale of the asset decimals\\n            uint256 allocateAmount = assetBalance - minimalAmount;\\n\\n            address depositStrategyAddr = assetToStrategy[address(asset)];\\n\\n            if (depositStrategyAddr != address(0) && allocateAmount > 0) {\\n                IStrategy strategy = IStrategy(depositStrategyAddr);\\n                // Transfer asset to Strategy and call deposit method to\\n                // mint or take required action\\n                asset.safeTransfer(address(strategy), allocateAmount);\\n                strategy.deposit(allocateAmount);\\n                emit AssetAllocated(\\n                    address(asset),\\n                    depositStrategyAddr,\\n                    allocateAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    // === Internal Pure Functions ===\\n\\n    function normalizeDecimals(uint8 assetDecimals, uint256 amount) internal pure returns (uint256) {\\n        if (assetDecimals < 18) {\\n            return amount / 10 ** (18 - assetDecimals);\\n        } else if (assetDecimals > 18) {\\n            return amount * 10 ** (assetDecimals - 18);\\n        }\\n        return amount;\\n    }\\n\\n    function getTotalValue() public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            address asset = allAssets[i];\\n            // Get direct asset balance\\n            uint256 balance = IERC20(asset).balanceOf(address(this));\\n            \\n            // Get LT token balance and convert to underlying\\n            address ltToken = assets[asset].ltToken;\\n            uint256 ltBalance = IERC20(ltToken).balanceOf(address(this));\\n            uint256 underlyingBalance = IERC4626(ltToken).convertToAssets(ltBalance);\\n            \\n            // Get total balance (direct + underlying from LT)\\n            uint256 totalBalance = balance + underlyingBalance;\\n            \\n            // Multiply by price to get USD value\\n            uint256 assetPrice = IOracle(oracleRouter).price(asset);\\n            totalValue += (totalBalance * assetPrice) / 1e18;\\n        }\\n        return totalValue;\\n    }\\n\\n    function getTokenToShareRatios() public view returns (uint256[] memory) {\\n        uint256 allAssetsLength = allAssets.length;\\n        uint256[] memory ratios = new uint256[](allAssetsLength);\\n        for (uint256 i = 0; i < allAssetsLength; i++) {\\n            address tokenAddress = allAssets[i];\\n            address ltToken = assets[allAssets[i]].ltToken;\\n            uint256 unit = 10 ** IERC20Metadata(tokenAddress).decimals();\\n            ratios[i] = IERC4626(ltToken).convertToShares(unit);\\n        }\\n        return ratios;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x * (10 ** (to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x / (10 ** (from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x * (y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z / scale;\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x * y;\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled + (FULL_SCALE - 1);\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil / FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x * FULL_SCALE;\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z / y;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title BentoToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Le Anh Dung, Bento Labs\\n */\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract VaultStorage {\\n    using SafeERC20 for IERC20;\\n\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        bool isSupported;\\n        uint8 decimals;\\n        uint32 weight;\\n        address ltToken;\\n    }\\n\\n    uint256 public totalWeight;\\n\\n    address public governor;\\n    address public bentoUSD;\\n    address public oracleRouter;\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) public assets;\\n    /// @dev list of all assets supported by the vault.\\n    // slither-disable-next-line uninitialized-state\\n    address[] public allAssets;\\n\\n    mapping(address => address) public ltTokenToAsset;\\n    /// @dev amount of asset we want to keep in the vault to cover for fast redemption\\n    mapping(address => uint256) public minimalAmountInVault;\\n\\n    mapping(address => address) public assetToStrategy;\\n\\n    function getWeights() public view returns (uint32[] memory) {\\n        uint32[] memory weights = new uint32[](allAssets.length);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            weights[i] = assets[allAssets[i]].weight;\\n        }\\n        return weights;\\n    }\\n\\n    function getAssets() public view returns (Asset[] memory) {\\n        Asset[] memory _assets = new Asset[](allAssets.length);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            _assets[i] = assets[allAssets[i]];\\n        }\\n        return _assets;\\n    }\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/vault/VaultAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title bentoToken VaultAdmin contract\\n * @notice The VaultAdmin contract makes configuration and admin calls on the vault.\\n * @author Le Anh Dung\\n */\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {StableMath} from \\\"../utils/StableMath.sol\\\";\\n\\nimport {IOracle} from \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"./VaultStorage.sol\\\";\\n\\ncontract VaultAdmin is VaultStorage {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n\\n    event AssetAdded(address indexed asset, uint8 decimals, uint32 weight);\\n    event AssetRemoved(address indexed asset);\\n    event AssetChanged(address indexed asset, uint8 decimals, uint32 weight);\\n    event OracleRouterUpdated(address indexed oracleRouter);\\n    event BentoUSDUpdated(address indexed bentoUSD);\\n    event GovernorUpdated(address indexed governor);\\n    event AssetWeightChanged(\\n        address indexed asset,\\n        uint32 oldWeight,\\n        uint32 newWeight\\n    );\\n\\n    /***************************************\\n                 Configuration\\n    ****************************************/\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"Only governor can call this function\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set address of price provider.\\n     * @param _oracleRouter Address of price provider\\n     */\\n    function setOracleRouter(address _oracleRouter) external onlyGovernor {\\n        oracleRouter = _oracleRouter;\\n        emit OracleRouterUpdated(_oracleRouter);\\n    }\\n\\n    function setBentoUSD(address _bentoUSD) external onlyGovernor {\\n        bentoUSD = _bentoUSD;\\n        emit BentoUSDUpdated(_bentoUSD);\\n    }\\n    /* setAsset is used to add a new asset to the vault.\\n     *  _asset: the address of the asset\\n     *  _decimals: the number of decimals of the asset\\n     *  _weight: the weight of the asset\\n     */\\n    function setAsset(\\n        address _asset,\\n        uint8 _decimals,\\n        uint32 _weight,\\n        address _ltToken\\n    ) external onlyGovernor {\\n        require(!assets[_asset].isSupported, \\\"Asset is already supported\\\");\\n        _changeAssetWeight(_asset, 0, _weight);\\n        assets[_asset].isSupported = true;\\n        assets[_asset].decimals = _decimals;\\n        assets[_asset].ltToken = _ltToken;\\n        allAssets.push(_asset);\\n        emit AssetAdded(_asset, _decimals, _weight);\\n    }\\n\\n    /* removeAsset is used to remove an asset from the vault.\\n     *  _asset: the address of the asset\\n     */\\n    function removeAsset(address _asset) external onlyGovernor {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        _changeAssetWeight(_asset, assets[_asset].weight, 0);\\n        assets[_asset].isSupported = false;\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            if (allAssets[i] == _asset) {\\n                allAssets[i] = allAssets[allAssets.length - 1];\\n                allAssets.pop();\\n                break;\\n            }\\n        }\\n        emit AssetRemoved(_asset);\\n    }\\n\\n    /* changeAsset is used to change the weight of an asset in the vault.\\n     *  _asset: the address of the asset\\n     *  _decimals: the new number of decimals of the asset\\n     *  _weight: the new weight of the asset\\n     */\\n    function changeAsset(\\n        address _asset,\\n        uint8 _decimals,\\n        uint32 _weight,\\n        address _ltToken\\n    ) external onlyGovernor {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        _changeAssetWeight(_asset, assets[_asset].weight, _weight);\\n        assets[_asset].decimals = _decimals;\\n        assets[_asset].ltToken = _ltToken;\\n        emit AssetChanged(_asset, _decimals, _weight);\\n    }\\n\\n    /* _changeAssetWeight is used to change the weight of an asset and also the totalWeight of all assets.\\n     *  _asset: the address of the asset\\n     *  _oldWeight: the old weight of the asset\\n     *  _newWeight: the new weight of the asset\\n     */\\n    function _changeAssetWeight(\\n        address _asset,\\n        uint32 _oldWeight,\\n        uint32 _newWeight\\n    ) internal {\\n        totalWeight = totalWeight + _newWeight - _oldWeight;\\n        assets[_asset].weight = _newWeight;\\n        emit AssetWeightChanged(_asset, _oldWeight, _newWeight);\\n    }\\n\\n    function setMinimalAmountInVault(address _asset, uint256 _amount) external onlyGovernor {\\n        minimalAmountInVault[_asset] = _amount;\\n    }\\n\\n    function setStrategy(address _asset, address _strategy) external onlyGovernor {\\n        assetToStrategy[_asset] = _strategy;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint _start,\\n        uint _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"versionPragma\":\">=0.8.0 <0.9.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(\\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\\n            \\\"LzApp: invalid source sending contract\\\"\\n        );\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint _nativeFee\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(\\n        uint16 _dstChainId,\\n        uint16 _type,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit + _extraGas, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) {\\n            // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = _path;\\n        emit SetTrustedRemote(_remoteChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(\\n        uint16 _dstChainId,\\n        uint16 _packetType,\\n        uint _minGas\\n    ) external onlyOwner {\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n        require(_buf.length >= 4);\\n        uint _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.6\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft(),\\n            150,\\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\\n        );\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload,\\n        bytes memory _reason\\n    ) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/interfaces/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCore is IERC165 {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"./interfaces/IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\\n    using BytesLib for bytes;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint16 public constant PT_SEND = 0;\\n\\n    bool public useCustomAdapterParams;\\n\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = abi.encode(PT_SEND, _toAddress, _amount);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        uint16 packetType;\\n        assembly {\\n            packetType := mload(add(_payload, 32))\\n        }\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        uint amount = _debitFrom(_from, _dstChainId, _toAddress, _amount);\\n\\n        bytes memory lzPayload = abi.encode(PT_SEND, _toAddress, amount);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(\\n        uint16 _srcChainId,\\n        bytes memory,\\n        uint64,\\n        bytes memory _payload\\n    ) internal virtual {\\n        (, bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (uint16, bytes, uint));\\n\\n        address to = toAddressBytes.toAddress(0);\\n\\n        amount = _creditTo(_srcChainId, to, amount);\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _checkAdapterParams(\\n        uint16 _dstChainId,\\n        uint16 _pkType,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _debitFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n\\n    function _creditTo(\\n        uint16 _srcChainId,\\n        address _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the OFT standard\\n */\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./interfaces/IOFT.sol\\\";\\nimport \\\"./OFTCore.sol\\\";\\n\\n// override decimal() function is needed\\ncontract OFT is OFTCore, ERC20, IOFT {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint\\n    ) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(this);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return totalSupply();\\n    }\\n\\n    function _debitFrom(\\n        address _from,\\n        uint16,\\n        bytes memory,\\n        uint _amount\\n    ) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    function _creditTo(\\n        uint16,\\n        address _toAddress,\\n        uint _amount\\n    ) internal virtual override returns (uint) {\\n        _mint(_toAddress, _amount);\\n        return _amount;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/BentoUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {OFT} from \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFT.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BentoUSD is Ownable, OFT {\\n    address public bentoUSDVault;\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) OFT(_name, _symbol, _lzEndpoint) Ownable() {\\n        // Any additional initialization logic\\n    }\\n\\n    function mint(address _to, uint256 _amount) public {\\n        require(msg.sender == bentoUSDVault || msg.sender == owner(), \\\"BentoUSD: only bentoUSDVault or owner can mint\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _from, uint256 _amount) public {\\n        require(msg.sender == bentoUSDVault || msg.sender == owner(), \\\"BentoUSD: only bentoUSDVault or owner can burn\\\");\\n        _burn(_from, _amount);\\n    }\\n\\n    function setBentoUSDVault(address _bentoUSDVault) public onlyOwner {\\n        bentoUSDVault = _bentoUSDVault;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.22\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.2\"}}}","address":"0xEd3407bF7ba7ebD6c1aFb23F69FEa71268A6A511","bytecode":"0x60806040523461002757610011610037565b61001961002c565b61519e610267823961519e90f35b610032565b60405190565b600080fd5b61003f6101da565b565b60081c90565b60ff1690565b61005961005e91610041565b610047565b90565b61006b905461004d565b90565b151590565b60209181520190565b60207f616c697a696e6700000000000000000000000000000000000000000000000000917f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201520152565b6100d76027604092610073565b6100e08161007c565b0190565b6100fa90602081019060008183039101526100ca565b90565b1561010457565b61010c61002c565b62461bcd60e51b815280610122600482016100e4565b0390fd5b60001c90565b60ff1690565b61013e61014391610126565b61012c565b90565b6101509054610132565b90565b60ff1690565b60001b90565b9061016b60ff91610159565b9181191691161790565b90565b61018c61018761019192610153565b610175565b610153565b90565b90565b906101ac6101a76101b392610178565b610194565b825461015f565b9055565b6101c090610153565b9052565b91906101d8906000602085019401906101b7565b565b6101f56101f06101ea6000610061565b1561006e565b6100fd565b6101ff6000610146565b61021261020c60ff610153565b91610153565b0361021a575b565b61022660ff6000610197565b60ff61025e7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161025561002c565b918291826101c4565b0390a161021856fe60a06040526004361015610013575b6110e5565b61001e6000356101dd565b80630a789ece146101d85780630b5580a4146101d35780630c340a24146101ce57806315e6bc99146101c957806322acb867146101c45780632fd34f5f146101bf5780634a3e6544146101ba5780634a5e42b1146101b55780634a7fe890146101b05780634d69ee0e146101ab57806355a29e91146101a6578063578e5c22146101a157806367e4ac2c1461019c57806372cb5d9714610197578063829c8db71461019257806396c82e571461018d578063a158b3ae14610188578063a1b2439e14610183578063abaa99161461017e578063aee3fee714610179578063b0ce3dfa14610174578063b5c705b51461016f578063b658e9f81461016a578063bca678e014610165578063c4d66de814610160578063c9339e9f1461015b578063caa648b4146101565763f11b81880361000e576110ac565b610f08565b610ed3565b610ea0565b610e6b565b610e05565b610da4565b610d6d565b610d36565b610c74565b610c3e565b610be2565b610b76565b610ae5565b610aa1565b610a3e565b6108f9565b610849565b610806565b6107d1565b6106fd565b6106c8565b610674565b610528565b61044a565b6103e7565b610394565b610313565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61020c906101f8565b90565b61021881610203565b0361021f57565b600080fd5b905035906102318261020f565b565b9060208282031261024d5761024a91600001610224565b90565b6101ee565b90565b61026961026461026e926101f8565b610252565b6101f8565b90565b61027a90610255565b90565b61028690610271565b90565b906102939061027d565b600052602052604060002090565b1c90565b60018060a01b031690565b6102c09060086102c593026102a1565b6102a5565b90565b906102d391546102b0565b90565b6102ed906102e8600791600092610289565b6102c8565b90565b6102f990610203565b9052565b9190610311906000602085019401906102f0565b565b346103435761033f61032e610329366004610233565b6102d6565b6103366101e3565b918291826102fd565b0390f35b6101e9565b90565b61035481610348565b0361035b57565b600080fd5b9050359061036d8261034b565b565b906020828203126103895761038691600001610360565b90565b6101ee565b60000190565b346103c2576103ac6103a736600461036f565b6113de565b6103b46101e3565b806103be8161038e565b0390f35b6101e9565b60009103126103d257565b6101ee565b6103e460026000906102c8565b90565b34610417576103f73660046103c7565b6104136104026103d7565b61040a6101e3565b918291826102fd565b0390f35b6101e9565b919060408382031261044557806104396104429260008601610360565b93602001610360565b90565b6101ee565b346104795761046361045d36600461041c565b9061181f565b61046b6101e3565b806104758161038e565b0390f35b6101e9565b5190565b60209181520190565b60200190565b63ffffffff1690565b6104a390610491565b9052565b906104b48160209361049a565b0190565b60200190565b906104db6104d56104ce8461047e565b8093610482565b9261048b565b9060005b8181106104ec5750505090565b9091926105056104ff60019286516104a7565b946104b8565b91019190916104df565b61052591602082019160008184039101526104be565b90565b34610558576105383660046103c7565b610554610543611a56565b61054b6101e3565b9182918261050f565b0390f35b6101e9565b600080fd5b600080fd5b600080fd5b909182601f830112156105a65781359167ffffffffffffffff83116105a157602001926020830284011161059c57565b610567565b610562565b61055d565b909182601f830112156105e55781359167ffffffffffffffff83116105e05760200192602083028401116105db57565b610567565b610562565b61055d565b909160a08284031261066f576106038360008401610224565b926106118160208501610360565b9261061f8260408301610360565b92606082013567ffffffffffffffff811161066a578361064091840161056c565b929093608082013567ffffffffffffffff81116106655761066192016105ab565b9091565b6101f3565b6101f3565b6101ee565b346106a9576106936106873660046105ea565b95949094939193611af0565b61069b6101e3565b806106a58161038e565b0390f35b6101e9565b6106c5906106c0600991600092610289565b6102c8565b90565b346106f8576106f46106e36106de366004610233565b6106ae565b6106eb6101e3565b918291826102fd565b0390f35b6101e9565b3461072b57610715610710366004610233565b611f5d565b61071d6101e3565b806107278161038e565b0390f35b6101e9565b5190565b60209181520190565b60200190565b61074c90610348565b9052565b9061075d81602093610743565b0190565b60200190565b9061078461077e61077784610730565b8093610734565b9261073d565b9060005b8181106107955750505090565b9091926107ae6107a86001928651610750565b94610761565b9101919091610788565b6107ce9160208201916000818403910152610767565b90565b34610801576107e13660046103c7565b6107fd6107ec61208c565b6107f46101e3565b918291826107b8565b0390f35b6101e9565b346108345761081e610819366004610233565b612301565b6108266101e3565b806108308161038e565b0390f35b6101e9565b61084660046000906102c8565b90565b34610879576108593660046103c7565b610875610864610839565b61086c6101e3565b918291826102fd565b0390f35b6101e9565b634e487b7160e01b600052603260045260246000fd5b5490565b600052602060002090565b6108ac81610894565b8210156108c7576108be600191610898565b91020190600090565b61087e565b60066108d781610894565b8210156108f4576108f1916108eb916108a3565b906102c8565b90565b600080fd5b346109295761092561091461090f36600461036f565b6108cc565b61091c6101e3565b918291826102fd565b0390f35b6101e9565b5190565b60209181520190565b60200190565b151590565b61094f90610941565b9052565b60ff1690565b61096290610953565b9052565b61096f90610203565b9052565b906060806109bb9361098d60008201516000860190610946565b61099f60208201516020860190610959565b6109b16040820151604086019061049a565b0151910190610966565b565b906109ca81608093610973565b0190565b60200190565b906109f16109eb6109e48461092e565b8093610932565b9261093b565b9060005b818110610a025750505090565b909192610a1b610a1560019286516109bd565b946109ce565b91019190916109f5565b610a3b91602082019160008184039101526109d4565b90565b34610a6e57610a4e3660046103c7565b610a6a610a596124b7565b610a616101e3565b91829182610a25565b0390f35b6101e9565b9190604083820312610a9c5780610a90610a999260008601610224565b93602001610224565b90565b6101ee565b34610ad057610aba610ab4366004610a73565b90612598565b610ac26101e3565b80610acc8161038e565b0390f35b6101e9565b610ae260036000906102c8565b90565b34610b1557610af53660046103c7565b610b11610b00610ad5565b610b086101e3565b918291826102fd565b0390f35b6101e9565b90565b610b2d906008610b3293026102a1565b610b1a565b90565b90610b409154610b1d565b90565b610b506001600090610b35565b90565b610b5c90610348565b9052565b9190610b7490600060208501940190610b53565b565b34610ba657610b863660046103c7565b610ba2610b91610b43565b610b996101e3565b91829182610b60565b0390f35b6101e9565b90565b610bc2610bbd610bc792610bab565b610252565b610348565b90565b610bd46001610bae565b90565b610bdf610bca565b90565b34610c1257610bf23660046103c7565b610c0e610bfd610bd7565b610c056101e3565b91829182610b60565b0390f35b6101e9565b92916020610c34610c3c9360408701908782036000890152610767565b940190610b53565b565b34610c6f57610c56610c5136600461036f565b61269a565b90610c6b610c626101e3565b92839283610c17565b0390f35b6101e9565b34610ca257610c843660046103c7565b610c8c612a01565b610c946101e3565b80610c9e8161038e565b0390f35b6101e9565b610cb081610953565b03610cb757565b600080fd5b90503590610cc982610ca7565b565b610cd481610491565b03610cdb57565b600080fd5b90503590610ced82610ccb565b565b608081830312610d3157610d068260008301610224565b92610d2e610d178460208501610cbc565b93610d258160408601610ce0565b93606001610224565b90565b6101ee565b34610d6857610d52610d49366004610cef565b92919091612bc0565b610d5a6101e3565b80610d648161038e565b0390f35b6101e9565b34610d9f57610d89610d80366004610cef565b92919091612d9f565b610d916101e3565b80610d9b8161038e565b0390f35b6101e9565b34610dd257610dbc610db7366004610233565b612e2a565b610dc46101e3565b80610dce8161038e565b0390f35b6101e9565b9190604083820312610e005780610df4610dfd9260008601610224565b93602001610360565b90565b6101ee565b34610e3457610e1e610e18366004610dd7565b90612ed2565b610e266101e3565b80610e308161038e565b0390f35b6101e9565b90610e439061027d565b600052602052604060002090565b610e6890610e63600891600092610e39565b610b35565b90565b34610e9b57610e97610e86610e81366004610233565b610e51565b610e8e6101e3565b91829182610b60565b0390f35b6101e9565b34610ece57610eb8610eb3366004610233565b613257565b610ec06101e3565b80610eca8161038e565b0390f35b6101e9565b34610f0357610eff610eee610ee936600461036f565b613283565b610ef66101e3565b918291826107b8565b0390f35b6101e9565b34610f3857610f183660046103c7565b610f34610f23613503565b610f2b6101e3565b91829182610b60565b0390f35b6101e9565b90610f479061027d565b600052602052604060002090565b60001c90565b60ff1690565b610f6d610f7291610f55565b610f5b565b90565b610f7f9054610f61565b90565b60081c90565b60ff1690565b610f9a610f9f91610f82565b610f88565b90565b610fac9054610f8e565b90565b60101c90565b63ffffffff1690565b610fca610fcf91610faf565b610fb5565b90565b610fdc9054610fbe565b90565b60301c90565b610ff1610ff691610fdf565b6102a5565b90565b6110039054610fe5565b90565b611011906005610f3d565b9061101e60008301610f75565b9161102b60008201610fa2565b91611043600061103c818501610fd2565b9301610ff9565b90565b61104f90610941565b9052565b61105c90610953565b9052565b61106990610491565b9052565b6110a36110aa9461109960609498979561108f608086019a6000870190611046565b6020850190611053565b6040830190611060565b01906102f0565b565b346110e0576110dc6110c76110c2366004610233565b611006565b906110d39492946101e3565b9485948561106d565b0390f35b6101e9565b600080fd5b6110f66110fb91610f55565b6102a5565b90565b61110890546110ea565b90565b61111490610255565b90565b6111209061110b565b90565b61112c90610271565b90565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061115e90611134565b810190811067ffffffffffffffff82111761117857604052565b61113e565b60e01b90565b905051906111908261034b565b565b906020828203126111ac576111a991600001611183565b90565b6101ee565b6111b96101e3565b3d6000823e3d90fd5b60209181520190565b60207f20696e207573657227732077616c6c6574000000000000000000000000000000917f5661756c74436f72653a20696e73756666696369656e742042656e746f55534460008201520152565b61122660316040926111c2565b61122f816111cb565b0190565b6112499060208101906000818303910152611219565b90565b1561125357565b61125b6101e3565b62461bcd60e51b81528061127160048201611233565b0390fd5b61127e90610255565b90565b61128a90611275565b90565b61129690610271565b90565b60009103126112a457565b6101ee565b9160206112cb9294936112c4604082019660008301906102f0565b0190610b53565b565b90565b6112e46112df6112e9926112cd565b610252565b610348565b90565b60016112f89101610348565b90565b61130490610271565b90565b9061131182610730565b811015611322576020809102010190565b61087e565b6113319051610348565b90565b60207f7320696e207661756c7400000000000000000000000000000000000000000000917f5661756c74436f72653a20696e73756666696369656e74204c5420746f6b656e60008201520152565b61138f602a6040926111c2565b61139881611334565b0190565b6113b29060208101906000818303910152611382565b90565b156113bc57565b6113c46101e3565b62461bcd60e51b8152806113da6004820161139c565b0390fd5b906113e882613283565b9161143260206114086114036113fe60036110fe565b611117565b611123565b6370a0823190611427339261141b6101e3565b9586948593849361117d565b8352600483016102fd565b03915afa8015611679576114629160009161164b575b5061145b61145584610348565b91610348565b101561124c565b61147c61147761147260036110fe565b611281565b61128d565b90639dc29fac90339092803b15611646576114ab600080946114b661149f6101e3565b9788968795869461117d565b8452600484016112a9565b03925af1801561164157611614575b506114d060006112d0565b5b806114ed6114e76114e26006610894565b610348565b91610348565b101561160f5761151d600061151761151061150a600686906108a3565b906102c8565b6005610f3d565b01610ff9565b90611566602061153461152f85611117565b611123565b6370a082319061155b611546306112fb565b9261154f6101e3565b9586948593849361117d565b8352600483016102fd565b03915afa801561160a576115d7936115b36115b8926115d2946000916115dc575b506115ac6115a66115a161159c8c8a90611307565b611327565b610348565b91610348565b10156113b5565b611117565b336115cc6115c7888690611307565b611327565b91613819565b6112ec565b6114d1565b6115fd915060203d8111611603575b6115f58183611154565b810190611192565b38611587565b503d6115eb565b6111b1565b509050565b6116349060003d811161163a575b61162c8183611154565b810190611299565b386114c5565b503d611622565b6111b1565b61112f565b61166c915060203d8111611672575b6116648183611154565b810190611192565b38611448565b503d61165a565b6111b1565b905090565b60207f6967682e20546f74616c2076616c75653a200000000000000000000000000000917f5661756c74436f72653a20707269636520646576696174696f6e20746f6f206860008201520152565b6116dd6032809261167e565b6116e681611683565b0190565b5190565b60005b838110611702575050906000910152565b8060209183015181850152016116f1565b61173861172f92602092611726816116ea565b9485809361167e565b938491016116ee565b0190565b60007f2c204d696e696d756d2072657175697265643a20000000000000000000000000910152565b6117706014809261167e565b6117798161173c565b0190565b6117976117a2939261179161179c936116d1565b90611713565b611764565b90611713565b90565b90565b6117c76117d06020936117d5936117be816116ea565b938480936111c2565b958691016116ee565b611134565b0190565b6117ef91602082019160008184039101526117a8565b90565b156117fa5750565b61181b906118066101e3565b91829162461bcd60e51b8352600483016117d9565b0390fd5b6118289061269a565b92909261183560006112d0565b5b8061185261184c6118476006610894565b610348565b91610348565b10156118aa576118a5906118a061187c611877611871600685906108a3565b906102c8565b611117565b33611886306112fb565b9061189a6118958b8790611307565b611327565b92613897565b6112ec565b611836565b509161191191935061190b836118c86118c284610348565b91610348565b11916119066118df6118d987613990565b92613990565b916118f76118eb6101e3565b9384926020840161177d565b60208201810382520382611154565b6117a5565b906117f2565b61192b61192661192160036110fe565b611281565b61128d565b906340c10f1990339092803b156119a95761195a6000809461196561194e6101e3565b9788968795869461117d565b8452600484016112a9565b03925af180156119a457611977575b50565b6119979060003d811161199d575b61198f8183611154565b810190611299565b38611974565b503d611985565b6111b1565b61112f565b606090565b906119c66119bf6101e3565b9283611154565b565b67ffffffffffffffff81116119e05760208091020190565b61113e565b906119f76119f2836119c8565b6119b3565b918252565b369037565b90611a26611a0e836119e5565b92602080611a1c86936119c8565b92019103906119fc565b565b90611a328261047e565b811015611a43576020809102010190565b61087e565b90611a5290610491565b9052565b611a5e6119ae565b50611a71611a6c6006610894565b611a01565b611a7b60006112d0565b5b80611a98611a92611a8d6006610894565b610348565b91610348565b1015611aec57611ae790611ae2611ad06000611aca6005611ac4611abe600688906108a3565b906102c8565b90610f3d565b01610fd2565b611add8591849092611a28565b611a48565b6112ec565b611a7c565b5090565b91611b05969492959391909192939495613cf3565b565b60207f74696f6e00000000000000000000000000000000000000000000000000000000917f4f6e6c7920676f7665726e6f722063616e2063616c6c20746869732066756e6360008201520152565b611b6260246040926111c2565b611b6b81611b07565b0190565b611b859060208101906000818303910152611b55565b90565b15611b8f57565b611b976101e3565b62461bcd60e51b815280611bad60048201611b6f565b0390fd5b611bdf90611bda33611bd4611bce611bc960026110fe565b610203565b91610203565b14611b88565b611df3565b565b60007f4173736574206973206e6f7420737570706f7274656400000000000000000000910152565b611c1660166020926111c2565b611c1f81611be1565b0190565b611c399060208101906000818303910152611c09565b90565b15611c4357565b611c4b6101e3565b62461bcd60e51b815280611c6160048201611c23565b0390fd5b611c79611c74611c7e926112cd565b610252565b610491565b90565b60001b90565b90611c9360ff91611c81565b9181191691161790565b611ca690610941565b90565b90565b90611cc1611cbc611cc892611c9d565b611ca9565b8254611c87565b9055565b634e487b7160e01b600052601160045260246000fd5b611cf1611cf791939293610348565b92610348565b8203918211611d0257565b611ccc565b1b90565b91906008611d2b910291611d2560018060a01b0384611d07565b92611d07565b9181191691161790565b90565b9190611d4e611d49611d569361027d565b611d35565b908354611d0b565b9055565b90565b634e487b7160e01b600052603160045260246000fd5b5490565b600052602060002090565b611d8b81611d73565b821015611da657611d9d600191611d77565b91020190600090565b61087e565b600090565b611dc291611dbc611dab565b91611d38565b565b611dcd81611d73565b8015611dee576001900390611deb611de58383611d82565b90611db0565b55565b611d5d565b611e12611e0d6000611e0760058590610f3d565b01610f75565b611c3c565b611e3d81611e2d6000611e2760058690610f3d565b01610fd2565b611e376000611c65565b916143bc565b611e55600080611e4f60058590610f3d565b01611cac565b611e5f60006112d0565b5b80611e7c611e76611e716006610894565b610348565b91610348565b1015611f5757611e97611e91600683906108a3565b906102c8565b611ea9611ea384610203565b91610203565b14611ebc57611eb7906112ec565b611e60565b611f0290611efc611ef4611eee6006611ee8611ed86006610894565b611ee26001610bae565b90611ce2565b906108a3565b906102c8565b9160066108a3565b90611d38565b611f14611f0f6006611d5a565b611dc4565b5b611f3f7f37803e2125c48ee96c38ddf04e826daf335b0e1603579040fd275aba6d06b6fc9161027d565b90611f486101e3565b80611f528161038e565b0390a2565b50611f15565b611f6690611bb1565b565b606090565b67ffffffffffffffff8111611f855760208091020190565b61113e565b90611f9c611f9783611f6d565b6119b3565b918252565b369037565b90611fcb611fb383611f8a565b92602080611fc18693611f6d565b9201910390611fa1565b565b611fd690610255565b90565b611fe290611fcd565b90565b611fee90610271565b90565b90505190611ffe82610ca7565b565b9060208282031261201a5761201791600001611ff1565b90565b6101ee565b90565b61203661203161203b9261201f565b610252565b610348565b90565b61204790610953565b604d811161205557600a0a90565b611ccc565b61206390610255565b90565b61206f9061205a565b90565b61207b90610271565b90565b9061208890610348565b9052565b612094611f68565b5061209f6006610894565b6120a881611fa6565b916120b360006112d0565b5b806120c76120c185610348565b91610348565b10156122425761213a906120e66120e0600683906108a3565b906102c8565b602061212461211f6121196000612113600561210d61210760068b906108a3565b906102c8565b90610f3d565b01610ff9565b93611fd9565b611fe5565b63313ce567906121326101e3565b95869261117d565b8252818061214a6004820161038e565b03915afa90811561223d5761217e6121796121736020946121a597600091612210575b5061203e565b92612066565b612072565b61219a63c6e6f59261218e6101e3565b9687948593849361117d565b835260048301610b60565b03915afa91821561220b576121d8926121d3916000916121dd575b506121ce8791849092611307565b61207e565b6112ec565b6120b4565b6121fe915060203d8111612204575b6121f68183611154565b810190611192565b386121c0565b503d6121ec565b6111b1565b6122309150863d8111612236575b6122288183611154565b810190612000565b3861216d565b503d61221e565b6111b1565b5091905090565b612277906122723361226c61226661226160026110fe565b610203565b91610203565b14611b88565b6122b4565b565b9061228a60018060a01b0391611c81565b9181191691161790565b906122a96122a46122b09261027d565b611d35565b8254612279565b9055565b6122bf816004612294565b6122e97fb12580e226e25bbb446909adeb7b42f7dd51fc77e9b58f14f321016cbd68c16a9161027d565b906122f26101e3565b806122fc8161038e565b0390a2565b61230a90612249565b565b606090565b67ffffffffffffffff81116123295760208091020190565b61113e565b9061234061233b83612311565b6119b3565b918252565b61234f60806119b3565b90565b600090565b600090565b600090565b600090565b61236e612345565b9060208080808561237d612352565b815201612388612357565b81520161239361235c565b81520161239e612361565b81525050565b6123ac612366565b90565b60005b8281106123be57505050565b6020906123c96123a4565b81840152016123b2565b906123f86123e08361232e565b926020806123ee8693612311565b92019103906123af565b565b906124048261092e565b811015612415576020809102010190565b61087e565b9061242490610941565b9052565b9061243290610953565b9052565b9061244090610203565b9052565b906124a96124a06000612455612345565b9461246c612464838301610f75565b83880161241a565b61248361247a838301610fa2565b60208801612428565b61249a612491838301610fd2565b60408801611a48565b01610ff9565b60608401612436565b565b6124b490612444565b90565b6124bf61230c565b506124d26124cd6006610894565b6123d3565b6124dc60006112d0565b5b806124f96124f36124ee6006610894565b610348565b91610348565b101561254d5761254890612541612526600561252061251a600686906108a3565b906102c8565b90610f3d565b8461253184926124ab565b61253b83836123fa565b526123fa565b51506112ec565b6124dd565b5090565b906125809161257b3361257561256f61256a60026110fe565b610203565b91610203565b14611b88565b612582565b565b61259161259692916009610289565b612294565b565b906125a291612551565b565b600090565b6125b290610255565b90565b6125be906125a9565b90565b6125ca90610271565b90565b90565b6125e46125df6125e9926125cd565b610252565b610348565b90565b6126006125fb61260592610491565b610252565b610348565b90565b61261761261d91939293610348565b92610348565b91612629838202610348565b92818404149015171561263857565b611ccc565b61264c61265291939293610348565b92610348565b820180921161265d57565b611ccc565b634e487b7160e01b600052601260045260246000fd5b61268461268a91610348565b91610348565b908115612695570490565b612662565b6126a2611f68565b506126ab6125a4565b506126b66006610894565b916126c083611fa6565b926126ca81611fa6565b906126d560006112d0565b926126e060006112d0565b935b846126f56126ef85610348565b91610348565b10156128555761275b9061271461270e600688906108a3565b906102c8565b90602061273161272c61272760046110fe565b6125b5565b6125c1565b63aea910789061275085926127446101e3565b9788948593849361117d565b8352600483016102fd565b03915afa8015612850576127c26127ed936127d4926127f396600091612822575b509081612799612793670de0b6b3a76400006125d0565b91610348565b116127f9575b6127b860006127b26127bd936005610f3d565b01610fd2565b6125ec565b612608565b6127cf8b918a9092611307565b61207e565b6127e76127e28a8990611307565b611327565b9061263d565b946112ec565b936126e2565b90506127bd6127b860006127b2612817670de0b6b3a76400006125d0565b94935050505061279f565b612843915060203d8111612849575b61283b8183611154565b810190611192565b3861277c565b503d612831565b6111b1565b9295919490935061286660006112d0565b9361287160006112d0565b945b8561288661288089610348565b91610348565b10156129bc576128e7612925916128ce6128bc6128b5876128af6128aa8d8c611307565b611327565b90612608565b8990612678565b6128c98c918b9092611307565b61207e565b6128e16128dc8b8a90611307565b611327565b9061263d565b95602061290f61290a6129056128ff600686906108a3565b906102c8565b611fd9565b611fe5565b63313ce5679061291d6101e3565b94859261117d565b825281806129356004820161038e565b03915afa80156129b75761296c61297e9161298394600091612989575b506129666129618d8690611307565b611327565b90614495565b6129798b91849092611307565b61207e565b6112ec565b94612873565b6129aa915060203d81116129b0575b6129a28183611154565b810190612000565b38612952565b503d612998565b6111b1565b96945094505050509190565b6129ed336129e76129e16129dc60026110fe565b610203565b91610203565b14611b88565b6129f56129f7565b565b6129ff61454c565b565b612a096129c8565b565b90612a3c939291612a3733612a31612a2b612a2660026110fe565b610203565b91610203565b14611b88565b612b06565b565b60081b90565b90612a5161ff0091612a3e565b9181191691161790565b612a6f612a6a612a7492610953565b610252565b610953565b90565b90565b90612a8f612a8a612a9692612a5b565b612a77565b8254612a44565b9055565b60301b90565b90612ab86601000000000000600160d01b0391612a9a565b9181191691161790565b90612ad7612ad2612ade9261027d565b611d35565b8254612aa0565b9055565b916020612b04929493612afd60408201966000830190611053565b0190611060565b565b909192612b7a90612b2c612b276000612b2160058790610f3d565b01610f75565b611c3c565b612b4e83612b476000612b4160058890610f3d565b01610fd2565b87916143bc565b612b66846000612b6060058790610f3d565b01612a7a565b6000612b7460058590610f3d565b01612ac2565b9091612ba67fd19afa6a62432ff0578526c79ab25d5e83049cfd7c7dade58cb858714dc0df039261027d565b92612bbb612bb26101e3565b92839283612ae2565b0390a2565b90612bcc939291612a0b565b565b90612bff939291612bfa33612bf4612bee612be960026110fe565b610203565b91610203565b14611b88565b612cba565b565b60007f417373657420697320616c726561647920737570706f72746564000000000000910152565b612c36601a6020926111c2565b612c3f81612c01565b0190565b612c599060208101906000818303910152612c29565b90565b15612c6357565b612c6b6101e3565b62461bcd60e51b815280612c8160048201612c43565b0390fd5b9081549168010000000000000000831015612cb55782612cad916001612cb395018155611d82565b90611d38565b565b61113e565b909192612d4590612ce9612ce4612cde6000612cd860058890610f3d565b01610f75565b15610941565b612c5c565b612d0083600090612cfa8892611c65565b906143bc565b612d1960016000612d1360058790610f3d565b01611cac565b612d31846000612d2b60058790610f3d565b01612a7a565b6000612d3f60058590610f3d565b01612ac2565b612d59612d526006611d5a565b8290612c85565b9091612d857f62bd751f51149024e62ea3228318ca127fd1c35241bf764fba1e4b27d255e9309261027d565b92612d9a612d916101e3565b92839283612ae2565b0390a2565b90612dab939291612bce565b565b612ddb90612dd633612dd0612dca612dc560026110fe565b610203565b91610203565b14611b88565b612ddd565b565b612de8816003612294565b612e127f81b85e876e8723f9d61f238308ea004b759aee15ab163f6bd9b2cde9b20cc6189161027d565b90612e1b6101e3565b80612e258161038e565b0390a2565b612e3390612dad565b565b90612e6491612e5f33612e59612e53612e4e60026110fe565b610203565b91610203565b14611b88565b612ebc565b565b90612e7360001991611c81565b9181191691161790565b612e91612e8c612e9692610348565b610252565b610348565b90565b90565b90612eb1612eac612eb892612e7d565b612e99565b8254612e66565b9055565b612ecb612ed092916008610e39565b612e9c565b565b90612edc91612e35565b565b612eea612eef91610f82565b610f5b565b90565b612efc9054612ede565b90565b612f0b612f1091610f55565b610f88565b90565b612f1d9054612eff565b90565b612f34612f2f612f3992610bab565b610252565b610953565b90565b612f4590610271565b90565b60207f647920696e697469616c697a6564000000000000000000000000000000000000917f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201520152565b612fa3602e6040926111c2565b612fac81612f48565b0190565b612fc69060208101906000818303910152612f96565b90565b15612fd057565b612fd86101e3565b62461bcd60e51b815280612fee60048201612fb0565b0390fd5b9061300761300261300e92612a5b565b612a77565b8254611c87565b9055565b9061302761302261302e92611c9d565b611ca9565b8254612a44565b9055565b61303b90612f20565b9052565b919061305390600060208501940190613032565b565b6130a261306b6130656000612ef2565b15610941565b918280613154575b8015613105575b61308390612fc9565b6130976130906001612f20565b6000612ff2565b826130f4575b613224565b6130a9575b565b6130b4600080613012565b60016130ec7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498916130e36101e3565b9182918261303f565b0390a16130a7565b61310060016000613012565b61309d565b5061312061311a61311530612f3c565b6147dd565b15610941565b8061312b575b61307a565b506130836131396000612f13565b61314c6131466001612f20565b91610953565b149050613126565b5061315f6000612f13565b61317261316c6001612f20565b91610953565b10613073565b61318c613187613191926112cd565b610252565b6101f8565b90565b61319d90613178565b90565b60007f476f7665726e6f722063616e6e6f74206265207a65726f206164647265737300910152565b6131d5601f6020926111c2565b6131de816131a0565b0190565b6131f890602081019060008183039101526131c8565b90565b1561320257565b61320a6101e3565b62461bcd60e51b815280613220600482016131e2565b0390fd5b6132559061324e8161324761324161323c6000613194565b610203565b91610203565b14156131fb565b6002612294565b565b61326090613055565b565b61326e61327391610f55565b610b1a565b90565b6132809054613262565b90565b9061328c611f68565b5061329f61329a6006610894565b611fa6565b916132aa60006112d0565b5b806132c76132c16132bc6006610894565b610348565b91610348565b10156134ff576132e26132dc600683906108a3565b906102c8565b906132fa60006132f460058590610f3d565b01610ff9565b6133366133268561332061331b600061331560058a90610f3d565b01610fd2565b6125ec565b90612608565b6133306001613276565b90612678565b90613380602061335661335161334c60046110fe565b6125b5565b6125c1565b63aea910789061337588926133696101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9485156134fa5761340760209461340161340d9361343999613412966000916134cd575b5090816133c56133bf670de0b6b3a76400006125d0565b91610348565b106134a4575b6133e460006133de6133fc936005610f3d565b01610fa2565b936133f6670de0b6b3a76400006125d0565b90612608565b612678565b90614495565b92612066565b612072565b61342e63c6e6f5926134226101e3565b9687948593849361117d565b835260048301610b60565b03915afa91821561349f5761346c9261346791600091613471575b506134628791849092611307565b61207e565b6112ec565b6132ab565b613492915060203d8111613498575b61348a8183611154565b810190611192565b38613454565b503d613480565b6111b1565b90506133fc6133e460006133de6134c2670de0b6b3a76400006125d0565b9493505050506133cb565b6134ed9150893d81116134f3575b6134e58183611154565b810190611192565b386133a8565b503d6134db565b6111b1565b5050565b61350b6125a4565b5061351660006112d0565b9061352160006112d0565b915b8261353f6135396135346006610894565b610348565b91610348565b10156137eb5761355a613554600685906108a3565b906102c8565b6135a2602061357061356b84611117565b611123565b6370a0823190613597613582306112fb565b9261358b6101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9081156137e6576000916137b8575b50916135ce60006135c860058590610f3d565b01610ff9565b61361660206135e46135df84611117565b611123565b6370a082319061360b6135f6306112fb565b926135ff6101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9182156137b35761364261363d61366994602094600091613786575b5092612066565b612072565b61365e6307a2d13a6136526101e3565b9586948593849361117d565b835260048301610b60565b03915afa908115613781576136d09460209261368e92600091613754575b509061263d565b926136a96136a461369f60046110fe565b6125b5565b6125c1565b6136c563aea910786136b96101e3565b9788948593849361117d565b8352600483016102fd565b03915afa801561374f576136f86137159361370f9261371b96600091613721575b5090612608565b613709670de0b6b3a76400006125d0565b90612678565b9061263d565b926112ec565b91613523565b613742915060203d8111613748575b61373a8183611154565b810190611192565b386136f1565b503d613730565b6111b1565b6137749150843d811161377a575b61376c8183611154565b810190611192565b38613687565b503d613762565b6111b1565b6137a69150853d81116137ac575b61379e8183611154565b810190611192565b38613636565b503d613794565b6111b1565b6137d9915060203d81116137df575b6137d18183611154565b810190611192565b386135b5565b503d6137c7565b6111b1565b90915090565b63ffffffff60e01b1690565b61381161380c61381692610491565b61117d565b6137f1565b90565b9161385d60049261384e613862959361383563a9059cbb6137fd565b9261383e6101e3565b96879460208601908152016112a9565b60208201810382520383611154565b61493b565b565b60409061388e6138959496959396613884606084019860008501906102f0565b60208301906102f0565b0190610b53565b565b6138e493916138d06004946138df93946138b46323b872dd6137fd565b939190916138c06101e3565b9788956020870190815201613864565b60208201810382520383611154565b61493b565b565b606090565b906138f69101610348565b90565b67ffffffffffffffff811161391757613913602091611134565b0190565b61113e565b9061392e613929836138f9565b6119b3565b918252565b369037565b9061395d6139458361391c565b9260208061395386936138f9565b9201910390613933565b565b600161396b9103610348565b90565b61397a61398091610348565b91610348565b90811561398b570490565b612662565b6139986138e6565b506139b56139a582614afd565b6139af6001610bae565b906138eb565b906139bf82613938565b916139c86125a4565b5060200182015b600115613a33576139e2613a0e9161395f565b916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353613a08600a612022565b9061396e565b80613a22613a1c60006112d0565b91610348565b14613a2d57906139cf565b50505b90565b5050613a30565b60007f416d6f756e74206d7573742062652067726561746572207468616e2030000000910152565b613a6f601d6020926111c2565b613a7881613a3a565b0190565b613a929060208101906000818303910152613a62565b90565b15613a9c57565b613aa46101e3565b62461bcd60e51b815280613aba60048201613a7c565b0390fd5b5090565b60007f496e76616c696420726f757465722064617461206c656e677468000000000000910152565b613af7601a6020926111c2565b613b0081613ac2565b0190565b613b1a9060208101906000818303910152613aea565b90565b15613b2457565b613b2c6101e3565b62461bcd60e51b815280613b4260048201613b04565b0390fd5b9190811015613b56576020020190565b61087e565b35613b658161020f565b90565b600080fd5b600080fd5b600080fd5b903590600160200381360303821215613bb9570180359067ffffffffffffffff8211613bb457602001916001820236038313613baf57565b613b72565b613b6d565b613b68565b90821015613bd9576020613bd59202810190613b77565b9091565b61087e565b613c14613c1b94613c0a606094989795613c00608086019a60008701906102f0565b60208501906102f0565b60408301906102f0565b0190610b53565b565b613c279051610491565b90565b90565b613c41613c3c613c4692613c2a565b610252565b610348565b90565b60207f64207765696768747320746f6f20686967680000000000000000000000000000917f5661756c74436f72653a20646576696174696f6e2066726f6d2064657369726560008201520152565b613ca460326040926111c2565b613cad81613c49565b0190565b613cc79060208101906000818303910152613c97565b90565b15613cd157565b613cd96101e3565b62461bcd60e51b815280613cef60048201613cb1565b0390fd5b9496939195608052613d1a613d156000613d0f60058990610f3d565b01610f75565b611c3c565b613d3781613d31613d2b60006112d0565b91610348565b11613a95565b613d68613d478860805190613abe565b613d62613d5c613d576006610894565b610348565b91610348565b14613b1d565b613d726001613276565b92613d7d60006112d0565b94613d886006610894565b97613d9360006112d0565b965b87613da8613da28c610348565b91610348565b101561422d57613dc3613dbd60068a906108a3565b906102c8565b80613dd6613dd08c610203565b91610203565b141560001461416857613e3c91613df7613df260058490610f3d565b6124ab565b6020613e0a613e0585611117565b611123565b6370a0823190613e31613e1c306112fb565b92613e256101e3565b9889948593849361117d565b8352600483016102fd565b03915afa801561416357613e9994600091614135575b506020613e6f613e6a613e6560046110fe565b6125b5565b6125c1565b63aea9107890613e8e8792613e826101e3565b998a948593849361117d565b8352600483016102fd565b03915afa8015614130578f95600091614102575b50948c8b8a88613ecd613ec7670de0b6b3a76400006125d0565b91610348565b116140d2575b91613ef0613eeb613efc93613f029695908491613b46565b613b5b565b92906080519091613bbe565b91614e5e565b613f4a6020613f18613f1387611117565b611123565b6370a0823190613f3f613f2a306112fb565b92613f336101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9081156140cd5760009161409f575b5090613f6891611ce2565b928c90888d8c613f7792613b46565b613f8090613b5b565b9085927fa502e3bc10e47f200a18c57c70f77788429a03d25cf6cd06b06171bf2415855793613fad6101e3565b938493613fba9385613bde565b0390a18790604001613fcb90613c1d565b613fd4906125ec565b613fdd91612608565b89613fe791612678565b8083613ff290610348565b90613ffc90610348565b116000146140869461407f9461405d61403e614079956140629561408c57614039614028828690611ce2565b5b6140336064613c2d565b90612608565b612678565b61405761405161404c610bca565b610348565b91610348565b10613cca565b612608565b614073670de0b6b3a76400006125d0565b90612678565b9061263d565b975b6112ec565b96613d95565b61403961409a858390611ce2565b614029565b6140c0915060203d81116140c6575b6140b88183611154565b810190611192565b38613f5d565b503d6140ae565b6111b1565b9750613f029291613ef0613eeb613efc936140f4670de0b6b3a76400006125d0565b9b9395965093505050613ed3565b614123915060203d8111614129575b61411b8183611154565b810190611192565b38613ead565b503d614111565b6111b1565b614156915060203d811161415c575b61414e8183611154565b810190611192565b38613e52565b503d614144565b6111b1565b60206141af9161418861418361417e60046110fe565b6125b5565b6125c1565b6141a463aea910786141986101e3565b9586948593849361117d565b8352600483016102fd565b03915afa918215614228576141ee6141d7614086946141f4946000916141fa575b5089612608565b6141e8670de0b6b3a76400006125d0565b90612678565b9061263d565b97614081565b61421b915060203d8111614221575b6142138183611154565b810190611192565b386141d0565b503d614209565b6111b1565b9850955097505050505061429b91506142958361425261424c84610348565b91610348565b119161429061426961426387613990565b92613990565b916142816142756101e3565b9384926020840161177d565b60208201810382520382611154565b6117a5565b906117f2565b6142b56142b06142ab60036110fe565b611281565b61128d565b906340c10f1990339092803b15614333576142e4600080946142ef6142d86101e3565b9788968795869461117d565b8452600484016112a9565b03925af1801561432e57614301575b50565b6143219060003d8111614327575b6143198183611154565b810190611299565b386142fe565b503d61430f565b6111b1565b61112f565b60101b90565b9061434f65ffffffff000091614338565b9181191691161790565b61436d61436861437292610491565b610252565b610491565b90565b90565b9061438d61438861439492614359565b614375565b825461433e565b9055565b9160206143ba9294936143b360408201966000830190611060565b0190611060565b565b6143f46143ed6143de6143cf6001613276565b6143d8876125ec565b9061263d565b6143e7856125ec565b90611ce2565b6001612e9c565b61440c83600061440660058590610f3d565b01614378565b90916144387ffe53ad22d287601d2ed917d8aedf4a9bf6f948833c8b55fbc07d8a4e1cdd77899261027d565b9261444d6144446101e3565b92839283614398565b0390a2565b90565b61446961446461446e92614452565b610252565b610953565b90565b61447d61448391610953565b91610953565b90039060ff821161449057565b611ccc565b61449d6125a4565b50806144b26144ac6012614455565b91610953565b106000146144e2576144d96144d46144df93926144cf6012614455565b614471565b61203e565b90612678565b90565b806144f66144f06012614455565b91610953565b116144ff575090565b61451f61451a61452593926145146012614455565b90614471565b61203e565b90612608565b90565b61453190610255565b90565b61453d90614528565b90565b61454990610271565b90565b6145566006610894565b9061456160006112d0565b5b8061457561456f85610348565b91610348565b10156147d35761459861459361458d600684906108a3565b906102c8565b611117565b906145d960206145a784611123565b6370a08231906145ce6145b9306112fb565b926145c26101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9081156147ce576000916147a0575b5061460961460460086145fe86611123565b90610e39565b613276565b908061461d61461784610348565b91610348565b10614794579061462c91611ce2565b614648614643600961463d86611123565b90610289565b6110fe565b908161466561465f61465a6000613194565b610203565b91610203565b141580614779575b614684575b505061467f91505b6112ec565b614562565b6146a961469083614534565b6146a48661469d83614540565b8591613819565b614540565b9363b6b55f2582863b15614774576146e1966146d6600080946146ca6101e3565b9a8b958694859361117d565b835260048301610b60565b03925af190811561476f5761467f956146ff92614742575b50611123565b9190916147387f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9361472f6101e3565b93849384613864565b0390a13880614672565b6147629060003d8111614768575b61475a8183611154565b810190611299565b386146f9565b503d614750565b6111b1565b61112f565b508061478e61478860006112d0565b91610348565b1161466d565b505061467f915061467a565b6147c1915060203d81116147c7575b6147b98183611154565b810190611192565b386145ec565b503d6147af565b6111b1565b509050565b600090565b6147e56147d8565b503b6147fa6147f460006112d0565b91610348565b1190565b60007f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b614830602061391c565b9061483d602083016147fe565b565b614847614826565b90565b5190565b61485781610941565b0361485e57565b600080fd5b905051906148708261484e565b565b9060208282031261488c5761488991600001614863565b90565b6101ee565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201520152565b6148ec602a6040926111c2565b6148f581614891565b0190565b61490f90602081019060008183039101526148df565b90565b1561491957565b6149216101e3565b62461bcd60e51b815280614937600482016148f9565b0390fd5b6149859161494b61495a92611123565b9061495461483f565b91614f0c565b6149638161484a565b61497661497060006112d0565b91610348565b14908115614987575b50614912565b565b6149a2915060206149978261484a565b818301019101614872565b3861497f565b90565b6149bf6149ba6149c4926149a8565b610252565b610348565b90565b90565b6149de6149d96149e3926149c7565b610252565b610348565b90565b90565b6149fd6149f8614a02926149e6565b610252565b610348565b90565b90565b614a1c614a17614a2192614a05565b610252565b610348565b90565b90565b614a3b614a36614a4092614a24565b610252565b610348565b90565b90565b614a5a614a55614a5f92614a43565b610252565b610348565b90565b90565b614a79614a74614a7e92614a62565b610252565b610348565b90565b90565b614a98614a93614a9d92614a81565b610252565b610348565b90565b90565b614ab7614ab2614abc92614aa0565b610252565b610348565b90565b90565b614ad6614ad1614adb92614abf565b610252565b610348565b90565b90565b614af5614af0614afa92614ade565b610252565b610348565b90565b614b056125a4565b50614b1060006112d0565b9080614b3f614b397a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000006149ab565b91610348565b1015614d17575b80614b67614b616d04ee2d6d415b85acef81000000006149e9565b91610348565b1015614cdc575b80614b88614b82662386f26fc10000614a27565b91610348565b1015614ca8575b80614ba6614ba06305f5e100614a65565b91610348565b1015614c77575b80614bc2614bbc612710614aa3565b91610348565b1015614c48575b80614bdd614bd76064613c2d565b91610348565b1015614c1a575b614bf7614bf1600a612022565b91610348565b1015614c01575b90565b614c1590614c0f6001610bae565b906138eb565b614bfe565b614c31614c4291614c2b6064613c2d565b9061396e565b91614c3c6002614ae1565b906138eb565b90614be4565b614c60614c7191614c5a612710614aa3565b9061396e565b91614c6b6004614ac2565b906138eb565b90614bc9565b614c91614ca291614c8b6305f5e100614a65565b9061396e565b91614c9c6008614a84565b906138eb565b90614bad565b614cc5614cd691614cbf662386f26fc10000614a27565b9061396e565b91614cd06010614a46565b906138eb565b90614b8f565b614d00614d1191614cfa6d04ee2d6d415b85acef81000000006149e9565b9061396e565b91614d0b6020614a08565b906138eb565b90614b6e565b614d48614d5991614d427a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000006149ab565b9061396e565b91614d5360406149ca565b906138eb565b90614b46565b905090565b90826000939282370152565b909182614d8081614d8793614d5f565b8093614d64565b0190565b9091614d9692614d70565b90565b67ffffffffffffffff8111614db757614db3602091611134565b0190565b61113e565b90614dce614dc983614d99565b6119b3565b918252565b606090565b3d600014614df557614de93d614dbc565b903d6000602084013e5b565b614dfd614dd3565b90614df3565b60007f556e6b6e6f776e20726561736f6e000000000000000000000000000000000000910152565b614e38600e6020926111c2565b614e4181614e03565b0190565b614e5b9060208101906000818303910152614e2b565b90565b9060009283809392614e7a614e716101e3565b93849283614d8b565b03925af1614e90614e89614dd8565b9115610941565b614e975750565b614ea08161484a565b614eb3614ead60006112d0565b91610348565b11600014614ee957614ec7614ee5916117a5565b614ecf6101e3565b918291634ecb9b6d60e01b8352600483016117d9565b0390fd5b614ef16101e3565b634ecb9b6d60e01b815280614f0860048201614e45565b0390fd5b90614f2c9291614f1a614dd3565b5090614f2660006112d0565b91614fe5565b90565b614f3890610271565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201520152565b614f9660266040926111c2565b614f9f81614f3b565b0190565b614fb99060208101906000818303910152614f89565b90565b15614fc357565b614fcb6101e3565b62461bcd60e51b815280614fe160048201614fa3565b0390fd5b916000809161503c9593614ff7614dd3565b5061501e61500430614f2f565b3161501761501185610348565b91610348565b1015614fbc565b8591602082019151925af191615032614dd8565b90929091926150c3565b90565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b615074601d6020926111c2565b61507d8161503f565b0190565b6150979060208101906000818303910152615067565b90565b156150a157565b6150a96101e3565b62461bcd60e51b8152806150bf60048201615081565b0390fd5b9192906150ce614dd3565b5060001461511457506150e08261484a565b6150f36150ed60006112d0565b91610348565b146150fd575b5090565b61510961510e916147dd565b61509a565b386150f9565b829061511f8261484a565b61513261512c60006112d0565b91610348565b116000146151435750805190602001fd5b6151649061514f6101e3565b91829162461bcd60e51b8352600483016117d9565b0390fdfea2646970667358221220f48e3ff4792d42e1aefb204e6eb9e9d96897496b8a01ee538c9ce50feee16e7564736f6c634300081b0033","deployedBytecode":"0x60a06040526004361015610013575b6110e5565b61001e6000356101dd565b80630a789ece146101d85780630b5580a4146101d35780630c340a24146101ce57806315e6bc99146101c957806322acb867146101c45780632fd34f5f146101bf5780634a3e6544146101ba5780634a5e42b1146101b55780634a7fe890146101b05780634d69ee0e146101ab57806355a29e91146101a6578063578e5c22146101a157806367e4ac2c1461019c57806372cb5d9714610197578063829c8db71461019257806396c82e571461018d578063a158b3ae14610188578063a1b2439e14610183578063abaa99161461017e578063aee3fee714610179578063b0ce3dfa14610174578063b5c705b51461016f578063b658e9f81461016a578063bca678e014610165578063c4d66de814610160578063c9339e9f1461015b578063caa648b4146101565763f11b81880361000e576110ac565b610f08565b610ed3565b610ea0565b610e6b565b610e05565b610da4565b610d6d565b610d36565b610c74565b610c3e565b610be2565b610b76565b610ae5565b610aa1565b610a3e565b6108f9565b610849565b610806565b6107d1565b6106fd565b6106c8565b610674565b610528565b61044a565b6103e7565b610394565b610313565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61020c906101f8565b90565b61021881610203565b0361021f57565b600080fd5b905035906102318261020f565b565b9060208282031261024d5761024a91600001610224565b90565b6101ee565b90565b61026961026461026e926101f8565b610252565b6101f8565b90565b61027a90610255565b90565b61028690610271565b90565b906102939061027d565b600052602052604060002090565b1c90565b60018060a01b031690565b6102c09060086102c593026102a1565b6102a5565b90565b906102d391546102b0565b90565b6102ed906102e8600791600092610289565b6102c8565b90565b6102f990610203565b9052565b9190610311906000602085019401906102f0565b565b346103435761033f61032e610329366004610233565b6102d6565b6103366101e3565b918291826102fd565b0390f35b6101e9565b90565b61035481610348565b0361035b57565b600080fd5b9050359061036d8261034b565b565b906020828203126103895761038691600001610360565b90565b6101ee565b60000190565b346103c2576103ac6103a736600461036f565b6113de565b6103b46101e3565b806103be8161038e565b0390f35b6101e9565b60009103126103d257565b6101ee565b6103e460026000906102c8565b90565b34610417576103f73660046103c7565b6104136104026103d7565b61040a6101e3565b918291826102fd565b0390f35b6101e9565b919060408382031261044557806104396104429260008601610360565b93602001610360565b90565b6101ee565b346104795761046361045d36600461041c565b9061181f565b61046b6101e3565b806104758161038e565b0390f35b6101e9565b5190565b60209181520190565b60200190565b63ffffffff1690565b6104a390610491565b9052565b906104b48160209361049a565b0190565b60200190565b906104db6104d56104ce8461047e565b8093610482565b9261048b565b9060005b8181106104ec5750505090565b9091926105056104ff60019286516104a7565b946104b8565b91019190916104df565b61052591602082019160008184039101526104be565b90565b34610558576105383660046103c7565b610554610543611a56565b61054b6101e3565b9182918261050f565b0390f35b6101e9565b600080fd5b600080fd5b600080fd5b909182601f830112156105a65781359167ffffffffffffffff83116105a157602001926020830284011161059c57565b610567565b610562565b61055d565b909182601f830112156105e55781359167ffffffffffffffff83116105e05760200192602083028401116105db57565b610567565b610562565b61055d565b909160a08284031261066f576106038360008401610224565b926106118160208501610360565b9261061f8260408301610360565b92606082013567ffffffffffffffff811161066a578361064091840161056c565b929093608082013567ffffffffffffffff81116106655761066192016105ab565b9091565b6101f3565b6101f3565b6101ee565b346106a9576106936106873660046105ea565b95949094939193611af0565b61069b6101e3565b806106a58161038e565b0390f35b6101e9565b6106c5906106c0600991600092610289565b6102c8565b90565b346106f8576106f46106e36106de366004610233565b6106ae565b6106eb6101e3565b918291826102fd565b0390f35b6101e9565b3461072b57610715610710366004610233565b611f5d565b61071d6101e3565b806107278161038e565b0390f35b6101e9565b5190565b60209181520190565b60200190565b61074c90610348565b9052565b9061075d81602093610743565b0190565b60200190565b9061078461077e61077784610730565b8093610734565b9261073d565b9060005b8181106107955750505090565b9091926107ae6107a86001928651610750565b94610761565b9101919091610788565b6107ce9160208201916000818403910152610767565b90565b34610801576107e13660046103c7565b6107fd6107ec61208c565b6107f46101e3565b918291826107b8565b0390f35b6101e9565b346108345761081e610819366004610233565b612301565b6108266101e3565b806108308161038e565b0390f35b6101e9565b61084660046000906102c8565b90565b34610879576108593660046103c7565b610875610864610839565b61086c6101e3565b918291826102fd565b0390f35b6101e9565b634e487b7160e01b600052603260045260246000fd5b5490565b600052602060002090565b6108ac81610894565b8210156108c7576108be600191610898565b91020190600090565b61087e565b60066108d781610894565b8210156108f4576108f1916108eb916108a3565b906102c8565b90565b600080fd5b346109295761092561091461090f36600461036f565b6108cc565b61091c6101e3565b918291826102fd565b0390f35b6101e9565b5190565b60209181520190565b60200190565b151590565b61094f90610941565b9052565b60ff1690565b61096290610953565b9052565b61096f90610203565b9052565b906060806109bb9361098d60008201516000860190610946565b61099f60208201516020860190610959565b6109b16040820151604086019061049a565b0151910190610966565b565b906109ca81608093610973565b0190565b60200190565b906109f16109eb6109e48461092e565b8093610932565b9261093b565b9060005b818110610a025750505090565b909192610a1b610a1560019286516109bd565b946109ce565b91019190916109f5565b610a3b91602082019160008184039101526109d4565b90565b34610a6e57610a4e3660046103c7565b610a6a610a596124b7565b610a616101e3565b91829182610a25565b0390f35b6101e9565b9190604083820312610a9c5780610a90610a999260008601610224565b93602001610224565b90565b6101ee565b34610ad057610aba610ab4366004610a73565b90612598565b610ac26101e3565b80610acc8161038e565b0390f35b6101e9565b610ae260036000906102c8565b90565b34610b1557610af53660046103c7565b610b11610b00610ad5565b610b086101e3565b918291826102fd565b0390f35b6101e9565b90565b610b2d906008610b3293026102a1565b610b1a565b90565b90610b409154610b1d565b90565b610b506001600090610b35565b90565b610b5c90610348565b9052565b9190610b7490600060208501940190610b53565b565b34610ba657610b863660046103c7565b610ba2610b91610b43565b610b996101e3565b91829182610b60565b0390f35b6101e9565b90565b610bc2610bbd610bc792610bab565b610252565b610348565b90565b610bd46001610bae565b90565b610bdf610bca565b90565b34610c1257610bf23660046103c7565b610c0e610bfd610bd7565b610c056101e3565b91829182610b60565b0390f35b6101e9565b92916020610c34610c3c9360408701908782036000890152610767565b940190610b53565b565b34610c6f57610c56610c5136600461036f565b61269a565b90610c6b610c626101e3565b92839283610c17565b0390f35b6101e9565b34610ca257610c843660046103c7565b610c8c612a01565b610c946101e3565b80610c9e8161038e565b0390f35b6101e9565b610cb081610953565b03610cb757565b600080fd5b90503590610cc982610ca7565b565b610cd481610491565b03610cdb57565b600080fd5b90503590610ced82610ccb565b565b608081830312610d3157610d068260008301610224565b92610d2e610d178460208501610cbc565b93610d258160408601610ce0565b93606001610224565b90565b6101ee565b34610d6857610d52610d49366004610cef565b92919091612bc0565b610d5a6101e3565b80610d648161038e565b0390f35b6101e9565b34610d9f57610d89610d80366004610cef565b92919091612d9f565b610d916101e3565b80610d9b8161038e565b0390f35b6101e9565b34610dd257610dbc610db7366004610233565b612e2a565b610dc46101e3565b80610dce8161038e565b0390f35b6101e9565b9190604083820312610e005780610df4610dfd9260008601610224565b93602001610360565b90565b6101ee565b34610e3457610e1e610e18366004610dd7565b90612ed2565b610e266101e3565b80610e308161038e565b0390f35b6101e9565b90610e439061027d565b600052602052604060002090565b610e6890610e63600891600092610e39565b610b35565b90565b34610e9b57610e97610e86610e81366004610233565b610e51565b610e8e6101e3565b91829182610b60565b0390f35b6101e9565b34610ece57610eb8610eb3366004610233565b613257565b610ec06101e3565b80610eca8161038e565b0390f35b6101e9565b34610f0357610eff610eee610ee936600461036f565b613283565b610ef66101e3565b918291826107b8565b0390f35b6101e9565b34610f3857610f183660046103c7565b610f34610f23613503565b610f2b6101e3565b91829182610b60565b0390f35b6101e9565b90610f479061027d565b600052602052604060002090565b60001c90565b60ff1690565b610f6d610f7291610f55565b610f5b565b90565b610f7f9054610f61565b90565b60081c90565b60ff1690565b610f9a610f9f91610f82565b610f88565b90565b610fac9054610f8e565b90565b60101c90565b63ffffffff1690565b610fca610fcf91610faf565b610fb5565b90565b610fdc9054610fbe565b90565b60301c90565b610ff1610ff691610fdf565b6102a5565b90565b6110039054610fe5565b90565b611011906005610f3d565b9061101e60008301610f75565b9161102b60008201610fa2565b91611043600061103c818501610fd2565b9301610ff9565b90565b61104f90610941565b9052565b61105c90610953565b9052565b61106990610491565b9052565b6110a36110aa9461109960609498979561108f608086019a6000870190611046565b6020850190611053565b6040830190611060565b01906102f0565b565b346110e0576110dc6110c76110c2366004610233565b611006565b906110d39492946101e3565b9485948561106d565b0390f35b6101e9565b600080fd5b6110f66110fb91610f55565b6102a5565b90565b61110890546110ea565b90565b61111490610255565b90565b6111209061110b565b90565b61112c90610271565b90565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061115e90611134565b810190811067ffffffffffffffff82111761117857604052565b61113e565b60e01b90565b905051906111908261034b565b565b906020828203126111ac576111a991600001611183565b90565b6101ee565b6111b96101e3565b3d6000823e3d90fd5b60209181520190565b60207f20696e207573657227732077616c6c6574000000000000000000000000000000917f5661756c74436f72653a20696e73756666696369656e742042656e746f55534460008201520152565b61122660316040926111c2565b61122f816111cb565b0190565b6112499060208101906000818303910152611219565b90565b1561125357565b61125b6101e3565b62461bcd60e51b81528061127160048201611233565b0390fd5b61127e90610255565b90565b61128a90611275565b90565b61129690610271565b90565b60009103126112a457565b6101ee565b9160206112cb9294936112c4604082019660008301906102f0565b0190610b53565b565b90565b6112e46112df6112e9926112cd565b610252565b610348565b90565b60016112f89101610348565b90565b61130490610271565b90565b9061131182610730565b811015611322576020809102010190565b61087e565b6113319051610348565b90565b60207f7320696e207661756c7400000000000000000000000000000000000000000000917f5661756c74436f72653a20696e73756666696369656e74204c5420746f6b656e60008201520152565b61138f602a6040926111c2565b61139881611334565b0190565b6113b29060208101906000818303910152611382565b90565b156113bc57565b6113c46101e3565b62461bcd60e51b8152806113da6004820161139c565b0390fd5b906113e882613283565b9161143260206114086114036113fe60036110fe565b611117565b611123565b6370a0823190611427339261141b6101e3565b9586948593849361117d565b8352600483016102fd565b03915afa8015611679576114629160009161164b575b5061145b61145584610348565b91610348565b101561124c565b61147c61147761147260036110fe565b611281565b61128d565b90639dc29fac90339092803b15611646576114ab600080946114b661149f6101e3565b9788968795869461117d565b8452600484016112a9565b03925af1801561164157611614575b506114d060006112d0565b5b806114ed6114e76114e26006610894565b610348565b91610348565b101561160f5761151d600061151761151061150a600686906108a3565b906102c8565b6005610f3d565b01610ff9565b90611566602061153461152f85611117565b611123565b6370a082319061155b611546306112fb565b9261154f6101e3565b9586948593849361117d565b8352600483016102fd565b03915afa801561160a576115d7936115b36115b8926115d2946000916115dc575b506115ac6115a66115a161159c8c8a90611307565b611327565b610348565b91610348565b10156113b5565b611117565b336115cc6115c7888690611307565b611327565b91613819565b6112ec565b6114d1565b6115fd915060203d8111611603575b6115f58183611154565b810190611192565b38611587565b503d6115eb565b6111b1565b509050565b6116349060003d811161163a575b61162c8183611154565b810190611299565b386114c5565b503d611622565b6111b1565b61112f565b61166c915060203d8111611672575b6116648183611154565b810190611192565b38611448565b503d61165a565b6111b1565b905090565b60207f6967682e20546f74616c2076616c75653a200000000000000000000000000000917f5661756c74436f72653a20707269636520646576696174696f6e20746f6f206860008201520152565b6116dd6032809261167e565b6116e681611683565b0190565b5190565b60005b838110611702575050906000910152565b8060209183015181850152016116f1565b61173861172f92602092611726816116ea565b9485809361167e565b938491016116ee565b0190565b60007f2c204d696e696d756d2072657175697265643a20000000000000000000000000910152565b6117706014809261167e565b6117798161173c565b0190565b6117976117a2939261179161179c936116d1565b90611713565b611764565b90611713565b90565b90565b6117c76117d06020936117d5936117be816116ea565b938480936111c2565b958691016116ee565b611134565b0190565b6117ef91602082019160008184039101526117a8565b90565b156117fa5750565b61181b906118066101e3565b91829162461bcd60e51b8352600483016117d9565b0390fd5b6118289061269a565b92909261183560006112d0565b5b8061185261184c6118476006610894565b610348565b91610348565b10156118aa576118a5906118a061187c611877611871600685906108a3565b906102c8565b611117565b33611886306112fb565b9061189a6118958b8790611307565b611327565b92613897565b6112ec565b611836565b509161191191935061190b836118c86118c284610348565b91610348565b11916119066118df6118d987613990565b92613990565b916118f76118eb6101e3565b9384926020840161177d565b60208201810382520382611154565b6117a5565b906117f2565b61192b61192661192160036110fe565b611281565b61128d565b906340c10f1990339092803b156119a95761195a6000809461196561194e6101e3565b9788968795869461117d565b8452600484016112a9565b03925af180156119a457611977575b50565b6119979060003d811161199d575b61198f8183611154565b810190611299565b38611974565b503d611985565b6111b1565b61112f565b606090565b906119c66119bf6101e3565b9283611154565b565b67ffffffffffffffff81116119e05760208091020190565b61113e565b906119f76119f2836119c8565b6119b3565b918252565b369037565b90611a26611a0e836119e5565b92602080611a1c86936119c8565b92019103906119fc565b565b90611a328261047e565b811015611a43576020809102010190565b61087e565b90611a5290610491565b9052565b611a5e6119ae565b50611a71611a6c6006610894565b611a01565b611a7b60006112d0565b5b80611a98611a92611a8d6006610894565b610348565b91610348565b1015611aec57611ae790611ae2611ad06000611aca6005611ac4611abe600688906108a3565b906102c8565b90610f3d565b01610fd2565b611add8591849092611a28565b611a48565b6112ec565b611a7c565b5090565b91611b05969492959391909192939495613cf3565b565b60207f74696f6e00000000000000000000000000000000000000000000000000000000917f4f6e6c7920676f7665726e6f722063616e2063616c6c20746869732066756e6360008201520152565b611b6260246040926111c2565b611b6b81611b07565b0190565b611b859060208101906000818303910152611b55565b90565b15611b8f57565b611b976101e3565b62461bcd60e51b815280611bad60048201611b6f565b0390fd5b611bdf90611bda33611bd4611bce611bc960026110fe565b610203565b91610203565b14611b88565b611df3565b565b60007f4173736574206973206e6f7420737570706f7274656400000000000000000000910152565b611c1660166020926111c2565b611c1f81611be1565b0190565b611c399060208101906000818303910152611c09565b90565b15611c4357565b611c4b6101e3565b62461bcd60e51b815280611c6160048201611c23565b0390fd5b611c79611c74611c7e926112cd565b610252565b610491565b90565b60001b90565b90611c9360ff91611c81565b9181191691161790565b611ca690610941565b90565b90565b90611cc1611cbc611cc892611c9d565b611ca9565b8254611c87565b9055565b634e487b7160e01b600052601160045260246000fd5b611cf1611cf791939293610348565b92610348565b8203918211611d0257565b611ccc565b1b90565b91906008611d2b910291611d2560018060a01b0384611d07565b92611d07565b9181191691161790565b90565b9190611d4e611d49611d569361027d565b611d35565b908354611d0b565b9055565b90565b634e487b7160e01b600052603160045260246000fd5b5490565b600052602060002090565b611d8b81611d73565b821015611da657611d9d600191611d77565b91020190600090565b61087e565b600090565b611dc291611dbc611dab565b91611d38565b565b611dcd81611d73565b8015611dee576001900390611deb611de58383611d82565b90611db0565b55565b611d5d565b611e12611e0d6000611e0760058590610f3d565b01610f75565b611c3c565b611e3d81611e2d6000611e2760058690610f3d565b01610fd2565b611e376000611c65565b916143bc565b611e55600080611e4f60058590610f3d565b01611cac565b611e5f60006112d0565b5b80611e7c611e76611e716006610894565b610348565b91610348565b1015611f5757611e97611e91600683906108a3565b906102c8565b611ea9611ea384610203565b91610203565b14611ebc57611eb7906112ec565b611e60565b611f0290611efc611ef4611eee6006611ee8611ed86006610894565b611ee26001610bae565b90611ce2565b906108a3565b906102c8565b9160066108a3565b90611d38565b611f14611f0f6006611d5a565b611dc4565b5b611f3f7f37803e2125c48ee96c38ddf04e826daf335b0e1603579040fd275aba6d06b6fc9161027d565b90611f486101e3565b80611f528161038e565b0390a2565b50611f15565b611f6690611bb1565b565b606090565b67ffffffffffffffff8111611f855760208091020190565b61113e565b90611f9c611f9783611f6d565b6119b3565b918252565b369037565b90611fcb611fb383611f8a565b92602080611fc18693611f6d565b9201910390611fa1565b565b611fd690610255565b90565b611fe290611fcd565b90565b611fee90610271565b90565b90505190611ffe82610ca7565b565b9060208282031261201a5761201791600001611ff1565b90565b6101ee565b90565b61203661203161203b9261201f565b610252565b610348565b90565b61204790610953565b604d811161205557600a0a90565b611ccc565b61206390610255565b90565b61206f9061205a565b90565b61207b90610271565b90565b9061208890610348565b9052565b612094611f68565b5061209f6006610894565b6120a881611fa6565b916120b360006112d0565b5b806120c76120c185610348565b91610348565b10156122425761213a906120e66120e0600683906108a3565b906102c8565b602061212461211f6121196000612113600561210d61210760068b906108a3565b906102c8565b90610f3d565b01610ff9565b93611fd9565b611fe5565b63313ce567906121326101e3565b95869261117d565b8252818061214a6004820161038e565b03915afa90811561223d5761217e6121796121736020946121a597600091612210575b5061203e565b92612066565b612072565b61219a63c6e6f59261218e6101e3565b9687948593849361117d565b835260048301610b60565b03915afa91821561220b576121d8926121d3916000916121dd575b506121ce8791849092611307565b61207e565b6112ec565b6120b4565b6121fe915060203d8111612204575b6121f68183611154565b810190611192565b386121c0565b503d6121ec565b6111b1565b6122309150863d8111612236575b6122288183611154565b810190612000565b3861216d565b503d61221e565b6111b1565b5091905090565b612277906122723361226c61226661226160026110fe565b610203565b91610203565b14611b88565b6122b4565b565b9061228a60018060a01b0391611c81565b9181191691161790565b906122a96122a46122b09261027d565b611d35565b8254612279565b9055565b6122bf816004612294565b6122e97fb12580e226e25bbb446909adeb7b42f7dd51fc77e9b58f14f321016cbd68c16a9161027d565b906122f26101e3565b806122fc8161038e565b0390a2565b61230a90612249565b565b606090565b67ffffffffffffffff81116123295760208091020190565b61113e565b9061234061233b83612311565b6119b3565b918252565b61234f60806119b3565b90565b600090565b600090565b600090565b600090565b61236e612345565b9060208080808561237d612352565b815201612388612357565b81520161239361235c565b81520161239e612361565b81525050565b6123ac612366565b90565b60005b8281106123be57505050565b6020906123c96123a4565b81840152016123b2565b906123f86123e08361232e565b926020806123ee8693612311565b92019103906123af565b565b906124048261092e565b811015612415576020809102010190565b61087e565b9061242490610941565b9052565b9061243290610953565b9052565b9061244090610203565b9052565b906124a96124a06000612455612345565b9461246c612464838301610f75565b83880161241a565b61248361247a838301610fa2565b60208801612428565b61249a612491838301610fd2565b60408801611a48565b01610ff9565b60608401612436565b565b6124b490612444565b90565b6124bf61230c565b506124d26124cd6006610894565b6123d3565b6124dc60006112d0565b5b806124f96124f36124ee6006610894565b610348565b91610348565b101561254d5761254890612541612526600561252061251a600686906108a3565b906102c8565b90610f3d565b8461253184926124ab565b61253b83836123fa565b526123fa565b51506112ec565b6124dd565b5090565b906125809161257b3361257561256f61256a60026110fe565b610203565b91610203565b14611b88565b612582565b565b61259161259692916009610289565b612294565b565b906125a291612551565b565b600090565b6125b290610255565b90565b6125be906125a9565b90565b6125ca90610271565b90565b90565b6125e46125df6125e9926125cd565b610252565b610348565b90565b6126006125fb61260592610491565b610252565b610348565b90565b61261761261d91939293610348565b92610348565b91612629838202610348565b92818404149015171561263857565b611ccc565b61264c61265291939293610348565b92610348565b820180921161265d57565b611ccc565b634e487b7160e01b600052601260045260246000fd5b61268461268a91610348565b91610348565b908115612695570490565b612662565b6126a2611f68565b506126ab6125a4565b506126b66006610894565b916126c083611fa6565b926126ca81611fa6565b906126d560006112d0565b926126e060006112d0565b935b846126f56126ef85610348565b91610348565b10156128555761275b9061271461270e600688906108a3565b906102c8565b90602061273161272c61272760046110fe565b6125b5565b6125c1565b63aea910789061275085926127446101e3565b9788948593849361117d565b8352600483016102fd565b03915afa8015612850576127c26127ed936127d4926127f396600091612822575b509081612799612793670de0b6b3a76400006125d0565b91610348565b116127f9575b6127b860006127b26127bd936005610f3d565b01610fd2565b6125ec565b612608565b6127cf8b918a9092611307565b61207e565b6127e76127e28a8990611307565b611327565b9061263d565b946112ec565b936126e2565b90506127bd6127b860006127b2612817670de0b6b3a76400006125d0565b94935050505061279f565b612843915060203d8111612849575b61283b8183611154565b810190611192565b3861277c565b503d612831565b6111b1565b9295919490935061286660006112d0565b9361287160006112d0565b945b8561288661288089610348565b91610348565b10156129bc576128e7612925916128ce6128bc6128b5876128af6128aa8d8c611307565b611327565b90612608565b8990612678565b6128c98c918b9092611307565b61207e565b6128e16128dc8b8a90611307565b611327565b9061263d565b95602061290f61290a6129056128ff600686906108a3565b906102c8565b611fd9565b611fe5565b63313ce5679061291d6101e3565b94859261117d565b825281806129356004820161038e565b03915afa80156129b75761296c61297e9161298394600091612989575b506129666129618d8690611307565b611327565b90614495565b6129798b91849092611307565b61207e565b6112ec565b94612873565b6129aa915060203d81116129b0575b6129a28183611154565b810190612000565b38612952565b503d612998565b6111b1565b96945094505050509190565b6129ed336129e76129e16129dc60026110fe565b610203565b91610203565b14611b88565b6129f56129f7565b565b6129ff61454c565b565b612a096129c8565b565b90612a3c939291612a3733612a31612a2b612a2660026110fe565b610203565b91610203565b14611b88565b612b06565b565b60081b90565b90612a5161ff0091612a3e565b9181191691161790565b612a6f612a6a612a7492610953565b610252565b610953565b90565b90565b90612a8f612a8a612a9692612a5b565b612a77565b8254612a44565b9055565b60301b90565b90612ab86601000000000000600160d01b0391612a9a565b9181191691161790565b90612ad7612ad2612ade9261027d565b611d35565b8254612aa0565b9055565b916020612b04929493612afd60408201966000830190611053565b0190611060565b565b909192612b7a90612b2c612b276000612b2160058790610f3d565b01610f75565b611c3c565b612b4e83612b476000612b4160058890610f3d565b01610fd2565b87916143bc565b612b66846000612b6060058790610f3d565b01612a7a565b6000612b7460058590610f3d565b01612ac2565b9091612ba67fd19afa6a62432ff0578526c79ab25d5e83049cfd7c7dade58cb858714dc0df039261027d565b92612bbb612bb26101e3565b92839283612ae2565b0390a2565b90612bcc939291612a0b565b565b90612bff939291612bfa33612bf4612bee612be960026110fe565b610203565b91610203565b14611b88565b612cba565b565b60007f417373657420697320616c726561647920737570706f72746564000000000000910152565b612c36601a6020926111c2565b612c3f81612c01565b0190565b612c599060208101906000818303910152612c29565b90565b15612c6357565b612c6b6101e3565b62461bcd60e51b815280612c8160048201612c43565b0390fd5b9081549168010000000000000000831015612cb55782612cad916001612cb395018155611d82565b90611d38565b565b61113e565b909192612d4590612ce9612ce4612cde6000612cd860058890610f3d565b01610f75565b15610941565b612c5c565b612d0083600090612cfa8892611c65565b906143bc565b612d1960016000612d1360058790610f3d565b01611cac565b612d31846000612d2b60058790610f3d565b01612a7a565b6000612d3f60058590610f3d565b01612ac2565b612d59612d526006611d5a565b8290612c85565b9091612d857f62bd751f51149024e62ea3228318ca127fd1c35241bf764fba1e4b27d255e9309261027d565b92612d9a612d916101e3565b92839283612ae2565b0390a2565b90612dab939291612bce565b565b612ddb90612dd633612dd0612dca612dc560026110fe565b610203565b91610203565b14611b88565b612ddd565b565b612de8816003612294565b612e127f81b85e876e8723f9d61f238308ea004b759aee15ab163f6bd9b2cde9b20cc6189161027d565b90612e1b6101e3565b80612e258161038e565b0390a2565b612e3390612dad565b565b90612e6491612e5f33612e59612e53612e4e60026110fe565b610203565b91610203565b14611b88565b612ebc565b565b90612e7360001991611c81565b9181191691161790565b612e91612e8c612e9692610348565b610252565b610348565b90565b90565b90612eb1612eac612eb892612e7d565b612e99565b8254612e66565b9055565b612ecb612ed092916008610e39565b612e9c565b565b90612edc91612e35565b565b612eea612eef91610f82565b610f5b565b90565b612efc9054612ede565b90565b612f0b612f1091610f55565b610f88565b90565b612f1d9054612eff565b90565b612f34612f2f612f3992610bab565b610252565b610953565b90565b612f4590610271565b90565b60207f647920696e697469616c697a6564000000000000000000000000000000000000917f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201520152565b612fa3602e6040926111c2565b612fac81612f48565b0190565b612fc69060208101906000818303910152612f96565b90565b15612fd057565b612fd86101e3565b62461bcd60e51b815280612fee60048201612fb0565b0390fd5b9061300761300261300e92612a5b565b612a77565b8254611c87565b9055565b9061302761302261302e92611c9d565b611ca9565b8254612a44565b9055565b61303b90612f20565b9052565b919061305390600060208501940190613032565b565b6130a261306b6130656000612ef2565b15610941565b918280613154575b8015613105575b61308390612fc9565b6130976130906001612f20565b6000612ff2565b826130f4575b613224565b6130a9575b565b6130b4600080613012565b60016130ec7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498916130e36101e3565b9182918261303f565b0390a16130a7565b61310060016000613012565b61309d565b5061312061311a61311530612f3c565b6147dd565b15610941565b8061312b575b61307a565b506130836131396000612f13565b61314c6131466001612f20565b91610953565b149050613126565b5061315f6000612f13565b61317261316c6001612f20565b91610953565b10613073565b61318c613187613191926112cd565b610252565b6101f8565b90565b61319d90613178565b90565b60007f476f7665726e6f722063616e6e6f74206265207a65726f206164647265737300910152565b6131d5601f6020926111c2565b6131de816131a0565b0190565b6131f890602081019060008183039101526131c8565b90565b1561320257565b61320a6101e3565b62461bcd60e51b815280613220600482016131e2565b0390fd5b6132559061324e8161324761324161323c6000613194565b610203565b91610203565b14156131fb565b6002612294565b565b61326090613055565b565b61326e61327391610f55565b610b1a565b90565b6132809054613262565b90565b9061328c611f68565b5061329f61329a6006610894565b611fa6565b916132aa60006112d0565b5b806132c76132c16132bc6006610894565b610348565b91610348565b10156134ff576132e26132dc600683906108a3565b906102c8565b906132fa60006132f460058590610f3d565b01610ff9565b6133366133268561332061331b600061331560058a90610f3d565b01610fd2565b6125ec565b90612608565b6133306001613276565b90612678565b90613380602061335661335161334c60046110fe565b6125b5565b6125c1565b63aea910789061337588926133696101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9485156134fa5761340760209461340161340d9361343999613412966000916134cd575b5090816133c56133bf670de0b6b3a76400006125d0565b91610348565b106134a4575b6133e460006133de6133fc936005610f3d565b01610fa2565b936133f6670de0b6b3a76400006125d0565b90612608565b612678565b90614495565b92612066565b612072565b61342e63c6e6f5926134226101e3565b9687948593849361117d565b835260048301610b60565b03915afa91821561349f5761346c9261346791600091613471575b506134628791849092611307565b61207e565b6112ec565b6132ab565b613492915060203d8111613498575b61348a8183611154565b810190611192565b38613454565b503d613480565b6111b1565b90506133fc6133e460006133de6134c2670de0b6b3a76400006125d0565b9493505050506133cb565b6134ed9150893d81116134f3575b6134e58183611154565b810190611192565b386133a8565b503d6134db565b6111b1565b5050565b61350b6125a4565b5061351660006112d0565b9061352160006112d0565b915b8261353f6135396135346006610894565b610348565b91610348565b10156137eb5761355a613554600685906108a3565b906102c8565b6135a2602061357061356b84611117565b611123565b6370a0823190613597613582306112fb565b9261358b6101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9081156137e6576000916137b8575b50916135ce60006135c860058590610f3d565b01610ff9565b61361660206135e46135df84611117565b611123565b6370a082319061360b6135f6306112fb565b926135ff6101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9182156137b35761364261363d61366994602094600091613786575b5092612066565b612072565b61365e6307a2d13a6136526101e3565b9586948593849361117d565b835260048301610b60565b03915afa908115613781576136d09460209261368e92600091613754575b509061263d565b926136a96136a461369f60046110fe565b6125b5565b6125c1565b6136c563aea910786136b96101e3565b9788948593849361117d565b8352600483016102fd565b03915afa801561374f576136f86137159361370f9261371b96600091613721575b5090612608565b613709670de0b6b3a76400006125d0565b90612678565b9061263d565b926112ec565b91613523565b613742915060203d8111613748575b61373a8183611154565b810190611192565b386136f1565b503d613730565b6111b1565b6137749150843d811161377a575b61376c8183611154565b810190611192565b38613687565b503d613762565b6111b1565b6137a69150853d81116137ac575b61379e8183611154565b810190611192565b38613636565b503d613794565b6111b1565b6137d9915060203d81116137df575b6137d18183611154565b810190611192565b386135b5565b503d6137c7565b6111b1565b90915090565b63ffffffff60e01b1690565b61381161380c61381692610491565b61117d565b6137f1565b90565b9161385d60049261384e613862959361383563a9059cbb6137fd565b9261383e6101e3565b96879460208601908152016112a9565b60208201810382520383611154565b61493b565b565b60409061388e6138959496959396613884606084019860008501906102f0565b60208301906102f0565b0190610b53565b565b6138e493916138d06004946138df93946138b46323b872dd6137fd565b939190916138c06101e3565b9788956020870190815201613864565b60208201810382520383611154565b61493b565b565b606090565b906138f69101610348565b90565b67ffffffffffffffff811161391757613913602091611134565b0190565b61113e565b9061392e613929836138f9565b6119b3565b918252565b369037565b9061395d6139458361391c565b9260208061395386936138f9565b9201910390613933565b565b600161396b9103610348565b90565b61397a61398091610348565b91610348565b90811561398b570490565b612662565b6139986138e6565b506139b56139a582614afd565b6139af6001610bae565b906138eb565b906139bf82613938565b916139c86125a4565b5060200182015b600115613a33576139e2613a0e9161395f565b916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353613a08600a612022565b9061396e565b80613a22613a1c60006112d0565b91610348565b14613a2d57906139cf565b50505b90565b5050613a30565b60007f416d6f756e74206d7573742062652067726561746572207468616e2030000000910152565b613a6f601d6020926111c2565b613a7881613a3a565b0190565b613a929060208101906000818303910152613a62565b90565b15613a9c57565b613aa46101e3565b62461bcd60e51b815280613aba60048201613a7c565b0390fd5b5090565b60007f496e76616c696420726f757465722064617461206c656e677468000000000000910152565b613af7601a6020926111c2565b613b0081613ac2565b0190565b613b1a9060208101906000818303910152613aea565b90565b15613b2457565b613b2c6101e3565b62461bcd60e51b815280613b4260048201613b04565b0390fd5b9190811015613b56576020020190565b61087e565b35613b658161020f565b90565b600080fd5b600080fd5b600080fd5b903590600160200381360303821215613bb9570180359067ffffffffffffffff8211613bb457602001916001820236038313613baf57565b613b72565b613b6d565b613b68565b90821015613bd9576020613bd59202810190613b77565b9091565b61087e565b613c14613c1b94613c0a606094989795613c00608086019a60008701906102f0565b60208501906102f0565b60408301906102f0565b0190610b53565b565b613c279051610491565b90565b90565b613c41613c3c613c4692613c2a565b610252565b610348565b90565b60207f64207765696768747320746f6f20686967680000000000000000000000000000917f5661756c74436f72653a20646576696174696f6e2066726f6d2064657369726560008201520152565b613ca460326040926111c2565b613cad81613c49565b0190565b613cc79060208101906000818303910152613c97565b90565b15613cd157565b613cd96101e3565b62461bcd60e51b815280613cef60048201613cb1565b0390fd5b9496939195608052613d1a613d156000613d0f60058990610f3d565b01610f75565b611c3c565b613d3781613d31613d2b60006112d0565b91610348565b11613a95565b613d68613d478860805190613abe565b613d62613d5c613d576006610894565b610348565b91610348565b14613b1d565b613d726001613276565b92613d7d60006112d0565b94613d886006610894565b97613d9360006112d0565b965b87613da8613da28c610348565b91610348565b101561422d57613dc3613dbd60068a906108a3565b906102c8565b80613dd6613dd08c610203565b91610203565b141560001461416857613e3c91613df7613df260058490610f3d565b6124ab565b6020613e0a613e0585611117565b611123565b6370a0823190613e31613e1c306112fb565b92613e256101e3565b9889948593849361117d565b8352600483016102fd565b03915afa801561416357613e9994600091614135575b506020613e6f613e6a613e6560046110fe565b6125b5565b6125c1565b63aea9107890613e8e8792613e826101e3565b998a948593849361117d565b8352600483016102fd565b03915afa8015614130578f95600091614102575b50948c8b8a88613ecd613ec7670de0b6b3a76400006125d0565b91610348565b116140d2575b91613ef0613eeb613efc93613f029695908491613b46565b613b5b565b92906080519091613bbe565b91614e5e565b613f4a6020613f18613f1387611117565b611123565b6370a0823190613f3f613f2a306112fb565b92613f336101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9081156140cd5760009161409f575b5090613f6891611ce2565b928c90888d8c613f7792613b46565b613f8090613b5b565b9085927fa502e3bc10e47f200a18c57c70f77788429a03d25cf6cd06b06171bf2415855793613fad6101e3565b938493613fba9385613bde565b0390a18790604001613fcb90613c1d565b613fd4906125ec565b613fdd91612608565b89613fe791612678565b8083613ff290610348565b90613ffc90610348565b116000146140869461407f9461405d61403e614079956140629561408c57614039614028828690611ce2565b5b6140336064613c2d565b90612608565b612678565b61405761405161404c610bca565b610348565b91610348565b10613cca565b612608565b614073670de0b6b3a76400006125d0565b90612678565b9061263d565b975b6112ec565b96613d95565b61403961409a858390611ce2565b614029565b6140c0915060203d81116140c6575b6140b88183611154565b810190611192565b38613f5d565b503d6140ae565b6111b1565b9750613f029291613ef0613eeb613efc936140f4670de0b6b3a76400006125d0565b9b9395965093505050613ed3565b614123915060203d8111614129575b61411b8183611154565b810190611192565b38613ead565b503d614111565b6111b1565b614156915060203d811161415c575b61414e8183611154565b810190611192565b38613e52565b503d614144565b6111b1565b60206141af9161418861418361417e60046110fe565b6125b5565b6125c1565b6141a463aea910786141986101e3565b9586948593849361117d565b8352600483016102fd565b03915afa918215614228576141ee6141d7614086946141f4946000916141fa575b5089612608565b6141e8670de0b6b3a76400006125d0565b90612678565b9061263d565b97614081565b61421b915060203d8111614221575b6142138183611154565b810190611192565b386141d0565b503d614209565b6111b1565b9850955097505050505061429b91506142958361425261424c84610348565b91610348565b119161429061426961426387613990565b92613990565b916142816142756101e3565b9384926020840161177d565b60208201810382520382611154565b6117a5565b906117f2565b6142b56142b06142ab60036110fe565b611281565b61128d565b906340c10f1990339092803b15614333576142e4600080946142ef6142d86101e3565b9788968795869461117d565b8452600484016112a9565b03925af1801561432e57614301575b50565b6143219060003d8111614327575b6143198183611154565b810190611299565b386142fe565b503d61430f565b6111b1565b61112f565b60101b90565b9061434f65ffffffff000091614338565b9181191691161790565b61436d61436861437292610491565b610252565b610491565b90565b90565b9061438d61438861439492614359565b614375565b825461433e565b9055565b9160206143ba9294936143b360408201966000830190611060565b0190611060565b565b6143f46143ed6143de6143cf6001613276565b6143d8876125ec565b9061263d565b6143e7856125ec565b90611ce2565b6001612e9c565b61440c83600061440660058590610f3d565b01614378565b90916144387ffe53ad22d287601d2ed917d8aedf4a9bf6f948833c8b55fbc07d8a4e1cdd77899261027d565b9261444d6144446101e3565b92839283614398565b0390a2565b90565b61446961446461446e92614452565b610252565b610953565b90565b61447d61448391610953565b91610953565b90039060ff821161449057565b611ccc565b61449d6125a4565b50806144b26144ac6012614455565b91610953565b106000146144e2576144d96144d46144df93926144cf6012614455565b614471565b61203e565b90612678565b90565b806144f66144f06012614455565b91610953565b116144ff575090565b61451f61451a61452593926145146012614455565b90614471565b61203e565b90612608565b90565b61453190610255565b90565b61453d90614528565b90565b61454990610271565b90565b6145566006610894565b9061456160006112d0565b5b8061457561456f85610348565b91610348565b10156147d35761459861459361458d600684906108a3565b906102c8565b611117565b906145d960206145a784611123565b6370a08231906145ce6145b9306112fb565b926145c26101e3565b9586948593849361117d565b8352600483016102fd565b03915afa9081156147ce576000916147a0575b5061460961460460086145fe86611123565b90610e39565b613276565b908061461d61461784610348565b91610348565b10614794579061462c91611ce2565b614648614643600961463d86611123565b90610289565b6110fe565b908161466561465f61465a6000613194565b610203565b91610203565b141580614779575b614684575b505061467f91505b6112ec565b614562565b6146a961469083614534565b6146a48661469d83614540565b8591613819565b614540565b9363b6b55f2582863b15614774576146e1966146d6600080946146ca6101e3565b9a8b958694859361117d565b835260048301610b60565b03925af190811561476f5761467f956146ff92614742575b50611123565b9190916147387f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9361472f6101e3565b93849384613864565b0390a13880614672565b6147629060003d8111614768575b61475a8183611154565b810190611299565b386146f9565b503d614750565b6111b1565b61112f565b508061478e61478860006112d0565b91610348565b1161466d565b505061467f915061467a565b6147c1915060203d81116147c7575b6147b98183611154565b810190611192565b386145ec565b503d6147af565b6111b1565b509050565b600090565b6147e56147d8565b503b6147fa6147f460006112d0565b91610348565b1190565b60007f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b614830602061391c565b9061483d602083016147fe565b565b614847614826565b90565b5190565b61485781610941565b0361485e57565b600080fd5b905051906148708261484e565b565b9060208282031261488c5761488991600001614863565b90565b6101ee565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201520152565b6148ec602a6040926111c2565b6148f581614891565b0190565b61490f90602081019060008183039101526148df565b90565b1561491957565b6149216101e3565b62461bcd60e51b815280614937600482016148f9565b0390fd5b6149859161494b61495a92611123565b9061495461483f565b91614f0c565b6149638161484a565b61497661497060006112d0565b91610348565b14908115614987575b50614912565b565b6149a2915060206149978261484a565b818301019101614872565b3861497f565b90565b6149bf6149ba6149c4926149a8565b610252565b610348565b90565b90565b6149de6149d96149e3926149c7565b610252565b610348565b90565b90565b6149fd6149f8614a02926149e6565b610252565b610348565b90565b90565b614a1c614a17614a2192614a05565b610252565b610348565b90565b90565b614a3b614a36614a4092614a24565b610252565b610348565b90565b90565b614a5a614a55614a5f92614a43565b610252565b610348565b90565b90565b614a79614a74614a7e92614a62565b610252565b610348565b90565b90565b614a98614a93614a9d92614a81565b610252565b610348565b90565b90565b614ab7614ab2614abc92614aa0565b610252565b610348565b90565b90565b614ad6614ad1614adb92614abf565b610252565b610348565b90565b90565b614af5614af0614afa92614ade565b610252565b610348565b90565b614b056125a4565b50614b1060006112d0565b9080614b3f614b397a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000006149ab565b91610348565b1015614d17575b80614b67614b616d04ee2d6d415b85acef81000000006149e9565b91610348565b1015614cdc575b80614b88614b82662386f26fc10000614a27565b91610348565b1015614ca8575b80614ba6614ba06305f5e100614a65565b91610348565b1015614c77575b80614bc2614bbc612710614aa3565b91610348565b1015614c48575b80614bdd614bd76064613c2d565b91610348565b1015614c1a575b614bf7614bf1600a612022565b91610348565b1015614c01575b90565b614c1590614c0f6001610bae565b906138eb565b614bfe565b614c31614c4291614c2b6064613c2d565b9061396e565b91614c3c6002614ae1565b906138eb565b90614be4565b614c60614c7191614c5a612710614aa3565b9061396e565b91614c6b6004614ac2565b906138eb565b90614bc9565b614c91614ca291614c8b6305f5e100614a65565b9061396e565b91614c9c6008614a84565b906138eb565b90614bad565b614cc5614cd691614cbf662386f26fc10000614a27565b9061396e565b91614cd06010614a46565b906138eb565b90614b8f565b614d00614d1191614cfa6d04ee2d6d415b85acef81000000006149e9565b9061396e565b91614d0b6020614a08565b906138eb565b90614b6e565b614d48614d5991614d427a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000006149ab565b9061396e565b91614d5360406149ca565b906138eb565b90614b46565b905090565b90826000939282370152565b909182614d8081614d8793614d5f565b8093614d64565b0190565b9091614d9692614d70565b90565b67ffffffffffffffff8111614db757614db3602091611134565b0190565b61113e565b90614dce614dc983614d99565b6119b3565b918252565b606090565b3d600014614df557614de93d614dbc565b903d6000602084013e5b565b614dfd614dd3565b90614df3565b60007f556e6b6e6f776e20726561736f6e000000000000000000000000000000000000910152565b614e38600e6020926111c2565b614e4181614e03565b0190565b614e5b9060208101906000818303910152614e2b565b90565b9060009283809392614e7a614e716101e3565b93849283614d8b565b03925af1614e90614e89614dd8565b9115610941565b614e975750565b614ea08161484a565b614eb3614ead60006112d0565b91610348565b11600014614ee957614ec7614ee5916117a5565b614ecf6101e3565b918291634ecb9b6d60e01b8352600483016117d9565b0390fd5b614ef16101e3565b634ecb9b6d60e01b815280614f0860048201614e45565b0390fd5b90614f2c9291614f1a614dd3565b5090614f2660006112d0565b91614fe5565b90565b614f3890610271565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201520152565b614f9660266040926111c2565b614f9f81614f3b565b0190565b614fb99060208101906000818303910152614f89565b90565b15614fc357565b614fcb6101e3565b62461bcd60e51b815280614fe160048201614fa3565b0390fd5b916000809161503c9593614ff7614dd3565b5061501e61500430614f2f565b3161501761501185610348565b91610348565b1015614fbc565b8591602082019151925af191615032614dd8565b90929091926150c3565b90565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b615074601d6020926111c2565b61507d8161503f565b0190565b6150979060208101906000818303910152615067565b90565b156150a157565b6150a96101e3565b62461bcd60e51b8152806150bf60048201615081565b0390fd5b9192906150ce614dd3565b5060001461511457506150e08261484a565b6150f36150ed60006112d0565b91610348565b146150fd575b5090565b61510961510e916147dd565b61509a565b386150f9565b829061511f8261484a565b61513261512c60006112d0565b91610348565b116000146151435750805190602001fd5b6151649061514f6101e3565b91829162461bcd60e51b8352600483016117d9565b0390fdfea2646970667358221220f48e3ff4792d42e1aefb204e6eb9e9d96897496b8a01ee538c9ce50feee16e7564736f6c634300081b0033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"string","name":"reason","type":"string"}],"name":"SwapFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint8","name":"decimals","type":"uint8"},{"indexed":false,"internalType":"uint32","name":"weight","type":"uint32"}],"name":"AssetAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AssetAllocated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint8","name":"decimals","type":"uint8"},{"indexed":false,"internalType":"uint32","name":"weight","type":"uint32"}],"name":"AssetChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"}],"name":"AssetRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint32","name":"oldWeight","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"newWeight","type":"uint32"}],"name":"AssetWeightChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"bentoUSD","type":"address"}],"name":"BentoUSDUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"governor","type":"address"}],"name":"GovernorUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oracleRouter","type":"address"}],"name":"OracleRouterUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"inputAsset","type":"address"},{"indexed":false,"internalType":"address","name":"outputAsset","type":"address"},{"indexed":false,"internalType":"address","name":"router","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"SwapResult","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allAssets","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allocate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"assetToStrategy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"assets","outputs":[{"internalType":"bool","name":"isSupported","type":"bool"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint32","name":"weight","type":"uint32"},{"internalType":"address","name":"ltToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoUSD","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"uint32","name":"_weight","type":"uint32"},{"internalType":"address","name":"_ltToken","type":"address"}],"name":"changeAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"deviationTolerance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAssets","outputs":[{"components":[{"internalType":"bool","name":"isSupported","type":"bool"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint32","name":"weight","type":"uint32"},{"internalType":"address","name":"ltToken","type":"address"}],"internalType":"struct VaultStorage.Asset[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"desiredAmount","type":"uint256"}],"name":"getDepositAssetAmounts","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"inputAmount","type":"uint256"}],"name":"getOutputLTAmounts","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenToShareRatios","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWeights","outputs":[{"internalType":"uint32[]","name":"","type":"uint32[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"governor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_governor","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"ltTokenToAsset","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"minimalAmountInVault","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_minimumBentoUSDAmount","type":"uint256"},{"internalType":"address[]","name":"_routers","type":"address[]"},{"internalType":"bytes[]","name":"_routerData","type":"bytes[]"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_minimumBentoUSDAmount","type":"uint256"}],"name":"mintBasket","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"oracleRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"redeemLTBasket","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"}],"name":"removeAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"uint32","name":"_weight","type":"uint32"},{"internalType":"address","name":"_ltToken","type":"address"}],"name":"setAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_bentoUSD","type":"address"}],"name":"setBentoUSD","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setMinimalAmountInVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracleRouter","type":"address"}],"name":"setOracleRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"address","name":"_strategy","type":"address"}],"name":"setStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalWeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]}