{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.27\"},\"sources\":{\"contracts/BentoUSDPlus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ERC4626} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract BentoUSDPlus is ERC4626 {\\n    constructor(\\n        IERC20 asset_\\n    ) ERC4626(asset_) ERC20(\\\"BentoUSD+\\\", \\\"BentoUSD+\\\") {}\\n\\n    // Optional: Override _decimalsOffset if you want to test different decimal offsets\\n    function _decimalsOffset() internal view virtual override returns (uint8) {\\n        return 18 - IERC20Metadata(asset()).decimals();\\n    }\\n}\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/IERC4626.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0xB001e62bA3c8B4797aC1D6950d723b627737a92E","bytecode":"0x60c0604052346100565761001961001461012d565b6101d2565b61002161005b565b612c9761071f8239608051818181610b3501528181610e6301528181611dd80152611e8d015260a05181610e200152612c9790f35b610061565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061009090610066565b810190811060018060401b038211176100a857604052565b610070565b906100c06100b961005b565b9283610086565b565b600080fd5b60018060a01b031690565b6100db906100c7565b90565b6100e7906100d2565b90565b6100f3816100de565b036100fa57565b600080fd5b9050519061010c826100ea565b565b9060208282031261012857610125916000016100ff565b90565b6100c2565b61014b6133b680380380610140816100ad565b92833981019061010e565b90565b60018060401b03811161016a57610166602091610066565b0190565b610070565b9061018161017c8361014e565b6100ad565b918252565b60007f42656e746f5553442b0000000000000000000000000000000000000000000000910152565b6101b8600961016f565b906101c560208301610186565b565b6101cf6101ae565b90565b6101ec906101de6101c7565b6101e66101c7565b91610216565b565b90565b60ff1690565b90565b61020e610209610213926101ee565b6101f7565b6101f1565b90565b916102209161024a565b61022981610635565b9060001461023a575b60a052608052565b5061024560126101fa565b610232565b90610254916104b4565b565b5190565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610290575b602083101461028b57565b61025a565b91607f1691610280565b600052602060002090565b601f602091010490565b1b90565b919060086102cf9102916102c9600019846102af565b926102af565b9181191691161790565b90565b6102f06102eb6102f5926102d9565b6101f7565b6102d9565b90565b90565b919061031161030c610319936102dc565b6102f8565b9083546102b3565b9055565b600090565b6103349161032e61031d565b916102fb565b565b5b818110610342575050565b806103506000600193610322565b01610337565b9190601f8111610366575b505050565b6103726103979361029a565b90602061037e846102a5565b8301931061039f575b610390906102a5565b0190610336565b388080610361565b915061039081929050610387565b1c90565b906103c290600019906008026103ad565b191690565b816103d1916103b1565b906002021790565b906103e381610256565b9060018060401b0382116104a357610405826103ff8554610270565b85610356565b602090601f831160011461043a579180916104299360009261042e575b50506103c7565b90555b565b90915001513880610422565b601f198316916104498561029a565b9260005b81811061048b57509160029391856001969410610471575b5050500201905561042c565b610481910151601f8416906103b1565b9055388080610465565b9193602060018192878701518155019501920161044d565b610070565b906104b2916103d9565b565b906104c36104ca9260036104a8565b60046104a8565b565b600090565b600090565b6104ea6104e56104ef926100c7565b6101f7565b6100c7565b90565b6104fb906104d6565b90565b610507906104f2565b90565b60000190565b60018060401b03811161052c57610528602091610066565b0190565b610070565b9061054361053e83610510565b6100ad565b918252565b606090565b3d60001461056a5761055e3d610531565b903d6000602084013e5b565b610572610548565b90610568565b5190565b90565b61059361058e6105989261057c565b6101f7565b6102d9565b90565b6105a4816102d9565b036105ab57565b600080fd5b905051906105bd8261059b565b565b906020828203126105d9576105d6916000016105b0565b90565b6100c2565b6105f26105ed6105f7926101f1565b6101f7565b6102d9565b90565b61060e610609610613926102d9565b6101f7565b6101f1565b90565b90565b61062d61062861063292610616565b6101f7565b6101f1565b90565b600061065381926106446104cc565b5061064d6104d1565b506104fe565b600461068a63313ce56760e01b61067b61066b61005b565b938492602084019081520161050a565b60208201810382520382610086565b602081019051915afa61069b61054d565b90806106fa575b6106b8575b506000906106b56000610619565b90565b6106d29060206106c782610578565b8183010191016105bf565b806106e66106e060ff6105de565b916102d9565b116106a757906106f76001926105fa565b90565b5061070481610578565b610717610711602061057f565b916102d9565b10156106a256fe60806040526004361015610013575b610a51565b61001e6000356101cd565b806301e1d114146101c857806306fdde03146101c357806307a2d13a146101be578063095ea7b3146101b95780630a28a477146101b457806318160ddd146101af57806323b872dd146101aa578063313ce567146101a557806338d52e0f146101a0578063395093511461019b578063402d267d146101965780634cdad506146101915780636e553f651461018c57806370a082311461018757806394bf804d1461018257806395d89b411461017d578063a457c2d714610178578063a9059cbb14610173578063b3d7f6b91461016e578063b460af9414610169578063ba08765214610164578063c63d75b61461015f578063c6e6f5921461015a578063ce96cb7714610155578063d905777e14610150578063dd62ed3e1461014b5763ef8b30f70361000e57610a1c565b6109e6565b610983565b61094e565b610919565b6108e4565b6108ae565b610878565b610808565b6107d2565b61079c565b610767565b610731565b6106fc565b6106c6565b610663565b61062e565b6105d9565b6105a4565b61054c565b6104ed565b61047d565b610448565b610412565b61034c565b6102d4565b610219565b60e01c90565b60405190565b600080fd5b600080fd5b60009103126101ee57565b6101de565b90565b6101ff906101f3565b9052565b9190610217906000602085019401906101f6565b565b34610249576102293660046101e3565b610245610234610b22565b61023c6101d3565b91829182610203565b0390f35b6101d9565b5190565b60209181520190565b60005b83811061026f575050906000910152565b80602091830151818501520161025e565b601f801991011690565b6102a96102b26020936102b7936102a08161024e565b93848093610252565b9586910161025b565b610280565b0190565b6102d1916020820191600081840391015261028a565b90565b34610304576102e43660046101e3565b6103006102ef610cf8565b6102f76101d3565b918291826102bb565b0390f35b6101d9565b610312816101f3565b0361031957565b600080fd5b9050359061032b82610309565b565b90602082820312610347576103449160000161031e565b90565b6101de565b3461037c5761037861036761036236600461032d565b610d0e565b61036f6101d3565b91829182610203565b0390f35b6101d9565b60018060a01b031690565b61039590610381565b90565b6103a18161038c565b036103a857565b600080fd5b905035906103ba82610398565b565b91906040838203126103e557806103d96103e292600086016103ad565b9360200161031e565b90565b6101de565b151590565b6103f8906103ea565b9052565b9190610410906000602085019401906103ef565b565b346104435761043f61042e6104283660046103bc565b90610d2b565b6104366101d3565b918291826103fc565b0390f35b6101d9565b346104785761047461046361045e36600461032d565b610d4d565b61046b6101d3565b91829182610203565b0390f35b6101d9565b346104ad5761048d3660046101e3565b6104a9610498610d8f565b6104a06101d3565b91829182610203565b0390f35b6101d9565b90916060828403126104e8576104e56104ce84600085016103ad565b936104dc81602086016103ad565b9360400161031e565b90565b6101de565b3461051e5761051a6105096105033660046104b2565b91610da5565b6105116101d3565b918291826103fc565b0390f35b6101d9565b60ff1690565b61053290610523565b9052565b919061054a90600060208501940190610529565b565b3461057c5761055c3660046101e3565b610578610567610e12565b61056f6101d3565b91829182610536565b0390f35b6101d9565b61058a9061038c565b9052565b91906105a290600060208501940190610581565b565b346105d4576105b43660046101e3565b6105d06105bf610e55565b6105c76101d3565b9182918261058e565b0390f35b6101d9565b3461060a576106066105f56105ef3660046103bc565b90610eaf565b6105fd6101d3565b918291826103fc565b0390f35b6101d9565b9060208282031261062957610626916000016103ad565b90565b6101de565b3461065e5761065a61064961064436600461060f565b610ee4565b6106516101d3565b91829182610203565b0390f35b6101d9565b346106935761068f61067e61067936600461032d565b610ef4565b6106866101d3565b91829182610203565b0390f35b6101d9565b91906040838203126106c157806106b56106be926000860161031e565b936020016103ad565b90565b6101de565b346106f7576106f36106e26106dc366004610698565b90610f90565b6106ea6101d3565b91829182610203565b0390f35b6101d9565b3461072c5761072861071761071236600461060f565b611004565b61071f6101d3565b91829182610203565b0390f35b6101d9565b346107625761075e61074d610747366004610698565b906110a7565b6107556101d3565b91829182610203565b0390f35b6101d9565b34610797576107773660046101e3565b6107936107826110f8565b61078a6101d3565b918291826102bb565b0390f35b6101d9565b346107cd576107c96107b86107b23660046103bc565b906111c6565b6107c06101d3565b918291826103fc565b0390f35b6101d9565b34610803576107ff6107ee6107e83660046103bc565b9061121a565b6107f66101d3565b918291826103fc565b0390f35b6101d9565b346108385761083461082361081e36600461032d565b61123c565b61082b6101d3565b91829182610203565b0390f35b6101d9565b909160608284031261087357610870610859846000850161031e565b9361086781602086016103ad565b936040016103ad565b90565b6101de565b346108a9576108a561089461088e36600461083d565b916112d8565b61089c6101d3565b91829182610203565b0390f35b6101d9565b346108df576108db6108ca6108c436600461083d565b916113b0565b6108d26101d3565b91829182610203565b0390f35b6101d9565b34610914576109106108ff6108fa36600461060f565b611401565b6109076101d3565b91829182610203565b0390f35b6101d9565b346109495761094561093461092f36600461032d565b611411565b61093c6101d3565b91829182610203565b0390f35b6101d9565b3461097e5761097a61096961096436600461060f565b611429565b6109716101d3565b91829182610203565b0390f35b6101d9565b346109b3576109af61099e61099936600461060f565b611449565b6109a66101d3565b91829182610203565b0390f35b6101d9565b91906040838203126109e157806109d56109de92600086016103ad565b936020016103ad565b90565b6101de565b34610a1757610a13610a026109fc3660046109b8565b90611476565b610a0a6101d3565b91829182610203565b0390f35b6101d9565b34610a4c57610a48610a37610a3236600461032d565b61149e565b610a3f6101d3565b91829182610203565b0390f35b6101d9565b600080fd5b600090565b90565b610a72610a6d610a7792610381565b610a5b565b610381565b90565b610a8390610a5e565b90565b610a8f90610a7a565b90565b610a9b90610a7a565b90565b634e487b7160e01b600052604160045260246000fd5b90610abe90610280565b810190811067ffffffffffffffff821117610ad857604052565b610a9e565b60e01b90565b90505190610af082610309565b565b90602082820312610b0c57610b0991600001610ae3565b90565b6101de565b610b196101d3565b3d6000823e3d90fd5b610b2a610a56565b50610b8b6020610b597f0000000000000000000000000000000000000000000000000000000000000000610a86565b6370a0823190610b80610b6b30610a92565b92610b746101d3565b95869485938493610add565b83526004830161058e565b03915afa908115610bd057600091610ba2575b5090565b610bc3915060203d8111610bc9575b610bbb8183610ab4565b810190610af2565b38610b9e565b503d610bb1565b610b11565b606090565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610c10575b6020831014610c0b57565b610bda565b91607f1691610c00565b60209181520190565b600052602060002090565b9060009291805490610c49610c4283610bf0565b8094610c1a565b91600181169081600014610ca25750600114610c65575b505050565b610c729192939450610c23565b916000925b818410610c8a5750500190388080610c60565b60018160209295939554848601520191019290610c77565b92949550505060ff1916825215156020020190388080610c60565b90610cc791610c2e565b90565b90610cea610ce392610cda6101d3565b93848092610cbd565b0383610ab4565b565b610cf590610cca565b90565b610d00610bd5565b50610d0b6003610cec565b90565b610d2390610d1a610a56565b506000906114f1565b90565b600090565b610d4891610d37610d26565b50610d40611546565b91909161172e565b600190565b610d6290610d59610a56565b506001906117ec565b90565b60001c90565b90565b610d7a610d7f91610d65565b610d6b565b90565b610d8c9054610d6e565b90565b610d97610a56565b50610da26002610d82565b90565b91610dcf92610db2610d26565b50610dc7610dbe611546565b829084916118c5565b919091611b39565b600190565b600090565b634e487b7160e01b600052601160045260246000fd5b610dfb610e0191610523565b91610523565b019060ff8211610e0d57565b610dd9565b610e1a610dd4565b50610e4d7f0000000000000000000000000000000000000000000000000000000000000000610e47611cff565b90610def565b90565b600090565b610e5d610e50565b50610e877f0000000000000000000000000000000000000000000000000000000000000000610a86565b90565b610e99610e9f919392936101f3565b926101f3565b8201809211610eaa57565b610dd9565b610edf91610ebb610d26565b50610ed9610ec7611546565b91610ed483948094611476565b610e8a565b9161172e565b600190565b50610eed610a56565b5060001990565b610f0990610f00610a56565b506000906114f1565b90565b60007f455243343632363a206465706f736974206d6f7265207468616e206d61780000910152565b610f41601e602092610252565b610f4a81610f0c565b0190565b610f649060208101906000818303910152610f34565b90565b15610f6e57565b610f766101d3565b62461bcd60e51b815280610f8c60048201610f4e565b0390fd5b90610fdd90610f9d610a56565b50610fc383610fbc610fb6610fb185610ee4565b6101f3565b916101f3565b1115610f67565b610fcc8361149e565b92610fd5611546565b918492611dd3565b90565b610fe990610a7a565b90565b90610ff690610fe0565b600052602052604060002090565b61101b61102091611013610a56565b506000610fec565b610d82565b90565b60007f455243343632363a206d696e74206d6f7265207468616e206d61780000000000910152565b611058601b602092610252565b61106181611023565b0190565b61107b906020810190600081830391015261104b565b90565b1561108557565b61108d6101d3565b62461bcd60e51b8152806110a360048201611065565b0390fd5b906110f5906110b4610a56565b506110da836110d36110cd6110c885611401565b6101f3565b916101f3565b111561107e565b6110e38361123c565b926110ec611546565b91849192611dd3565b90565b611100610bd5565b5061110b6004610cec565b90565b60207f207a65726f000000000000000000000000000000000000000000000000000000917f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201520152565b6111696025604092610252565b6111728161110e565b0190565b61118c906020810190600081830391015261115c565b90565b1561119657565b61119e6101d3565b62461bcd60e51b8152806111b460048201611176565b0390fd5b906111c391036101f3565b90565b611215916111d2610d26565b5061120f6111de611546565b916111ea838590611476565b92611208846112016111fb856101f3565b916101f3565b101561118f565b93926111b8565b9161172e565b600190565b61123791611226610d26565b5061122f611546565b919091611b39565b600190565b61125190611248610a56565b506001906114f1565b90565b60007f455243343632363a207769746864726177206d6f7265207468616e206d617800910152565b611289601f602092610252565b61129281611254565b0190565b6112ac906020810190600081830391015261127c565b90565b156112b657565b6112be6101d3565b62461bcd60e51b8152806112d460048201611296565b0390fd5b9190611329916112e6610a56565b5061130c846113056112ff6112fa85611429565b6101f3565b916101f3565b11156112af565b61131584610d4d565b9361131e611546565b929190918593611e64565b90565b60007f455243343632363a2072656465656d206d6f7265207468616e206d6178000000910152565b611361601d602092610252565b61136a8161132c565b0190565b6113849060208101906000818303910152611354565b90565b1561138e57565b6113966101d3565b62461bcd60e51b8152806113ac6004820161136e565b0390fd5b906113fe916113bd610a56565b506113e3816113dc6113d66113d188611449565b6101f3565b916101f3565b1115611387565b6113ec81610ef4565b936113f5611546565b92859293611e64565b90565b5061140a610a56565b5060001990565b6114269061141d610a56565b506000906117ec565b90565b61143e61144691611438610a56565b50611004565b6000906114f1565b90565b61145b90611455610a56565b50611004565b90565b9061146890610fe0565b600052602052604060002090565b61149b9161149161149692611489610a56565b50600161145e565b610fec565b610d82565b90565b6114b3906114aa610a56565b506000906117ec565b90565b90565b6114cd6114c86114d2926114b6565b610a5b565b6101f3565b90565b6114de90610523565b604d81116114ec57600a0a90565b610dd9565b90611543916114fe610a56565b509061151b61150b610b22565b61151560016114b9565b90610e8a565b61153c611526610d8f565b611536611531611cff565b6114d5565b90610e8a565b9192611f82565b90565b61154e610e50565b503390565b90565b61156a61156561156f92611553565b610a5b565b610381565b90565b61157b90611556565b90565b60207f7265737300000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201520152565b6115d96024604092610252565b6115e28161157e565b0190565b6115fc90602081019060008183039101526115cc565b90565b1561160657565b61160e6101d3565b62461bcd60e51b815280611624600482016115e6565b0390fd5b60207f7373000000000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201520152565b6116836022604092610252565b61168c81611628565b0190565b6116a69060208101906000818303910152611676565b90565b156116b057565b6116b86101d3565b62461bcd60e51b8152806116ce60048201611690565b0390fd5b60001b90565b906116e5600019916116d2565b9181191691161790565b6117036116fe611708926101f3565b610a5b565b6101f3565b90565b90565b9061172361171e61172a926116ef565b61170b565b82546116d8565b9055565b9190916117578161175061174a6117456000611572565b61038c565b9161038c565b14156115ff565b61177d8361177661177061176b6000611572565b61038c565b9161038c565b14156116a9565b61179c826117976117906001859061145e565b8690610fec565b61170e565b9190916117e76117d56117cf7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610fe0565b93610fe0565b936117de6101d3565b91829182610203565b0390a3565b9061183e916117f9610a56565b509061181c611806610d8f565b611816611811611cff565b6114d5565b90610e8a565b611837611827610b22565b61183160016114b9565b90610e8a565b9192611f82565b90565b60007f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000910152565b611876601d602092610252565b61187f81611841565b0190565b6118999060208101906000818303910152611869565b90565b156118a357565b6118ab6101d3565b62461bcd60e51b8152806118c160048201611883565b0390fd5b6118d0818390611476565b90816118e66118e06000196101f3565b916101f3565b036118f2575b50505050565b6119249361191e916119178461191061190a856101f3565b916101f3565b101561189c565b93926111b8565b9161172e565b388080806118ec565b60207f6472657373000000000000000000000000000000000000000000000000000000917f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201520152565b6119886025604092610252565b6119918161192d565b0190565b6119ab906020810190600081830391015261197b565b90565b156119b557565b6119bd6101d3565b62461bcd60e51b8152806119d360048201611995565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201520152565b611a326023604092610252565b611a3b816119d7565b0190565b611a559060208101906000818303910152611a25565b90565b15611a5f57565b611a676101d3565b62461bcd60e51b815280611a7d60048201611a3f565b0390fd5b60207f616c616e63650000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201520152565b611adc6026604092610252565b611ae581611a81565b0190565b611aff9060208101906000818303910152611acf565b90565b15611b0957565b611b116101d3565b62461bcd60e51b815280611b2760048201611ae9565b0390fd5b90611b3691016101f3565b90565b919091611b6281611b5b611b55611b506000611572565b61038c565b9161038c565b14156119ae565b611b8883611b81611b7b611b766000611572565b61038c565b9161038c565b1415611a58565b611bd7611bc6611ba2611b9d60008590610fec565b610d82565b611bbf81611bb8611bb2886101f3565b916101f3565b1015611b02565b84906111b8565b611bd260008490610fec565b61170e565b611bff82611bf9611bea60008790610fec565b91611bf483610d82565b611b2b565b9061170e565b919091611c4a611c38611c327fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610fe0565b93610fe0565b93611c416101d3565b91829182610203565b0390a3565b611c5890610a5e565b90565b611c6490611c4f565b90565b611c7090610a7a565b90565b611c7c81610523565b03611c8357565b600080fd5b90505190611c9582611c73565b565b90602082820312611cb157611cae91600001611c88565b90565b6101de565b60000190565b90565b611cd3611cce611cd892611cbc565b610a5b565b610523565b90565b611ce7611ced91610523565b91610523565b90039060ff8211611cfa57565b610dd9565b611d07610dd4565b50611d3d60126020611d27611d22611d1d610e55565b611c5b565b611c67565b63313ce56790611d356101d3565b948592610add565b82528180611d4d60048201611cb6565b03915afa908115611daa57611d7392600092611d76575b50611d6e90611cbf565b611cdb565b90565b611d6e919250611d9c9060203d8111611da3575b611d948183610ab4565b810190611c97565b9190611d64565b503d611d8a565b610b11565b916020611dd1929493611dca604082019660008301906101f6565b01906101f6565b565b611e097f000000000000000000000000000000000000000000000000000000000000000082611e0130610a92565b90869261206b565b611e1482859061213e565b909192611e4a611e447fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d793610fe0565b93610fe0565b93611e5f611e566101d3565b92839283611daf565b0390a3565b80611e77611e718561038c565b9161038c565b03611f0e575b611e88838690612358565b611eb47f0000000000000000000000000000000000000000000000000000000000000000838691612468565b90919293611ef4611eee611ee87ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db94610fe0565b94610fe0565b94610fe0565b94611f09611f006101d3565b92839283611daf565b0390a4565b611f1a838287916118c5565b611e7d565b634e487b7160e01b600052602160045260246000fd5b60031115611f3f57565b611f1f565b90611f4e82611f35565b565b634e487b7160e01b600052601260045260246000fd5b611f7a611f75611f7f92611553565b610a5b565b6101f3565b90565b91611f8b610a56565b50611f98838383916125a5565b93611fac611fa66001611f44565b91611f44565b149283611fd8575b505050611fbf575b90565b611fd390611fcd60016114b9565b90610e8a565b611fbc565b9091925091909182156120025709611ff9611ff36000611f66565b916101f3565b11388080611fb4565b611f50565b63ffffffff1690565b63ffffffff60e01b1690565b61203061202b61203592612007565b610add565b612010565b90565b604090612062612069949695939661205860608401986000850190610581565b6020830190610581565b01906101f6565b565b6120b893916120a46004946120b393946120886323b872dd61201c565b939190916120946101d3565b9788956020870190815201612038565b60208201810382520383610ab4565b61290d565b565b60007f45524332303a206d696e7420746f20746865207a65726f206164647265737300910152565b6120ef601f602092610252565b6120f8816120ba565b0190565b61211290602081019060008183039101526120e2565b90565b1561211c57565b6121246101d3565b62461bcd60e51b81528061213a600482016120fc565b0390fd5b906121658261215e6121586121536000611572565b61038c565b9161038c565b1415612115565b61218261217b826121766002610d82565b610e8a565b600261170e565b6121aa816121a461219560008690610fec565b9161219f83610d82565b611b2b565b9061170e565b6121b46000611572565b9190916121ff6121ed6121e77fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610fe0565b93610fe0565b936121f66101d3565b91829182610203565b0390a3565b60207f7300000000000000000000000000000000000000000000000000000000000000917f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201520152565b61225f6021604092610252565b61226881612204565b0190565b6122829060208101906000818303910152612252565b90565b1561228c57565b6122946101d3565b62461bcd60e51b8152806122aa6004820161226c565b0390fd5b60207f6365000000000000000000000000000000000000000000000000000000000000917f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201520152565b6123096022604092610252565b612312816122ae565b0190565b61232c90602081019060008183039101526122fc565b90565b1561233657565b61233e6101d3565b62461bcd60e51b81528061235460048201612316565b0390fd5b61237e8161237761237161236c6000611572565b61038c565b9161038c565b1415612285565b6123cd6123bc61239861239360008590610fec565b610d82565b6123b5816123ae6123a8886101f3565b916101f3565b101561232f565b84906111b8565b6123c860008490610fec565b61170e565b6123ea6123e3836123de6002610d82565b6111b8565b600261170e565b906123f56000611572565b909161243f61242d6124277fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610fe0565b93610fe0565b936124366101d3565b91829182610203565b0390a3565b91602061246692949361245f60408201966000830190610581565b01906101f6565b565b916124ac60049261249d6124b1959361248463a9059cbb61201c565b9261248d6101d3565b9687946020860190815201612444565b60208201810382520383610ab4565b61290d565b565b6124bf6124c5916101f3565b916101f3565b9081156124d0570490565b611f50565b60007f4d6174683a206d756c446976206f766572666c6f770000000000000000000000910152565b61250a6015602092610252565b612513816124d5565b0190565b61252d90602081019060008183039101526124fd565b90565b1561253757565b61253f6101d3565b62461bcd60e51b81528061255560048201612517565b0390fd5b9061256491026101f3565b90565b90565b61257e61257961258392612567565b610a5b565b6101f3565b90565b90565b61259d6125986125a292612586565b610a5b565b6101f3565b90565b9190916125b0610a56565b506125b9610a56565b506125c2610a56565b5060001983820992808202938480821091030391826125ea6125e46000611f66565b916101f3565b1461277257612769928480936126609361261a61276f999861261461260e876101f3565b916101f3565b11612530565b612622610a56565b500990858211900394039360018361264c61263d86196101f3565b612646846114b9565b90611b2b565b168080950496049380600003040190612559565b17916127636127476127236126ff6126db6126b76126886003612683899161256a565b612559565b6126926002612589565b186126b160026126ac6126a68b8590612559565b91612589565b6111b8565b90612559565b6126d560026126d06126ca8a8590612559565b91612589565b6111b8565b90612559565b6126f960026126f46126ee898590612559565b91612589565b6111b8565b90612559565b61271d6002612718612712888590612559565b91612589565b6111b8565b90612559565b612741600261273c612736878590612559565b91612589565b6111b8565b90612559565b9161275e6127586002928590612559565b91612589565b6111b8565b90612559565b90612559565b90565b50505061277e916124b3565b90565b9061279461278d6101d3565b9283610ab4565b565b67ffffffffffffffff81116127b4576127b0602091610280565b0190565b610a9e565b906127cb6127c683612796565b612781565b918252565b60007f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61280260206127b9565b9061280f602083016127d0565b565b6128196127f8565b90565b5190565b612829816103ea565b0361283057565b600080fd5b9050519061284282612820565b565b9060208282031261285e5761285b91600001612835565b90565b6101de565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201520152565b6128be602a604092610252565b6128c781612863565b0190565b6128e190602081019060008183039101526128b1565b90565b156128eb57565b6128f36101d3565b62461bcd60e51b815280612909600482016128cb565b0390fd5b6129579161291d61292c92610a86565b90612926612811565b9161297f565b6129358161281c565b6129486129426000611f66565b916101f3565b14908115612959575b506128e4565b565b612974915060206129698261281c565b818301019101612844565b38612951565b606090565b9061299f929161298d61297a565b50906129996000611f66565b91612abd565b90565b6129ab90610a7a565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201520152565b612a096026604092610252565b612a12816129ae565b0190565b612a2c90602081019060008183039101526129fc565b90565b15612a3657565b612a3e6101d3565b62461bcd60e51b815280612a5460048201612a16565b0390fd5b67ffffffffffffffff8111612a7657612a72602091610280565b0190565b610a9e565b90612a8d612a8883612a58565b612781565b918252565b3d600014612aaf57612aa33d612a7b565b903d6000602084013e5b565b612ab761297a565b90612aad565b9160008091612b149593612acf61297a565b50612af6612adc306129a2565b31612aef612ae9856101f3565b916101f3565b1015612a2f565b8591602082019151925af191612b0a612a92565b9092909192612b9b565b90565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b612b4c601d602092610252565b612b5581612b17565b0190565b612b6f9060208101906000818303910152612b3f565b90565b15612b7957565b612b816101d3565b62461bcd60e51b815280612b9760048201612b59565b0390fd5b919290612ba661297a565b50600014612bec5750612bb88261281c565b612bcb612bc56000611f66565b916101f3565b14612bd5575b5090565b612be1612be691612c40565b612b72565b38612bd1565b8290612bf78261281c565b612c0a612c046000611f66565b916101f3565b11600014612c1b5750805190602001fd5b612c3c90612c276101d3565b91829162461bcd60e51b8352600483016102bb565b0390fd5b612c48610d26565b503b612c5d612c576000611f66565b916101f3565b119056fea2646970667358221220f7f03373f69ba466f4fe4bb46e6eb4f20e10799c8d29a0e89f531bd2dc4d01d964736f6c634300081b0033","deployedBytecode":"0x60806040526004361015610013575b610a51565b61001e6000356101cd565b806301e1d114146101c857806306fdde03146101c357806307a2d13a146101be578063095ea7b3146101b95780630a28a477146101b457806318160ddd146101af57806323b872dd146101aa578063313ce567146101a557806338d52e0f146101a0578063395093511461019b578063402d267d146101965780634cdad506146101915780636e553f651461018c57806370a082311461018757806394bf804d1461018257806395d89b411461017d578063a457c2d714610178578063a9059cbb14610173578063b3d7f6b91461016e578063b460af9414610169578063ba08765214610164578063c63d75b61461015f578063c6e6f5921461015a578063ce96cb7714610155578063d905777e14610150578063dd62ed3e1461014b5763ef8b30f70361000e57610a1c565b6109e6565b610983565b61094e565b610919565b6108e4565b6108ae565b610878565b610808565b6107d2565b61079c565b610767565b610731565b6106fc565b6106c6565b610663565b61062e565b6105d9565b6105a4565b61054c565b6104ed565b61047d565b610448565b610412565b61034c565b6102d4565b610219565b60e01c90565b60405190565b600080fd5b600080fd5b60009103126101ee57565b6101de565b90565b6101ff906101f3565b9052565b9190610217906000602085019401906101f6565b565b34610249576102293660046101e3565b610245610234610b22565b61023c6101d3565b91829182610203565b0390f35b6101d9565b5190565b60209181520190565b60005b83811061026f575050906000910152565b80602091830151818501520161025e565b601f801991011690565b6102a96102b26020936102b7936102a08161024e565b93848093610252565b9586910161025b565b610280565b0190565b6102d1916020820191600081840391015261028a565b90565b34610304576102e43660046101e3565b6103006102ef610cf8565b6102f76101d3565b918291826102bb565b0390f35b6101d9565b610312816101f3565b0361031957565b600080fd5b9050359061032b82610309565b565b90602082820312610347576103449160000161031e565b90565b6101de565b3461037c5761037861036761036236600461032d565b610d0e565b61036f6101d3565b91829182610203565b0390f35b6101d9565b60018060a01b031690565b61039590610381565b90565b6103a18161038c565b036103a857565b600080fd5b905035906103ba82610398565b565b91906040838203126103e557806103d96103e292600086016103ad565b9360200161031e565b90565b6101de565b151590565b6103f8906103ea565b9052565b9190610410906000602085019401906103ef565b565b346104435761043f61042e6104283660046103bc565b90610d2b565b6104366101d3565b918291826103fc565b0390f35b6101d9565b346104785761047461046361045e36600461032d565b610d4d565b61046b6101d3565b91829182610203565b0390f35b6101d9565b346104ad5761048d3660046101e3565b6104a9610498610d8f565b6104a06101d3565b91829182610203565b0390f35b6101d9565b90916060828403126104e8576104e56104ce84600085016103ad565b936104dc81602086016103ad565b9360400161031e565b90565b6101de565b3461051e5761051a6105096105033660046104b2565b91610da5565b6105116101d3565b918291826103fc565b0390f35b6101d9565b60ff1690565b61053290610523565b9052565b919061054a90600060208501940190610529565b565b3461057c5761055c3660046101e3565b610578610567610e12565b61056f6101d3565b91829182610536565b0390f35b6101d9565b61058a9061038c565b9052565b91906105a290600060208501940190610581565b565b346105d4576105b43660046101e3565b6105d06105bf610e55565b6105c76101d3565b9182918261058e565b0390f35b6101d9565b3461060a576106066105f56105ef3660046103bc565b90610eaf565b6105fd6101d3565b918291826103fc565b0390f35b6101d9565b9060208282031261062957610626916000016103ad565b90565b6101de565b3461065e5761065a61064961064436600461060f565b610ee4565b6106516101d3565b91829182610203565b0390f35b6101d9565b346106935761068f61067e61067936600461032d565b610ef4565b6106866101d3565b91829182610203565b0390f35b6101d9565b91906040838203126106c157806106b56106be926000860161031e565b936020016103ad565b90565b6101de565b346106f7576106f36106e26106dc366004610698565b90610f90565b6106ea6101d3565b91829182610203565b0390f35b6101d9565b3461072c5761072861071761071236600461060f565b611004565b61071f6101d3565b91829182610203565b0390f35b6101d9565b346107625761075e61074d610747366004610698565b906110a7565b6107556101d3565b91829182610203565b0390f35b6101d9565b34610797576107773660046101e3565b6107936107826110f8565b61078a6101d3565b918291826102bb565b0390f35b6101d9565b346107cd576107c96107b86107b23660046103bc565b906111c6565b6107c06101d3565b918291826103fc565b0390f35b6101d9565b34610803576107ff6107ee6107e83660046103bc565b9061121a565b6107f66101d3565b918291826103fc565b0390f35b6101d9565b346108385761083461082361081e36600461032d565b61123c565b61082b6101d3565b91829182610203565b0390f35b6101d9565b909160608284031261087357610870610859846000850161031e565b9361086781602086016103ad565b936040016103ad565b90565b6101de565b346108a9576108a561089461088e36600461083d565b916112d8565b61089c6101d3565b91829182610203565b0390f35b6101d9565b346108df576108db6108ca6108c436600461083d565b916113b0565b6108d26101d3565b91829182610203565b0390f35b6101d9565b34610914576109106108ff6108fa36600461060f565b611401565b6109076101d3565b91829182610203565b0390f35b6101d9565b346109495761094561093461092f36600461032d565b611411565b61093c6101d3565b91829182610203565b0390f35b6101d9565b3461097e5761097a61096961096436600461060f565b611429565b6109716101d3565b91829182610203565b0390f35b6101d9565b346109b3576109af61099e61099936600461060f565b611449565b6109a66101d3565b91829182610203565b0390f35b6101d9565b91906040838203126109e157806109d56109de92600086016103ad565b936020016103ad565b90565b6101de565b34610a1757610a13610a026109fc3660046109b8565b90611476565b610a0a6101d3565b91829182610203565b0390f35b6101d9565b34610a4c57610a48610a37610a3236600461032d565b61149e565b610a3f6101d3565b91829182610203565b0390f35b6101d9565b600080fd5b600090565b90565b610a72610a6d610a7792610381565b610a5b565b610381565b90565b610a8390610a5e565b90565b610a8f90610a7a565b90565b610a9b90610a7a565b90565b634e487b7160e01b600052604160045260246000fd5b90610abe90610280565b810190811067ffffffffffffffff821117610ad857604052565b610a9e565b60e01b90565b90505190610af082610309565b565b90602082820312610b0c57610b0991600001610ae3565b90565b6101de565b610b196101d3565b3d6000823e3d90fd5b610b2a610a56565b50610b8b6020610b597f0000000000000000000000000000000000000000000000000000000000000000610a86565b6370a0823190610b80610b6b30610a92565b92610b746101d3565b95869485938493610add565b83526004830161058e565b03915afa908115610bd057600091610ba2575b5090565b610bc3915060203d8111610bc9575b610bbb8183610ab4565b810190610af2565b38610b9e565b503d610bb1565b610b11565b606090565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610c10575b6020831014610c0b57565b610bda565b91607f1691610c00565b60209181520190565b600052602060002090565b9060009291805490610c49610c4283610bf0565b8094610c1a565b91600181169081600014610ca25750600114610c65575b505050565b610c729192939450610c23565b916000925b818410610c8a5750500190388080610c60565b60018160209295939554848601520191019290610c77565b92949550505060ff1916825215156020020190388080610c60565b90610cc791610c2e565b90565b90610cea610ce392610cda6101d3565b93848092610cbd565b0383610ab4565b565b610cf590610cca565b90565b610d00610bd5565b50610d0b6003610cec565b90565b610d2390610d1a610a56565b506000906114f1565b90565b600090565b610d4891610d37610d26565b50610d40611546565b91909161172e565b600190565b610d6290610d59610a56565b506001906117ec565b90565b60001c90565b90565b610d7a610d7f91610d65565b610d6b565b90565b610d8c9054610d6e565b90565b610d97610a56565b50610da26002610d82565b90565b91610dcf92610db2610d26565b50610dc7610dbe611546565b829084916118c5565b919091611b39565b600190565b600090565b634e487b7160e01b600052601160045260246000fd5b610dfb610e0191610523565b91610523565b019060ff8211610e0d57565b610dd9565b610e1a610dd4565b50610e4d7f0000000000000000000000000000000000000000000000000000000000000000610e47611cff565b90610def565b90565b600090565b610e5d610e50565b50610e877f0000000000000000000000000000000000000000000000000000000000000000610a86565b90565b610e99610e9f919392936101f3565b926101f3565b8201809211610eaa57565b610dd9565b610edf91610ebb610d26565b50610ed9610ec7611546565b91610ed483948094611476565b610e8a565b9161172e565b600190565b50610eed610a56565b5060001990565b610f0990610f00610a56565b506000906114f1565b90565b60007f455243343632363a206465706f736974206d6f7265207468616e206d61780000910152565b610f41601e602092610252565b610f4a81610f0c565b0190565b610f649060208101906000818303910152610f34565b90565b15610f6e57565b610f766101d3565b62461bcd60e51b815280610f8c60048201610f4e565b0390fd5b90610fdd90610f9d610a56565b50610fc383610fbc610fb6610fb185610ee4565b6101f3565b916101f3565b1115610f67565b610fcc8361149e565b92610fd5611546565b918492611dd3565b90565b610fe990610a7a565b90565b90610ff690610fe0565b600052602052604060002090565b61101b61102091611013610a56565b506000610fec565b610d82565b90565b60007f455243343632363a206d696e74206d6f7265207468616e206d61780000000000910152565b611058601b602092610252565b61106181611023565b0190565b61107b906020810190600081830391015261104b565b90565b1561108557565b61108d6101d3565b62461bcd60e51b8152806110a360048201611065565b0390fd5b906110f5906110b4610a56565b506110da836110d36110cd6110c885611401565b6101f3565b916101f3565b111561107e565b6110e38361123c565b926110ec611546565b91849192611dd3565b90565b611100610bd5565b5061110b6004610cec565b90565b60207f207a65726f000000000000000000000000000000000000000000000000000000917f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201520152565b6111696025604092610252565b6111728161110e565b0190565b61118c906020810190600081830391015261115c565b90565b1561119657565b61119e6101d3565b62461bcd60e51b8152806111b460048201611176565b0390fd5b906111c391036101f3565b90565b611215916111d2610d26565b5061120f6111de611546565b916111ea838590611476565b92611208846112016111fb856101f3565b916101f3565b101561118f565b93926111b8565b9161172e565b600190565b61123791611226610d26565b5061122f611546565b919091611b39565b600190565b61125190611248610a56565b506001906114f1565b90565b60007f455243343632363a207769746864726177206d6f7265207468616e206d617800910152565b611289601f602092610252565b61129281611254565b0190565b6112ac906020810190600081830391015261127c565b90565b156112b657565b6112be6101d3565b62461bcd60e51b8152806112d460048201611296565b0390fd5b9190611329916112e6610a56565b5061130c846113056112ff6112fa85611429565b6101f3565b916101f3565b11156112af565b61131584610d4d565b9361131e611546565b929190918593611e64565b90565b60007f455243343632363a2072656465656d206d6f7265207468616e206d6178000000910152565b611361601d602092610252565b61136a8161132c565b0190565b6113849060208101906000818303910152611354565b90565b1561138e57565b6113966101d3565b62461bcd60e51b8152806113ac6004820161136e565b0390fd5b906113fe916113bd610a56565b506113e3816113dc6113d66113d188611449565b6101f3565b916101f3565b1115611387565b6113ec81610ef4565b936113f5611546565b92859293611e64565b90565b5061140a610a56565b5060001990565b6114269061141d610a56565b506000906117ec565b90565b61143e61144691611438610a56565b50611004565b6000906114f1565b90565b61145b90611455610a56565b50611004565b90565b9061146890610fe0565b600052602052604060002090565b61149b9161149161149692611489610a56565b50600161145e565b610fec565b610d82565b90565b6114b3906114aa610a56565b506000906117ec565b90565b90565b6114cd6114c86114d2926114b6565b610a5b565b6101f3565b90565b6114de90610523565b604d81116114ec57600a0a90565b610dd9565b90611543916114fe610a56565b509061151b61150b610b22565b61151560016114b9565b90610e8a565b61153c611526610d8f565b611536611531611cff565b6114d5565b90610e8a565b9192611f82565b90565b61154e610e50565b503390565b90565b61156a61156561156f92611553565b610a5b565b610381565b90565b61157b90611556565b90565b60207f7265737300000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201520152565b6115d96024604092610252565b6115e28161157e565b0190565b6115fc90602081019060008183039101526115cc565b90565b1561160657565b61160e6101d3565b62461bcd60e51b815280611624600482016115e6565b0390fd5b60207f7373000000000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201520152565b6116836022604092610252565b61168c81611628565b0190565b6116a69060208101906000818303910152611676565b90565b156116b057565b6116b86101d3565b62461bcd60e51b8152806116ce60048201611690565b0390fd5b60001b90565b906116e5600019916116d2565b9181191691161790565b6117036116fe611708926101f3565b610a5b565b6101f3565b90565b90565b9061172361171e61172a926116ef565b61170b565b82546116d8565b9055565b9190916117578161175061174a6117456000611572565b61038c565b9161038c565b14156115ff565b61177d8361177661177061176b6000611572565b61038c565b9161038c565b14156116a9565b61179c826117976117906001859061145e565b8690610fec565b61170e565b9190916117e76117d56117cf7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610fe0565b93610fe0565b936117de6101d3565b91829182610203565b0390a3565b9061183e916117f9610a56565b509061181c611806610d8f565b611816611811611cff565b6114d5565b90610e8a565b611837611827610b22565b61183160016114b9565b90610e8a565b9192611f82565b90565b60007f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000910152565b611876601d602092610252565b61187f81611841565b0190565b6118999060208101906000818303910152611869565b90565b156118a357565b6118ab6101d3565b62461bcd60e51b8152806118c160048201611883565b0390fd5b6118d0818390611476565b90816118e66118e06000196101f3565b916101f3565b036118f2575b50505050565b6119249361191e916119178461191061190a856101f3565b916101f3565b101561189c565b93926111b8565b9161172e565b388080806118ec565b60207f6472657373000000000000000000000000000000000000000000000000000000917f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201520152565b6119886025604092610252565b6119918161192d565b0190565b6119ab906020810190600081830391015261197b565b90565b156119b557565b6119bd6101d3565b62461bcd60e51b8152806119d360048201611995565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201520152565b611a326023604092610252565b611a3b816119d7565b0190565b611a559060208101906000818303910152611a25565b90565b15611a5f57565b611a676101d3565b62461bcd60e51b815280611a7d60048201611a3f565b0390fd5b60207f616c616e63650000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201520152565b611adc6026604092610252565b611ae581611a81565b0190565b611aff9060208101906000818303910152611acf565b90565b15611b0957565b611b116101d3565b62461bcd60e51b815280611b2760048201611ae9565b0390fd5b90611b3691016101f3565b90565b919091611b6281611b5b611b55611b506000611572565b61038c565b9161038c565b14156119ae565b611b8883611b81611b7b611b766000611572565b61038c565b9161038c565b1415611a58565b611bd7611bc6611ba2611b9d60008590610fec565b610d82565b611bbf81611bb8611bb2886101f3565b916101f3565b1015611b02565b84906111b8565b611bd260008490610fec565b61170e565b611bff82611bf9611bea60008790610fec565b91611bf483610d82565b611b2b565b9061170e565b919091611c4a611c38611c327fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610fe0565b93610fe0565b93611c416101d3565b91829182610203565b0390a3565b611c5890610a5e565b90565b611c6490611c4f565b90565b611c7090610a7a565b90565b611c7c81610523565b03611c8357565b600080fd5b90505190611c9582611c73565b565b90602082820312611cb157611cae91600001611c88565b90565b6101de565b60000190565b90565b611cd3611cce611cd892611cbc565b610a5b565b610523565b90565b611ce7611ced91610523565b91610523565b90039060ff8211611cfa57565b610dd9565b611d07610dd4565b50611d3d60126020611d27611d22611d1d610e55565b611c5b565b611c67565b63313ce56790611d356101d3565b948592610add565b82528180611d4d60048201611cb6565b03915afa908115611daa57611d7392600092611d76575b50611d6e90611cbf565b611cdb565b90565b611d6e919250611d9c9060203d8111611da3575b611d948183610ab4565b810190611c97565b9190611d64565b503d611d8a565b610b11565b916020611dd1929493611dca604082019660008301906101f6565b01906101f6565b565b611e097f000000000000000000000000000000000000000000000000000000000000000082611e0130610a92565b90869261206b565b611e1482859061213e565b909192611e4a611e447fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d793610fe0565b93610fe0565b93611e5f611e566101d3565b92839283611daf565b0390a3565b80611e77611e718561038c565b9161038c565b03611f0e575b611e88838690612358565b611eb47f0000000000000000000000000000000000000000000000000000000000000000838691612468565b90919293611ef4611eee611ee87ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db94610fe0565b94610fe0565b94610fe0565b94611f09611f006101d3565b92839283611daf565b0390a4565b611f1a838287916118c5565b611e7d565b634e487b7160e01b600052602160045260246000fd5b60031115611f3f57565b611f1f565b90611f4e82611f35565b565b634e487b7160e01b600052601260045260246000fd5b611f7a611f75611f7f92611553565b610a5b565b6101f3565b90565b91611f8b610a56565b50611f98838383916125a5565b93611fac611fa66001611f44565b91611f44565b149283611fd8575b505050611fbf575b90565b611fd390611fcd60016114b9565b90610e8a565b611fbc565b9091925091909182156120025709611ff9611ff36000611f66565b916101f3565b11388080611fb4565b611f50565b63ffffffff1690565b63ffffffff60e01b1690565b61203061202b61203592612007565b610add565b612010565b90565b604090612062612069949695939661205860608401986000850190610581565b6020830190610581565b01906101f6565b565b6120b893916120a46004946120b393946120886323b872dd61201c565b939190916120946101d3565b9788956020870190815201612038565b60208201810382520383610ab4565b61290d565b565b60007f45524332303a206d696e7420746f20746865207a65726f206164647265737300910152565b6120ef601f602092610252565b6120f8816120ba565b0190565b61211290602081019060008183039101526120e2565b90565b1561211c57565b6121246101d3565b62461bcd60e51b81528061213a600482016120fc565b0390fd5b906121658261215e6121586121536000611572565b61038c565b9161038c565b1415612115565b61218261217b826121766002610d82565b610e8a565b600261170e565b6121aa816121a461219560008690610fec565b9161219f83610d82565b611b2b565b9061170e565b6121b46000611572565b9190916121ff6121ed6121e77fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610fe0565b93610fe0565b936121f66101d3565b91829182610203565b0390a3565b60207f7300000000000000000000000000000000000000000000000000000000000000917f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201520152565b61225f6021604092610252565b61226881612204565b0190565b6122829060208101906000818303910152612252565b90565b1561228c57565b6122946101d3565b62461bcd60e51b8152806122aa6004820161226c565b0390fd5b60207f6365000000000000000000000000000000000000000000000000000000000000917f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201520152565b6123096022604092610252565b612312816122ae565b0190565b61232c90602081019060008183039101526122fc565b90565b1561233657565b61233e6101d3565b62461bcd60e51b81528061235460048201612316565b0390fd5b61237e8161237761237161236c6000611572565b61038c565b9161038c565b1415612285565b6123cd6123bc61239861239360008590610fec565b610d82565b6123b5816123ae6123a8886101f3565b916101f3565b101561232f565b84906111b8565b6123c860008490610fec565b61170e565b6123ea6123e3836123de6002610d82565b6111b8565b600261170e565b906123f56000611572565b909161243f61242d6124277fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610fe0565b93610fe0565b936124366101d3565b91829182610203565b0390a3565b91602061246692949361245f60408201966000830190610581565b01906101f6565b565b916124ac60049261249d6124b1959361248463a9059cbb61201c565b9261248d6101d3565b9687946020860190815201612444565b60208201810382520383610ab4565b61290d565b565b6124bf6124c5916101f3565b916101f3565b9081156124d0570490565b611f50565b60007f4d6174683a206d756c446976206f766572666c6f770000000000000000000000910152565b61250a6015602092610252565b612513816124d5565b0190565b61252d90602081019060008183039101526124fd565b90565b1561253757565b61253f6101d3565b62461bcd60e51b81528061255560048201612517565b0390fd5b9061256491026101f3565b90565b90565b61257e61257961258392612567565b610a5b565b6101f3565b90565b90565b61259d6125986125a292612586565b610a5b565b6101f3565b90565b9190916125b0610a56565b506125b9610a56565b506125c2610a56565b5060001983820992808202938480821091030391826125ea6125e46000611f66565b916101f3565b1461277257612769928480936126609361261a61276f999861261461260e876101f3565b916101f3565b11612530565b612622610a56565b500990858211900394039360018361264c61263d86196101f3565b612646846114b9565b90611b2b565b168080950496049380600003040190612559565b17916127636127476127236126ff6126db6126b76126886003612683899161256a565b612559565b6126926002612589565b186126b160026126ac6126a68b8590612559565b91612589565b6111b8565b90612559565b6126d560026126d06126ca8a8590612559565b91612589565b6111b8565b90612559565b6126f960026126f46126ee898590612559565b91612589565b6111b8565b90612559565b61271d6002612718612712888590612559565b91612589565b6111b8565b90612559565b612741600261273c612736878590612559565b91612589565b6111b8565b90612559565b9161275e6127586002928590612559565b91612589565b6111b8565b90612559565b90612559565b90565b50505061277e916124b3565b90565b9061279461278d6101d3565b9283610ab4565b565b67ffffffffffffffff81116127b4576127b0602091610280565b0190565b610a9e565b906127cb6127c683612796565b612781565b918252565b60007f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61280260206127b9565b9061280f602083016127d0565b565b6128196127f8565b90565b5190565b612829816103ea565b0361283057565b600080fd5b9050519061284282612820565b565b9060208282031261285e5761285b91600001612835565b90565b6101de565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201520152565b6128be602a604092610252565b6128c781612863565b0190565b6128e190602081019060008183039101526128b1565b90565b156128eb57565b6128f36101d3565b62461bcd60e51b815280612909600482016128cb565b0390fd5b6129579161291d61292c92610a86565b90612926612811565b9161297f565b6129358161281c565b6129486129426000611f66565b916101f3565b14908115612959575b506128e4565b565b612974915060206129698261281c565b818301019101612844565b38612951565b606090565b9061299f929161298d61297a565b50906129996000611f66565b91612abd565b90565b6129ab90610a7a565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201520152565b612a096026604092610252565b612a12816129ae565b0190565b612a2c90602081019060008183039101526129fc565b90565b15612a3657565b612a3e6101d3565b62461bcd60e51b815280612a5460048201612a16565b0390fd5b67ffffffffffffffff8111612a7657612a72602091610280565b0190565b610a9e565b90612a8d612a8883612a58565b612781565b918252565b3d600014612aaf57612aa33d612a7b565b903d6000602084013e5b565b612ab761297a565b90612aad565b9160008091612b149593612acf61297a565b50612af6612adc306129a2565b31612aef612ae9856101f3565b916101f3565b1015612a2f565b8591602082019151925af191612b0a612a92565b9092909192612b9b565b90565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b612b4c601d602092610252565b612b5581612b17565b0190565b612b6f9060208101906000818303910152612b3f565b90565b15612b7957565b612b816101d3565b62461bcd60e51b815280612b9760048201612b59565b0390fd5b919290612ba661297a565b50600014612bec5750612bb88261281c565b612bcb612bc56000611f66565b916101f3565b14612bd5575b5090565b612be1612be691612c40565b612b72565b38612bd1565b8290612bf78261281c565b612c0a612c046000611f66565b916101f3565b11600014612c1b5750805190602001fd5b612c3c90612c276101d3565b91829162461bcd60e51b8352600483016102bb565b0390fd5b612c48610d26565b503b612c5d612c576000611f66565b916101f3565b119056fea2646970667358221220f7f03373f69ba466f4fe4bb46e6eb4f20e10799c8d29a0e89f531bd2dc4d01d964736f6c634300081b0033","abi":[{"inputs":[{"internalType":"contract IERC20","name":"asset_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"maxDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"maxMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxRedeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxWithdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewRedeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewWithdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}]}