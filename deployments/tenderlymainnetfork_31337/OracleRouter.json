{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.27\"},\"sources\":{\"contracts/OracleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./interfaces/chainlink/AggregatorV3Interface.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {StableMath} from \\\"./utils/StableMath.sol\\\";\\n\\ncontract OracleRouter is IOracle, Ownable {\\n    using StableMath for uint256;\\n    using SafeCast for int256;\\n\\n    uint256 internal constant MIN_DRIFT = 0.9e18;\\n    uint256 internal constant MAX_DRIFT = 1.1e18;\\n    address internal constant FIXED_PRICE =\\n        0x0000000000000000000000000000000000000001;\\n    // Maximum allowed staleness buffer above normal Oracle maximum staleness\\n    uint256 internal constant STALENESS_BUFFER = 1 days;\\n    mapping(address => FeedInfo) public tokenToFeed;\\n\\n    struct FeedInfo {\\n        uint8 decimals;\\n        address feedAddress;\\n        uint256 maxStaleness;\\n    }\\n\\n    constructor(address initialOwner) Ownable() {\\n        // Any additional initialization logic can go here\\n    }\\n\\n    function addFeed(\\n        address asset,\\n        address feedAddress,\\n        uint256 maxStaleness,\\n        uint8 decimals\\n    ) public onlyOwner {\\n        try AggregatorV3Interface(feedAddress).decimals() returns (uint8 feedDecimals) {\\n            require(feedDecimals == decimals, \\\"Input decimals do not match feed decimals\\\");\\n        } catch {\\n            // If decimals is not callable, use the input decimals\\n        }\\n        tokenToFeed[asset] = FeedInfo(decimals, feedAddress, maxStaleness);\\n    }\\n\\n    /**\\n     * @notice Returns the total price in 18 digit unit for a given asset.\\n     * @param asset address of the asset\\n     * @return uint256 unit price for 1 asset unit, in 18 decimal fixed\\n     */\\n    function price(\\n        address asset\\n    ) external view virtual override returns (uint256) {\\n        FeedInfo storage feedInfo = tokenToFeed[asset];\\n        address _feed = feedInfo.feedAddress;\\n        uint8 decimals = feedInfo.decimals;\\n        uint256 maxStaleness = feedInfo.maxStaleness;\\n        require(_feed != address(0), \\\"Asset not available\\\");\\n        require(_feed != FIXED_PRICE, \\\"Fixed price feeds not supported\\\");\\n        \\n\\n        (, int256 _iprice, , uint256 updatedAt, ) = AggregatorV3Interface(_feed)\\n            .latestRoundData();\\n\\n        require(\\n            updatedAt + maxStaleness >= block.timestamp,\\n            \\\"Oracle price too old\\\"\\n        );\\n\\n        uint256 _price = _iprice.toUint256().scaleBy(18, decimals);\\n\\n        /// dev: split the checks for stablecoin and non-stablecoin\\n        /* require(_price <= MAX_DRIFT, \\\"Oracle: Price exceeds max\\\");\\n        require(_price >= MIN_DRIFT, \\\"Oracle: Price under min\\\"); */\\n\\n        return _price;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x * (10 ** (to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x / (10 ** (from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x * (y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z / scale;\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x * y;\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled + (FULL_SCALE - 1);\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil / FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x * FULL_SCALE;\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z / y;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x6BfB50ce7f9D383b713A399f453AF8290cf14a74","bytecode":"0x60806040523461002f576100196100146100fa565b61011b565b610021610034565b61123661025f823961123690f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b6101186114958038038061010d81610086565b9283398101906100db565b90565b50610124610126565b565b61013661013161013d565b6101fd565b565b600090565b610145610138565b503390565b60001c90565b60018060a01b031690565b61016761016c9161014a565b610150565b90565b610179905461015b565b90565b60001b90565b9061019360018060a01b039161017c565b9181191691161790565b90565b6101b46101af6101b9926100a0565b61019d565b6100a0565b90565b6101c5906101a0565b90565b6101d1906101bc565b90565b90565b906101ec6101e76101f3926101c8565b6101d4565b8254610182565b9055565b60000190565b610207600061016f565b6102128260006101d7565b906102466102407f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936101c8565b916101c8565b9161024f610034565b80610259816101f7565b0390a356fe60806040526004361015610013575b610465565b61001e60003561007d565b8063715018a6146100785780638da5cb5b146100735780639593720c1461006e578063aea9107814610069578063e81668fc146100645763f2fde38b0361000e57610432565b6103fb565b610337565b6102e9565b610116565b6100a9565b60e01c90565b60405190565b600080fd5b600080fd5b600091031261009e57565b61008e565b60000190565b346100d7576100b9366004610093565b6100c16104bb565b6100c9610083565b806100d3816100a3565b0390f35b610089565b60018060a01b031690565b6100f0906100dc565b90565b6100fc906100e7565b9052565b9190610114906000602085019401906100f3565b565b3461014657610126366004610093565b6101426101316104eb565b610139610083565b91829182610100565b0390f35b610089565b610154816100e7565b0361015b57565b600080fd5b9050359061016d8261014b565b565b906020828203126101895761018691600001610160565b90565b61008e565b90565b6101a56101a06101aa926100dc565b61018e565b6100dc565b90565b6101b690610191565b90565b6101c2906101ad565b90565b906101cf906101b9565b600052602052604060002090565b60001c90565b60ff1690565b6101f56101fa916101dd565b6101e3565b90565b61020790546101e9565b90565b60081c90565b60018060a01b031690565b61022761022c9161020a565b610210565b90565b610239905461021b565b90565b90565b61024b610250916101dd565b61023c565b90565b61025d905461023f565b90565b61026b9060016101c5565b610277600082016101fd565b9161029060016102896000850161022f565b9301610253565b90565b60ff1690565b6102a290610293565b9052565b90565b6102b2906102a6565b9052565b6040906102e06102e794969593966102d660608401986000850190610299565b60208301906100f3565b01906102a9565b565b3461031c576103186103046102ff36600461016f565b610260565b61030f939193610083565b938493846102b6565b0390f35b610089565b9190610335906000602085019401906102a9565b565b346103675761036361035261034d36600461016f565b61085d565b61035a610083565b91829182610321565b0390f35b610089565b610375816102a6565b0361037c57565b600080fd5b9050359061038e8261036c565b565b61039981610293565b036103a057565b600080fd5b905035906103b282610390565b565b6080818303126103f6576103cb8260008301610160565b926103f36103dc8460208501610160565b936103ea8160408601610381565b936060016103a5565b90565b61008e565b3461042d5761041761040e3660046103b4565b92919091610d7c565b61041f610083565b80610429816100a3565b0390f35b610089565b346104605761044a61044536600461016f565b610e78565b610452610083565b8061045c816100a3565b0390f35b610089565b600080fd5b610472610f06565b61047a6104a7565b565b90565b61049361048e6104989261047c565b61018e565b6100dc565b90565b6104a49061047f565b90565b6104b96104b4600061049b565b610f6d565b565b6104c361046a565b565b600090565b6104d66104db916101dd565b610210565b90565b6104e890546104ca565b90565b6104f36104c5565b506104fe60006104de565b90565b600090565b90565b60209181520190565b60007f4173736574206e6f7420617661696c61626c6500000000000000000000000000910152565b6105476013602092610509565b61055081610512565b0190565b61056a906020810190600081830391015261053a565b90565b1561057457565b61057c610083565b62461bcd60e51b81528061059260048201610554565b0390fd5b600190565b60007f4669786564207072696365206665656473206e6f7420737570706f7274656400910152565b6105d0601f602092610509565b6105d98161059b565b0190565b6105f390602081019060008183039101526105c3565b90565b156105fd57565b610605610083565b62461bcd60e51b81528061061b600482016105dd565b0390fd5b61062890610191565b90565b6106349061061f565b90565b610640906101ad565b90565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061066d90610643565b810190811067ffffffffffffffff82111761068757604052565b61064d565b60e01b90565b69ffffffffffffffffffff1690565b6106aa81610692565b036106b157565b600080fd5b905051906106c3826106a1565b565b90565b6106d1816106c5565b036106d857565b600080fd5b905051906106ea826106c8565b565b905051906106f98261036c565b565b919060a08382031261074d5761071481600085016106b6565b9261072282602083016106dd565b9261074a61073384604085016106ec565b9361074181606086016106ec565b936080016106b6565b90565b61008e565b61075a610083565b3d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b61078861078e919392936102a6565b926102a6565b820180921161079957565b610763565b60007f4f7261636c6520707269636520746f6f206f6c64000000000000000000000000910152565b6107d36014602092610509565b6107dc8161079e565b0190565b6107f690602081019060008183039101526107c6565b90565b1561080057565b610808610083565b62461bcd60e51b81528061081e600482016107e0565b0390fd5b90565b61083961083461083e92610822565b61018e565b6102a6565b90565b61085561085061085a92610293565b61018e565b6102a6565b90565b6108746108799161086c610501565b5060016101c5565b610506565b6108856000820161022f565b9061091460a06108fe6108f96108a960016108a2600088016101fd565b9601610253565b956108d0816108c96108c36108be600061049b565b6100e7565b916100e7565b141561056d565b6108f4816108ed6108e76108e2610596565b6100e7565b916100e7565b14156105f6565b61062b565b610637565b63feaf968c9061090c610083565b93849261068c565b82528180610924600482016100a3565b03915afa9081156109ce5761098d936109739260008080809592505091610990575b5061096e916109559193610779565b610967610961426102a6565b916102a6565b10156107f9565b611089565b906109876109816012610825565b91610841565b9161116a565b90565b61096e92935061095591506109bb9060a03d81116109c7575b6109b38183610663565b8101906106fb565b50959450509150610946565b503d6109a9565b610752565b906109e79392916109e2610f06565b610c85565b565b905051906109f682610390565b565b90602082820312610a1257610a0f916000016109e9565b90565b61008e565b60207f20646563696d616c730000000000000000000000000000000000000000000000917f496e70757420646563696d616c7320646f206e6f74206d61746368206665656460008201520152565b610a726029604092610509565b610a7b81610a17565b0190565b610a959060208101906000818303910152610a65565b90565b15610a9f57565b610aa7610083565b62461bcd60e51b815280610abd60048201610a7f565b0390fd5b90610ad4610acd610083565b9283610663565b565b610ae06060610ac1565b90565b90610aed90610293565b9052565b90610afb906100e7565b9052565b90610b09906102a6565b9052565b610b179051610293565b90565b60001b90565b90610b2c60ff91610b1a565b9181191691161790565b610b4a610b45610b4f92610293565b61018e565b610293565b90565b90565b90610b6a610b65610b7192610b36565b610b52565b8254610b20565b9055565b610b7f90516100e7565b90565b60081b90565b90610b9b610100600160a81b0391610b82565b9181191691161790565b90565b90610bbd610bb8610bc4926101b9565b610ba5565b8254610b88565b9055565b610bd290516102a6565b90565b90610be260001991610b1a565b9181191691161790565b610c00610bfb610c05926102a6565b61018e565b6102a6565b90565b90565b90610c20610c1b610c2792610bec565b610c08565b8254610bd5565b9055565b90610c7160406001610c7794610c5060008201610c4a60008801610b0d565b90610b55565b610c6960008201610c6360208801610b75565b90610ba8565b019201610bc8565b90610c0b565b565b90610c8391610c2b565b565b610d18610d1f9293610d0f610d2496610cc06020610caa610ca58a61062b565b610637565b63313ce56790610cb8610083565b93849261068c565b82528180610cd0600482016100a3565b03915afa8091600092610d4c575b5015600014610d2b57506001610d26575b5b95610d06610cfc610ad6565b9760008901610ae3565b60208701610af1565b60408501610aff565b60016101c5565b610c79565b565b610cef565b610d4790610d41610d3b84610293565b91610293565b14610a98565b610cf0565b610d6e91925060203d8111610d75575b610d668183610663565b8101906109f8565b9038610cde565b503d610d5c565b90610d889392916109d3565b565b610d9b90610d96610f06565b610e47565b565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b610df86026604092610509565b610e0181610d9d565b0190565b610e1b9060208101906000818303910152610deb565b90565b15610e2557565b610e2d610083565b62461bcd60e51b815280610e4360048201610e05565b0390fd5b610e7690610e7181610e6a610e64610e5f600061049b565b6100e7565b916100e7565b1415610e1e565b610f6d565b565b610e8190610d8a565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b610eb760208092610509565b610ec081610e83565b0190565b610eda9060208101906000818303910152610eab565b90565b15610ee457565b610eec610083565b62461bcd60e51b815280610f0260048201610ec4565b0390fd5b610f30610f116104eb565b610f2a610f24610f1f6111f3565b6100e7565b916100e7565b14610edd565b565b90610f4360018060a01b0391610b1a565b9181191691161790565b90610f62610f5d610f69926101b9565b610ba5565b8254610f32565b9055565b610f7760006104de565b610f82826000610f4d565b90610fb6610fb07f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936101b9565b916101b9565b91610fbf610083565b80610fc9816100a3565b0390a3565b610fe2610fdd610fe79261047c565b61018e565b6106c5565b90565b60007f53616665436173743a2076616c7565206d75737420626520706f736974697665910152565b61101e60208092610509565b61102781610fea565b0190565b6110419060208101906000818303910152611012565b90565b1561104b57565b611053610083565b62461bcd60e51b8152806110696004820161102b565b0390fd5b61108161107c611086926106c5565b61018e565b6102a6565b90565b6110b990611095610501565b506110b4816110ad6110a76000610fce565b916106c5565b1215611044565b61106d565b90565b6110cb6110d1919392936102a6565b926102a6565b82039182116110dc57565b610763565b6110ea906102a6565b604d81116110f857600a0a90565b610763565b634e487b7160e01b600052601260045260246000fd5b61111f611125916102a6565b916102a6565b908115611130570490565b6110fd565b61114461114a919392936102a6565b926102a6565b916111568382026102a6565b92818404149015171561116557565b610763565b91611173610501565b5081611187611181836102a6565b916102a6565b116000146111af576111a06111a5916111ab94936110bc565b6110e1565b90611135565b5b90565b90806111c36111bd846102a6565b916102a6565b106111d0575b50506111ac565b6111e16111e6916111ec94936110bc565b6110e1565b90611113565b38806111c9565b6111fb6104c5565b50339056fea26469706673582212201793fd98a683886999cdb9148200c6fc807dd54fe1bc2034b4e8c1acec35984c64736f6c634300081b0033","deployedBytecode":"0x60806040526004361015610013575b610465565b61001e60003561007d565b8063715018a6146100785780638da5cb5b146100735780639593720c1461006e578063aea9107814610069578063e81668fc146100645763f2fde38b0361000e57610432565b6103fb565b610337565b6102e9565b610116565b6100a9565b60e01c90565b60405190565b600080fd5b600080fd5b600091031261009e57565b61008e565b60000190565b346100d7576100b9366004610093565b6100c16104bb565b6100c9610083565b806100d3816100a3565b0390f35b610089565b60018060a01b031690565b6100f0906100dc565b90565b6100fc906100e7565b9052565b9190610114906000602085019401906100f3565b565b3461014657610126366004610093565b6101426101316104eb565b610139610083565b91829182610100565b0390f35b610089565b610154816100e7565b0361015b57565b600080fd5b9050359061016d8261014b565b565b906020828203126101895761018691600001610160565b90565b61008e565b90565b6101a56101a06101aa926100dc565b61018e565b6100dc565b90565b6101b690610191565b90565b6101c2906101ad565b90565b906101cf906101b9565b600052602052604060002090565b60001c90565b60ff1690565b6101f56101fa916101dd565b6101e3565b90565b61020790546101e9565b90565b60081c90565b60018060a01b031690565b61022761022c9161020a565b610210565b90565b610239905461021b565b90565b90565b61024b610250916101dd565b61023c565b90565b61025d905461023f565b90565b61026b9060016101c5565b610277600082016101fd565b9161029060016102896000850161022f565b9301610253565b90565b60ff1690565b6102a290610293565b9052565b90565b6102b2906102a6565b9052565b6040906102e06102e794969593966102d660608401986000850190610299565b60208301906100f3565b01906102a9565b565b3461031c576103186103046102ff36600461016f565b610260565b61030f939193610083565b938493846102b6565b0390f35b610089565b9190610335906000602085019401906102a9565b565b346103675761036361035261034d36600461016f565b61085d565b61035a610083565b91829182610321565b0390f35b610089565b610375816102a6565b0361037c57565b600080fd5b9050359061038e8261036c565b565b61039981610293565b036103a057565b600080fd5b905035906103b282610390565b565b6080818303126103f6576103cb8260008301610160565b926103f36103dc8460208501610160565b936103ea8160408601610381565b936060016103a5565b90565b61008e565b3461042d5761041761040e3660046103b4565b92919091610d7c565b61041f610083565b80610429816100a3565b0390f35b610089565b346104605761044a61044536600461016f565b610e78565b610452610083565b8061045c816100a3565b0390f35b610089565b600080fd5b610472610f06565b61047a6104a7565b565b90565b61049361048e6104989261047c565b61018e565b6100dc565b90565b6104a49061047f565b90565b6104b96104b4600061049b565b610f6d565b565b6104c361046a565b565b600090565b6104d66104db916101dd565b610210565b90565b6104e890546104ca565b90565b6104f36104c5565b506104fe60006104de565b90565b600090565b90565b60209181520190565b60007f4173736574206e6f7420617661696c61626c6500000000000000000000000000910152565b6105476013602092610509565b61055081610512565b0190565b61056a906020810190600081830391015261053a565b90565b1561057457565b61057c610083565b62461bcd60e51b81528061059260048201610554565b0390fd5b600190565b60007f4669786564207072696365206665656473206e6f7420737570706f7274656400910152565b6105d0601f602092610509565b6105d98161059b565b0190565b6105f390602081019060008183039101526105c3565b90565b156105fd57565b610605610083565b62461bcd60e51b81528061061b600482016105dd565b0390fd5b61062890610191565b90565b6106349061061f565b90565b610640906101ad565b90565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061066d90610643565b810190811067ffffffffffffffff82111761068757604052565b61064d565b60e01b90565b69ffffffffffffffffffff1690565b6106aa81610692565b036106b157565b600080fd5b905051906106c3826106a1565b565b90565b6106d1816106c5565b036106d857565b600080fd5b905051906106ea826106c8565b565b905051906106f98261036c565b565b919060a08382031261074d5761071481600085016106b6565b9261072282602083016106dd565b9261074a61073384604085016106ec565b9361074181606086016106ec565b936080016106b6565b90565b61008e565b61075a610083565b3d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b61078861078e919392936102a6565b926102a6565b820180921161079957565b610763565b60007f4f7261636c6520707269636520746f6f206f6c64000000000000000000000000910152565b6107d36014602092610509565b6107dc8161079e565b0190565b6107f690602081019060008183039101526107c6565b90565b1561080057565b610808610083565b62461bcd60e51b81528061081e600482016107e0565b0390fd5b90565b61083961083461083e92610822565b61018e565b6102a6565b90565b61085561085061085a92610293565b61018e565b6102a6565b90565b6108746108799161086c610501565b5060016101c5565b610506565b6108856000820161022f565b9061091460a06108fe6108f96108a960016108a2600088016101fd565b9601610253565b956108d0816108c96108c36108be600061049b565b6100e7565b916100e7565b141561056d565b6108f4816108ed6108e76108e2610596565b6100e7565b916100e7565b14156105f6565b61062b565b610637565b63feaf968c9061090c610083565b93849261068c565b82528180610924600482016100a3565b03915afa9081156109ce5761098d936109739260008080809592505091610990575b5061096e916109559193610779565b610967610961426102a6565b916102a6565b10156107f9565b611089565b906109876109816012610825565b91610841565b9161116a565b90565b61096e92935061095591506109bb9060a03d81116109c7575b6109b38183610663565b8101906106fb565b50959450509150610946565b503d6109a9565b610752565b906109e79392916109e2610f06565b610c85565b565b905051906109f682610390565b565b90602082820312610a1257610a0f916000016109e9565b90565b61008e565b60207f20646563696d616c730000000000000000000000000000000000000000000000917f496e70757420646563696d616c7320646f206e6f74206d61746368206665656460008201520152565b610a726029604092610509565b610a7b81610a17565b0190565b610a959060208101906000818303910152610a65565b90565b15610a9f57565b610aa7610083565b62461bcd60e51b815280610abd60048201610a7f565b0390fd5b90610ad4610acd610083565b9283610663565b565b610ae06060610ac1565b90565b90610aed90610293565b9052565b90610afb906100e7565b9052565b90610b09906102a6565b9052565b610b179051610293565b90565b60001b90565b90610b2c60ff91610b1a565b9181191691161790565b610b4a610b45610b4f92610293565b61018e565b610293565b90565b90565b90610b6a610b65610b7192610b36565b610b52565b8254610b20565b9055565b610b7f90516100e7565b90565b60081b90565b90610b9b610100600160a81b0391610b82565b9181191691161790565b90565b90610bbd610bb8610bc4926101b9565b610ba5565b8254610b88565b9055565b610bd290516102a6565b90565b90610be260001991610b1a565b9181191691161790565b610c00610bfb610c05926102a6565b61018e565b6102a6565b90565b90565b90610c20610c1b610c2792610bec565b610c08565b8254610bd5565b9055565b90610c7160406001610c7794610c5060008201610c4a60008801610b0d565b90610b55565b610c6960008201610c6360208801610b75565b90610ba8565b019201610bc8565b90610c0b565b565b90610c8391610c2b565b565b610d18610d1f9293610d0f610d2496610cc06020610caa610ca58a61062b565b610637565b63313ce56790610cb8610083565b93849261068c565b82528180610cd0600482016100a3565b03915afa8091600092610d4c575b5015600014610d2b57506001610d26575b5b95610d06610cfc610ad6565b9760008901610ae3565b60208701610af1565b60408501610aff565b60016101c5565b610c79565b565b610cef565b610d4790610d41610d3b84610293565b91610293565b14610a98565b610cf0565b610d6e91925060203d8111610d75575b610d668183610663565b8101906109f8565b9038610cde565b503d610d5c565b90610d889392916109d3565b565b610d9b90610d96610f06565b610e47565b565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b610df86026604092610509565b610e0181610d9d565b0190565b610e1b9060208101906000818303910152610deb565b90565b15610e2557565b610e2d610083565b62461bcd60e51b815280610e4360048201610e05565b0390fd5b610e7690610e7181610e6a610e64610e5f600061049b565b6100e7565b916100e7565b1415610e1e565b610f6d565b565b610e8190610d8a565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b610eb760208092610509565b610ec081610e83565b0190565b610eda9060208101906000818303910152610eab565b90565b15610ee457565b610eec610083565b62461bcd60e51b815280610f0260048201610ec4565b0390fd5b610f30610f116104eb565b610f2a610f24610f1f6111f3565b6100e7565b916100e7565b14610edd565b565b90610f4360018060a01b0391610b1a565b9181191691161790565b90610f62610f5d610f69926101b9565b610ba5565b8254610f32565b9055565b610f7760006104de565b610f82826000610f4d565b90610fb6610fb07f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936101b9565b916101b9565b91610fbf610083565b80610fc9816100a3565b0390a3565b610fe2610fdd610fe79261047c565b61018e565b6106c5565b90565b60007f53616665436173743a2076616c7565206d75737420626520706f736974697665910152565b61101e60208092610509565b61102781610fea565b0190565b6110419060208101906000818303910152611012565b90565b1561104b57565b611053610083565b62461bcd60e51b8152806110696004820161102b565b0390fd5b61108161107c611086926106c5565b61018e565b6102a6565b90565b6110b990611095610501565b506110b4816110ad6110a76000610fce565b916106c5565b1215611044565b61106d565b90565b6110cb6110d1919392936102a6565b926102a6565b82039182116110dc57565b610763565b6110ea906102a6565b604d81116110f857600a0a90565b610763565b634e487b7160e01b600052601260045260246000fd5b61111f611125916102a6565b916102a6565b908115611130570490565b6110fd565b61114461114a919392936102a6565b926102a6565b916111568382026102a6565b92818404149015171561116557565b610763565b91611173610501565b5081611187611181836102a6565b916102a6565b116000146111af576111a06111a5916111ab94936110bc565b6110e1565b90611135565b5b90565b90806111c36111bd846102a6565b916102a6565b106111d0575b50506111ac565b6111e16111e6916111ec94936110bc565b6110e1565b90611113565b38806111c9565b6111fb6104c5565b50339056fea26469706673582212201793fd98a683886999cdb9148200c6fc807dd54fe1bc2034b4e8c1acec35984c64736f6c634300081b0033","abi":[{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"address","name":"feedAddress","type":"address"},{"internalType":"uint256","name":"maxStaleness","type":"uint256"},{"internalType":"uint8","name":"decimals","type":"uint8"}],"name":"addFeed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"}],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokenToFeed","outputs":[{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"address","name":"feedAddress","type":"address"},{"internalType":"uint256","name":"maxStaleness","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]}