{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.27\"},\"sources\":{\"contracts/BentoUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {OFT} from \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFT.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BentoUSD is Ownable, OFT {\\n    address public bentoUSDVault;\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) OFT(_name, _symbol, _lzEndpoint) Ownable() {\\n        // Any additional initialization logic\\n    }\\n\\n    // for mainnet we will need to remove the minting right from owner.\\n    function mint(address _to, uint256 _amount) public {\\n        require(msg.sender == bentoUSDVault || msg.sender == owner(), \\\"BentoUSD: only bentoUSDVault or owner can mint\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _from, uint256 _amount) public {\\n        require(msg.sender == bentoUSDVault || msg.sender == owner(), \\\"BentoUSD: only bentoUSDVault or owner can burn\\\");\\n        _burn(_from, _amount);\\n    }\\n\\n    function setBentoUSDVault(address _bentoUSDVault) public onlyOwner {\\n        bentoUSDVault = _bentoUSDVault;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.22\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint _start,\\n        uint _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"versionPragma\":\">=0.8.0 <0.9.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(\\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\\n            \\\"LzApp: invalid source sending contract\\\"\\n        );\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint _nativeFee\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(\\n        uint16 _dstChainId,\\n        uint16 _type,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit + _extraGas, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) {\\n            // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = _path;\\n        emit SetTrustedRemote(_remoteChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(\\n        uint16 _dstChainId,\\n        uint16 _packetType,\\n        uint _minGas\\n    ) external onlyOwner {\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n        require(_buf.length >= 4);\\n        uint _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.6\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft(),\\n            150,\\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\\n        );\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload,\\n        bytes memory _reason\\n    ) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/interfaces/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCore is IERC165 {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"./interfaces/IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\\n    using BytesLib for bytes;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint16 public constant PT_SEND = 0;\\n\\n    bool public useCustomAdapterParams;\\n\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = abi.encode(PT_SEND, _toAddress, _amount);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        uint16 packetType;\\n        assembly {\\n            packetType := mload(add(_payload, 32))\\n        }\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        uint amount = _debitFrom(_from, _dstChainId, _toAddress, _amount);\\n\\n        bytes memory lzPayload = abi.encode(PT_SEND, _toAddress, amount);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(\\n        uint16 _srcChainId,\\n        bytes memory,\\n        uint64,\\n        bytes memory _payload\\n    ) internal virtual {\\n        (, bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (uint16, bytes, uint));\\n\\n        address to = toAddressBytes.toAddress(0);\\n\\n        amount = _creditTo(_srcChainId, to, amount);\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _checkAdapterParams(\\n        uint16 _dstChainId,\\n        uint16 _pkType,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _debitFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n\\n    function _creditTo(\\n        uint16 _srcChainId,\\n        address _toAddress,\\n        uint _amount\\n    ) internal virtual returns (uint);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the OFT standard\\n */\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v1/OFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./interfaces/IOFT.sol\\\";\\nimport \\\"./OFTCore.sol\\\";\\n\\n// override decimal() function is needed\\ncontract OFT is OFTCore, ERC20, IOFT {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint\\n    ) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(this);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return totalSupply();\\n    }\\n\\n    function _debitFrom(\\n        address _from,\\n        uint16,\\n        bytes memory,\\n        uint _amount\\n    ) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    function _creditTo(\\n        uint16,\\n        address _toAddress,\\n        uint _amount\\n    ) internal virtual override returns (uint) {\\n        _mint(_toAddress, _amount);\\n        return _amount;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0xE133Db4B5D0a6c69F05452E294de809e5b59e5f5","bytecode":"","deployedBytecode":"0x60806040526004361015610013575b611b70565b61001e60003561032c565b80621d35671461032757806301ffc9a71461032257806306fdde031461031d57806307e0db1714610318578063095ea7b3146103135780630df374831461030e57806310ddb13714610309578063142ea7d41461030457806318160ddd146102ff57806323b872dd146102fa5780632a205e3d146102f5578063313ce567146102f057806339509351146102eb5780633d8b38f6146102e65780633f1f4fa4146102e157806340c10f19146102dc57806342d65a8d146102d757806344770515146102d25780634c42899a146102cd57806351905636146102c85780635b8c41e6146102c357806366ad5c8a146102be57806370a08231146102b9578063715018a6146102b45780637533d788146102af5780638cfd8f5c146102aa5780638da5cb5b146102a55780639358928b146102a0578063950c8a741461029b57806395d89b41146102965780639dc29fac146102915780639f38369a1461028c578063a457c2d714610287578063a6c3d16514610282578063a9059cbb1461027d578063b353aaa714610278578063baf3292d14610273578063c44618341461026e578063cbed8b9c14610269578063d1deba1f14610264578063dd62ed3e1461025f578063df2a5b3b1461025a578063eab45d9c14610255578063eb8d72b714610250578063ed629c5c1461024b578063f2fde38b14610246578063f5ecbdbc14610241578063fc0c546a1461023c5763fc84bcaf0361000e57611b3b565b611af6565b611abd565b611a43565b611a0e565b61199e565b61196b565b611918565b6118a7565b611849565b611812565b61177c565b611711565b6116dc565b61162b565b6115f7565b6115c1565b61158c565b611558565b611523565b6114ee565b611478565b611443565b6113ea565b61134d565b611154565b61111f565b6110e5565b6110af565b610df5565b610cea565b610c5e565b610bf3565b610bbf565b610b8a565b610ad6565b610a59565b610a24565b6109be565b6108b6565b610846565b6107f0565b61079e565b61076a565b610706565b610643565b6105ef565b610524565b610473565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b61ffff1690565b61035781610347565b0361035e57565b600080fd5b905035906103708261034e565b565b600080fd5b600080fd5b600080fd5b909182601f830112156103bb5781359167ffffffffffffffff83116103b65760200192600183028401116103b157565b61037c565b610377565b610372565b67ffffffffffffffff1690565b6103d6816103c0565b036103dd57565b600080fd5b905035906103ef826103cd565b565b90916080828403126104685761040a8360008401610363565b92602083013567ffffffffffffffff8111610463578161042b918501610381565b92909361043b83604083016103e2565b92606082013567ffffffffffffffff811161045e5761045a9201610381565b9091565b610342565b610342565b61033d565b60000190565b346104a8576104926104863660046103f1565b94939093929192611cc7565b61049a610332565b806104a48161046d565b0390f35b610338565b63ffffffff60e01b1690565b6104c2816104ad565b036104c957565b600080fd5b905035906104db826104b9565b565b906020828203126104f7576104f4916000016104ce565b90565b61033d565b151590565b61050a906104fc565b9052565b919061052290600060208501940190610501565b565b346105545761055061053f61053a3660046104dd565b611dfe565b610547610332565b9182918261050e565b0390f35b610338565b600091031261056457565b61033d565b5190565b60209181520190565b60005b83811061058a575050906000910152565b806020918301518185015201610579565b601f801991011690565b6105c46105cd6020936105d2936105bb81610569565b9384809361056d565b95869101610576565b61059b565b0190565b6105ec91602082019160008184039101526105a5565b90565b3461061f576105ff366004610559565b61061b61060a611f43565b610612610332565b918291826105d6565b0390f35b610338565b9060208282031261063e5761063b91600001610363565b90565b61033d565b346106715761065b610656366004610624565b612042565b610663610332565b8061066d8161046d565b0390f35b610338565b60018060a01b031690565b61068a90610676565b90565b61069681610681565b0361069d57565b600080fd5b905035906106af8261068d565b565b90565b6106bd816106b1565b036106c457565b600080fd5b905035906106d6826106b4565b565b919060408382031261070157806106f56106fe92600086016106a2565b936020016106c9565b90565b61033d565b346107375761073361072261071c3660046106d8565b9061204d565b61072a610332565b9182918261050e565b0390f35b610338565b919060408382031261076557806107596107629260008601610363565b936020016106c9565b90565b61033d565b346107995761078361077d36600461073c565b906120f5565b61078b610332565b806107958161046d565b0390f35b610338565b346107cc576107b66107b1366004610624565b6121be565b6107be610332565b806107c88161046d565b0390f35b610338565b906020828203126107eb576107e8916000016106a2565b90565b61033d565b3461081e576108086108033660046107d1565b612233565b610810610332565b8061081a8161046d565b0390f35b610338565b61082c906106b1565b9052565b919061084490600060208501940190610823565b565b3461087657610856366004610559565b61087261086161226a565b610869610332565b91829182610830565b0390f35b610338565b90916060828403126108b1576108ae61089784600085016106a2565b936108a581602086016106a2565b936040016106c9565b90565b61033d565b346108e7576108e36108d26108cc36600461087b565b91612280565b6108da610332565b9182918261050e565b0390f35b610338565b6108f5816104fc565b036108fc57565b600080fd5b9050359061090e826108ec565b565b919060a083820312610995576109298160008501610363565b92602081013567ffffffffffffffff8111610990578261094a918301610381565b92909361095a82604085016106c9565b926109688360608301610901565b92608082013567ffffffffffffffff811161098b576109879201610381565b9091565b610342565b610342565b61033d565b9160206109bc9294936109b560408201966000830190610823565b0190610823565b565b346109f6576109dd6109d1366004610910565b959490949391936123a9565b906109f26109e9610332565b9283928361099a565b0390f35b610338565b60ff1690565b610a0a906109fb565b9052565b9190610a2290600060208501940190610a01565b565b34610a5457610a34366004610559565b610a50610a3f6124d3565b610a47610332565b91829182610a0e565b0390f35b610338565b34610a8a57610a86610a75610a6f3660046106d8565b90612524565b610a7d610332565b9182918261050e565b0390f35b610338565b919091604081840312610ad157610aa98360008301610363565b92602082013567ffffffffffffffff8111610acc57610ac89201610381565b9091565b610342565b61033d565b34610b0757610b03610af2610aec366004610a8f565b91612559565b610afa610332565b9182918261050e565b0390f35b610338565b90565b610b23610b1e610b2892610347565b610b0c565b610347565b90565b90610b3590610b0f565b600052602052604060002090565b1c90565b90565b610b5a906008610b5f9302610b43565b610b47565b90565b90610b6d9154610b4a565b90565b610b8790610b82600391600092610b2b565b610b62565b90565b34610bba57610bb6610ba5610ba0366004610624565b610b70565b610bad610332565b91829182610830565b0390f35b610338565b34610bee57610bd8610bd23660046106d8565b90612686565b610be0610332565b80610bea8161046d565b0390f35b610338565b34610c2257610c0c610c06366004610a8f565b916127d0565b610c14610332565b80610c1e8161046d565b0390f35b610338565b90565b610c3e610c39610c4392610c27565b610b0c565b6106b1565b90565b610c506000610c2a565b90565b610c5b610c46565b90565b34610c8e57610c6e366004610559565b610c8a610c79610c53565b610c81610332565b91829182610830565b0390f35b610338565b610ca7610ca2610cac92610c27565b610b0c565b610347565b90565b610cb96000610c93565b90565b610cc4610caf565b90565b610cd090610347565b9052565b9190610ce890600060208501940190610cc7565b565b34610d1a57610cfa366004610559565b610d16610d05610cbc565b610d0d610332565b91829182610cd4565b0390f35b610338565b610d2890610676565b90565b610d3481610d1f565b03610d3b57565b600080fd5b90503590610d4d82610d2b565b565b919060e083820312610df057610d6881600085016106a2565b92610d768260208301610363565b92604082013567ffffffffffffffff8111610deb5783610d97918401610381565b929093610da781606084016106c9565b92610db58260808501610d40565b92610dc38360a083016106a2565b9260c082013567ffffffffffffffff8111610de657610de29201610381565b9091565b610342565b610342565b61033d565b610e12610e03366004610d4f565b979690969591959492946127dd565b610e1a610332565b80610e248161046d565b0390f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90610e4d9061059b565b810190811067ffffffffffffffff821117610e6757604052565b610e2d565b90610e7f610e78610332565b9283610e43565b565b67ffffffffffffffff8111610e9f57610e9b60209161059b565b0190565b610e2d565b90826000939282370152565b90929192610ec5610ec082610e81565b610e6c565b93818552602085019082840111610ee157610edf92610ea4565b565b610e28565b9080601f83011215610f0457816020610f0193359101610eb0565b90565b610372565b9091606082840312610f5857610f228360008401610363565b9260208301359067ffffffffffffffff8211610f5357610f4781610f50938601610ee6565b936040016103e2565b90565b610342565b61033d565b90610f6790610b0f565b600052602052604060002090565b5190565b905090565b610fa3610f9a92602092610f9181610f75565b94858093610f79565b93849101610576565b0190565b90565b610fb6610fbb916106b1565b610fa7565b9052565b610fcf610fd69160209493610f7e565b8092610faa565b0190565b610fee610fe5610332565b92839283610fbf565b03902090565b610ffd91610fda565b90565b61101461100f611019926103c0565b610b0c565b6103c0565b90565b9061102690611000565b600052602052604060002090565b90565b61104790600861104c9302610b43565b611034565b90565b9061105a9154611037565b90565b906110869261107c61108192611077600595600096610f5d565b610ff4565b61101c565b61104f565b90565b90565b61109590611089565b9052565b91906110ad9060006020850194019061108c565b565b346110e0576110dc6110cb6110c5366004610f09565b9161105d565b6110d3610332565b91829182611099565b0390f35b610338565b3461111a576111046110f83660046103f1565b949390939291926128c0565b61110c610332565b806111168161046d565b0390f35b610338565b3461114f5761114b61113a6111353660046107d1565b61292b565b611142610332565b91829182610830565b0390f35b610338565b3461118257611164366004610559565b61116c612998565b611174610332565b8061117e8161046d565b0390f35b610338565b9061119190610b0f565b600052602052604060002090565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156111eb575b60208310146111e657565b6111b5565b91607f16916111db565b60209181520190565b600052602060002090565b906000929180549061122461121d836111cb565b80946111f5565b9160018116908160001461127d5750600114611240575b505050565b61124d91929394506111fe565b916000925b818410611265575050019038808061123b565b60018160209295939554848601520191019290611252565b92949550505060ff191682521515602002019038808061123b565b906112a291611209565b90565b906112c56112be926112b5610332565b93848092611298565b0383610e43565b565b906000106112db576112d8906112a5565b90565b61119f565b6112f7906112f2600191600092611187565b6112c7565b90565b60209181520190565b61132261132b6020936113309361131981610f75565b938480936112fa565b95869101610576565b61059b565b0190565b61134a9160208201916000818403910152611303565b90565b3461137d57611379611368611363366004610624565b6112e0565b611370610332565b91829182611334565b0390f35b610338565b91906040838203126113ab578061139f6113a89260008601610363565b93602001610363565b90565b61033d565b906113ba90610b0f565b600052602052604060002090565b6113e26113e7926113dd6002936000946113b0565b610b2b565b610b62565b90565b3461141b57611417611406611400366004611382565b906113c8565b61140e610332565b91829182610830565b0390f35b610338565b61142990610681565b9052565b919061144190600060208501940190611420565b565b3461147357611453366004610559565b61146f61145e6129a7565b611466610332565b9182918261142d565b0390f35b610338565b346114a857611488366004610559565b6114a46114936129bd565b61149b610332565b91829182610830565b0390f35b610338565b60018060a01b031690565b6114c89060086114cd9302610b43565b6114ad565b90565b906114db91546114b8565b90565b6114eb60046000906114d0565b90565b3461151e576114fe366004610559565b61151a6115096114de565b611511610332565b9182918261142d565b0390f35b610338565b3461155357611533366004610559565b61154f61153e6129d1565b611546610332565b918291826105d6565b0390f35b610338565b346115875761157161156b3660046106d8565b90612a91565b611579610332565b806115838161046d565b0390f35b610338565b346115bc576115b86115a76115a2366004610624565b612bbd565b6115af610332565b91829182611334565b0390f35b610338565b346115f2576115ee6115dd6115d73660046106d8565b90612ceb565b6115e5610332565b9182918261050e565b0390f35b610338565b346116265761161061160a366004610a8f565b9161303a565b611618610332565b806116228161046d565b0390f35b610338565b3461165c576116586116476116413660046106d8565b90613047565b61164f610332565b9182918261050e565b0390f35b610338565b7f000000000000000000000000000000000000000000000000000000000000000090565b61169961169461169e92610676565b610b0c565b610676565b90565b6116aa90611685565b90565b6116b6906116a1565b90565b6116c2906116ad565b9052565b91906116da906000602085019401906116b9565b565b3461170c576116ec366004610559565b6117086116f7611661565b6116ff610332565b918291826116c6565b0390f35b610338565b3461173f576117296117243660046107d1565b6130c2565b611731610332565b8061173b8161046d565b0390f35b610338565b90565b61175b61175661176092611744565b610b0c565b6106b1565b90565b61176e612710611747565b90565b611779611763565b90565b346117ac5761178c366004610559565b6117a8611797611771565b61179f610332565b91829182610830565b0390f35b610338565b9060808282031261180d576117c98160008401610363565b926117d78260208501610363565b926117e583604083016106c9565b92606082013567ffffffffffffffff8111611808576118049201610381565b9091565b610342565b61033d565b346118445761182e6118253660046117b1565b939290926131de565b611836610332565b806118408161046d565b0390f35b610338565b6118636118573660046103f1565b9493909392919261344f565b61186b610332565b806118758161046d565b0390f35b91906040838203126118a2578061189661189f92600086016106a2565b936020016106a2565b90565b61033d565b346118d8576118d46118c36118bd366004611879565b90613588565b6118cb610332565b91829182610830565b0390f35b610338565b9091606082840312611913576119106118f98460008501610363565b936119078160208601610363565b936040016106c9565b90565b61033d565b346119475761193161192b3660046118dd565b91613658565b611939610332565b806119438161046d565b0390f35b610338565b906020828203126119665761196391600001610901565b90565b61033d565b346119995761198361197e36600461194c565b613703565b61198b610332565b806119958161046d565b0390f35b610338565b346119cd576119b76119b1366004610a8f565b9161385a565b6119bf610332565b806119c98161046d565b0390f35b610338565b60ff1690565b6119e89060086119ed9302610b43565b6119d2565b90565b906119fb91546119d8565b90565b611a0b60066000906119f0565b90565b34611a3e57611a1e366004610559565b611a3a611a296119fe565b611a31610332565b9182918261050e565b0390f35b610338565b34611a7157611a5b611a563660046107d1565b613955565b611a63610332565b80611a6d8161046d565b0390f35b610338565b608081830312611ab857611a8d8260008301610363565b92611ab5611a9e8460208501610363565b93611aac81604086016106a2565b936060016106c9565b90565b61033d565b34611af157611aed611adc611ad3366004611a76565b92919091613a2e565b611ae4610332565b91829182611334565b0390f35b610338565b34611b2657611b06366004610559565b611b22611b11613ae6565b611b19610332565b9182918261142d565b0390f35b610338565b611b38600c6000906114d0565b90565b34611b6b57611b4b366004610559565b611b67611b56611b2b565b611b5e610332565b9182918261142d565b0390f35b610338565b600080fd5b60007f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c65720000910152565b611baa601e60209261056d565b611bb381611b75565b0190565b611bcd9060208101906000818303910152611b9d565b90565b15611bd757565b611bdf610332565b62461bcd60e51b815280611bf560048201611bb7565b0390fd5b611c02906112a5565b90565b5090565b611c14913691610eb0565b90565b60200190565b60207f6e74726163740000000000000000000000000000000000000000000000000000917f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60008201520152565b611c78602660409261056d565b611c8181611c1d565b0190565b611c9b9060208101906000818303910152611c6b565b90565b15611ca557565b611cad610332565b62461bcd60e51b815280611cc360048201611c85565b0390fd5b91611d7c611d82929594611d889794611d21611ce1613afb565b611d1b611d15611d107f00000000000000000000000000000000000000000000000000000000000000006116ad565b610681565b91610681565b14611bd0565b611d71611d38611d3360018490611187565b611bf9565b611d438a8790611c05565b611d5d611d57611d5284610f75565b6106b1565b916106b1565b1480611dd6575b9081611d8a575b50611c9e565b969290959492611c09565b92611c09565b92613b93565b565b9050611dcf611dc9611d9d8c8990611c09565b611daf611da982610f75565b91611c17565b2092611dc3611dbd82610f75565b91611c17565b20611089565b91611089565b1438611d6b565b50611de081610f75565b611df3611ded6000610c2a565b916106b1565b11611d64565b600090565b611e06611df9565b5080611e1b611e1560006104ad565b916104ad565b148015611e3f575b908115611e2f575b5090565b611e399150613c24565b38611e2b565b5080611e5a611e546336372b0760e01b6104ad565b916104ad565b14611e23565b606090565b60209181520190565b600052602060002090565b9060009291805490611e94611e8d836111cb565b8094611e65565b91600181169081600014611eed5750600114611eb0575b505050565b611ebd9192939450611e6e565b916000925b818410611ed55750500190388080611eab565b60018160209295939554848601520191019290611ec2565b92949550505060ff1916825215156020020190388080611eab565b90611f1291611e79565b90565b90611f35611f2e92611f25610332565b93848092611f08565b0383610e43565b565b611f4090611f15565b90565b611f4b611e60565b50611f56600a611f37565b90565b611f6a90611f65613ce7565b611f98565b565b600080fd5b60e01b90565b6000910312611f8257565b61033d565b611f8f610332565b3d6000823e3d90fd5b611fc17f00000000000000000000000000000000000000000000000000000000000000006116ad565b906307e0db1790823b1561203d57611ff992611fee60008094611fe2610332565b96879586948593611f71565b835260048301610cd4565b03925af180156120385761200b575b50565b61202b9060003d8111612031575b6120238183610e43565b810190611f77565b38612008565b503d612019565b611f87565b611f6c565b61204b90611f59565b565b61206a91612059611df9565b50612062613afb565b919091613e67565b600190565b906120819161207c613ce7565b6120df565b565b60001b90565b9061209660001991612083565b9181191691161790565b6120b46120af6120b9926106b1565b610b0c565b6106b1565b90565b90565b906120d46120cf6120db926120a0565b6120bc565b8254612089565b9055565b6120ee6120f392916003610b2b565b6120bf565b565b906120ff9161206f565b565b6121129061210d613ce7565b612114565b565b61213d7f00000000000000000000000000000000000000000000000000000000000000006116ad565b906310ddb13790823b156121b9576121759261216a6000809461215e610332565b96879586948593611f71565b835260048301610cd4565b03925af180156121b457612187575b50565b6121a79060003d81116121ad575b61219f8183610e43565b810190611f77565b38612184565b503d612195565b611f87565b611f6c565b6121c790612101565b565b6121da906121d5613ce7565b612226565b565b906121ed60018060a01b0391612083565b9181191691161790565b612200906116a1565b90565b90565b9061221b612216612222926121f7565b612203565b82546121dc565b9055565b61223190600c612206565b565b61223c906121c9565b565b600090565b60001c90565b61225561225a91612243565b610b47565b90565b6122679054612249565b90565b61227261223e565b5061227d600961225d565b90565b916122aa9261228d611df9565b506122a2612299613afb565b82908491613fa9565b91909161421d565b600190565b91906122c9816122c2816122ce956112fa565b8095610ea4565b61059b565b0190565b949391604091612307946122ff926122f260608a019360008b0190610cc7565b88830360208a01526122af565b940190610823565b565b612312906116a1565b90565b90505190612322826106b4565b565b919060408382031261234d578061234161234a9260008601612315565b93602001612315565b90565b61033d565b91612399916123a69795969461238161238e9361237760a08801946000890190610cc7565b6020870190611420565b8482036040860152611303565b946060830190610501565b60808185039101526122af565b90565b90612452926123fe61245d926123ef604099989b9a976123c761223e565b506123d061223e565b506123d9610caf565b92946123e3610332565b958694602086016122d2565b60208201810382520382610e43565b976124287f00000000000000000000000000000000000000000000000000000000000000006116ad565b946340a7bb10939661243930612309565b9a92909192612446610332565b9b8c998a988998611f71565b885260048801612352565b03915afa80156124aa57600080939091612477575b509190565b905061249b91925060403d81116124a3575b6124938183610e43565b810190612324565b919038612472565b503d612489565b611f87565b600090565b90565b6124cb6124c66124d0926124b4565b610b0c565b6109fb565b90565b6124db6124af565b506124e660126124b7565b90565b634e487b7160e01b600052601160045260246000fd5b61250e612514919392936106b1565b926106b1565b820180921161251f57565b6124e9565b61255491612530611df9565b5061254e61253c613afb565b9161254983948094613588565b6124ff565b91613e67565b600190565b6125996125b7929361258061257b6125b194612573611df9565b506001611187565b611bf9565b61259261258c82610f75565b91611c17565b2094611c09565b6125ab6125a582610f75565b91611c17565b20611089565b91611089565b1490565b6125c76125cc91612243565b6114ad565b90565b6125d990546125bb565b90565b60207f6f776e65722063616e206d696e74000000000000000000000000000000000000917f42656e746f5553443a206f6e6c792062656e746f5553445661756c74206f722060008201520152565b612637602e60409261056d565b612640816125dc565b0190565b61265a906020810190600081830391015261262a565b90565b1561266457565b61266c610332565b62461bcd60e51b81528061268260048201612644565b0390fd5b906126bd91336126a76126a161269c600c6125cf565b610681565b91610681565b1480156126bf575b6126b89061265d565b6143b7565b565b506126b8336126dd6126d76126d26129a7565b610681565b91610681565b1490506126af565b906126f892916126f3613ce7565b612723565b565b9161272093919261271360408201946000830190610cc7565b60208185039101526122af565b90565b9061274d7f00000000000000000000000000000000000000000000000000000000000000006116ad565b6342d65a8d92919392813b156127cb57600061277c916127878296612770610332565b98899788968795611f71565b8552600485016126fa565b03925af180156127c657612799575b50565b6127b99060003d81116127bf575b6127b18183610e43565b810190611f77565b38612796565b503d6127a7565b611f87565b611f6c565b906127db92916126e5565b565b926127fc61280292989796956128089a95999492909697989592611c09565b93611c09565b956144da565b565b612813906116a1565b90565b60207f204c7a4170700000000000000000000000000000000000000000000000000000917f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560008201520152565b612871602660409261056d565b61287a81612816565b0190565b6128949060208101906000818303910152612864565b90565b1561289e57565b6128a6610332565b62461bcd60e51b8152806128bc6004820161287e565b0390fd5b9161290561290b92959461291197946128fa6128da613afb565b6128f46128ee6128e93061280a565b610681565b91610681565b14612897565b969290959492611c09565b92611c09565b926145ff565b565b9061291d906121f7565b600052602052604060002090565b6129426129479161293a61223e565b506007612913565b61225d565b90565b612952613ce7565b61295a612984565b565b61297061296b61297592610c27565b610b0c565b610676565b90565b6129819061295c565b90565b6129966129916000612978565b614662565b565b6129a061294a565b565b600090565b6129af6129a2565b506129ba60006125cf565b90565b6129c561223e565b506129ce61226a565b90565b6129d9611e60565b506129e4600b611f37565b90565b60207f6f776e65722063616e206275726e000000000000000000000000000000000000917f42656e746f5553443a206f6e6c792062656e746f5553445661756c74206f722060008201520152565b612a42602e60409261056d565b612a4b816129e7565b0190565b612a659060208101906000818303910152612a35565b90565b15612a6f57565b612a77610332565b62461bcd60e51b815280612a8d60048201612a4f565b0390fd5b90612ac89133612ab2612aac612aa7600c6125cf565b610681565b91610681565b148015612aca575b612ac390612a68565b614817565b565b50612ac333612ae8612ae2612add6129a7565b610681565b91610681565b149050612aba565b606090565b60007f4c7a4170703a206e6f20747275737465642070617468207265636f7264000000910152565b612b2a601d60209261056d565b612b3381612af5565b0190565b612b4d9060208101906000818303910152612b1d565b90565b15612b5757565b612b5f610332565b62461bcd60e51b815280612b7560048201612b37565b0390fd5b90565b612b90612b8b612b9592612b79565b610b0c565b6106b1565b90565b612ba7612bad919392936106b1565b926106b1565b8203918211612bb857565b6124e9565b612bdc612bd7612c3092612bcf612af0565b506001611187565b611bf9565b612c02612be882610f75565b612bfb612bf56000610c2a565b916106b1565b1415612b50565b80612c2a612c24612c14600094610f75565b612c1e6014612b7c565b90612b98565b92610c2a565b90614a2a565b90565b60207f207a65726f000000000000000000000000000000000000000000000000000000917f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201520152565b612c8e602560409261056d565b612c9781612c33565b0190565b612cb19060208101906000818303910152612c81565b90565b15612cbb57565b612cc3610332565b62461bcd60e51b815280612cd960048201612c9b565b0390fd5b90612ce891036106b1565b90565b612d3a91612cf7611df9565b50612d34612d03613afb565b91612d0f838590613588565b92612d2d84612d26612d20856106b1565b916106b1565b1015612cb4565b9392612cdd565b91613e67565b600190565b90612d529291612d4d613ce7565b612fb0565b565b612d5d906116a1565b90565b909182612d7081612d7793610f79565b8093610ea4565b0190565b60601b90565b612d8a90612d7b565b90565b612d9690612d81565b90565b612da5612daa91610681565b612d8d565b9052565b612dbf9060149493612dc693612d60565b8092612d99565b0190565b601f602091010490565b1b90565b91906008612df4910291612dee60001984612dd4565b92612dd4565b9181191691161790565b9190612e14612e0f612e1c936120a0565b6120bc565b908354612dd8565b9055565b612e3291612e2c61223e565b91612dfe565b565b5b818110612e40575050565b80612e4e6000600193612e20565b01612e35565b9190601f8111612e64575b505050565b612e70612e95936111fe565b906020612e7c84612dca565b83019310612e9d575b612e8e90612dca565b0190612e34565b388080612e5f565b9150612e8e81929050612e85565b90612ebc9060001990600802610b43565b191690565b81612ecb91612eab565b906002021790565b90612edd81610f75565b9067ffffffffffffffff8211612f9f57612f0182612efb85546111cb565b85612e54565b602090601f8311600114612f3657918091612f2593600092612f2a575b5050612ec1565b90555b565b90915001513880612f1e565b601f19831691612f45856111fe565b9260005b818110612f8757509160029391856001969410612f6d575b50505002019055612f28565b612f7d910151601f841690612eab565b9055388080612f61565b91936020600181928787015181550195019201612f49565b610e2d565b90612fae91612ed3565b565b919091612ffc83612feb8491612fdc612fc830612d54565b612fd0610332565b94859360208501612dae565b60208201810382520382610e43565b612ff760018490611187565b612fa4565b9190916130357f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce9361302c610332565b938493846126fa565b0390a1565b906130459291612d3f565b565b61306491613053611df9565b5061305c613afb565b91909161421d565b600190565b61307a90613075613ce7565b61307c565b565b613087816004612206565b6130bd7f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b916130b4610332565b9182918261142d565b0390a1565b6130cb90613069565b565b906130e2949392916130dd613ce7565b613129565b565b909391613126959361310f6131199261310560808601986000870190610cc7565b6020850190610cc7565b6040830190610823565b60608185039101526122af565b90565b939091936131567f00000000000000000000000000000000000000000000000000000000000000006116ad565b9163cbed8b9c919395949091833b156131d95761319561318a9360009793889461317e610332565b9a8b998a988997611f71565b8752600487016130e4565b03925af180156131d4576131a7575b50565b6131c79060003d81116131cd575b6131bf8183610e43565b810190611f77565b386131a4565b503d6131b5565b611f87565b611f6c565b906131eb949392916130cd565b565b6131fe906020949361320593612d60565b8092610faa565b0190565b909161322090613217610332565b938493846131ed565b03902090565b909161323192613209565b90565b61324061324591612243565b611034565b90565b6132529054613234565b90565b61326961326461326e92610c27565b612083565b611089565b90565b60207f6167650000000000000000000000000000000000000000000000000000000000917f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360008201520152565b6132cc602360409261056d565b6132d581613271565b0190565b6132ef90602081019060008183039101526132bf565b90565b156132f957565b613301610332565b62461bcd60e51b815280613317600482016132d9565b0390fd5b60207f6400000000000000000000000000000000000000000000000000000000000000917f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160008201520152565b613376602160409261056d565b61337f8161331b565b0190565b6133999060208101906000818303910152613369565b90565b156133a357565b6133ab610332565b62461bcd60e51b8152806133c160048201613383565b0390fd5b6133ce90611089565b90565b6133da90612243565b90565b906133f26133ed6133f9926133c5565b6133d1565b8254612089565b9055565b613406906103c0565b9052565b9061343b6134469161344d9698979560609561342e60808701936000880190610cc7565b85830360208701526122af565b9660408301906133fd565b019061108c565b565b61353561356b939592949661348361347e61347761346f60058790610f5d565b898b91613226565b8a9061101c565b613248565b936134aa856134a361349d6134986000613255565b611089565b91611089565b14156132f2565b6134e36134b8828490611c09565b6134ca6134c482610f75565b91611c17565b206134dd6134d788611089565b91611089565b1461339c565b6135166134f06000613255565b61351161350a61350260058990610f5d565b8b8d91613226565b8c9061101c565b6133dd565b839161352f886135298b8d959492611c09565b92611c09565b926145ff565b9293947fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e595613562610332565b9586958661340a565b0390a1565b9061357a906121f7565b600052602052604060002090565b6135ad916135a36135a89261359b61223e565b506008613570565b612913565b61225d565b90565b906135c392916135be613ce7565b6135f8565b565b6040906135ef6135f694969593966135e560608401986000850190610cc7565b6020830190610cc7565b0190610823565b565b91909161361a8261361561360e600285906113b0565b8690610b2b565b6120bf565b9190916136537f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac09361364a610332565b938493846135c5565b0390a1565b9061366392916135b0565b565b61367690613671613ce7565b6136bd565b565b9061368460ff91612083565b9181191691161790565b613697906104fc565b90565b90565b906136b26136ad6136b99261368e565b61369a565b8254613678565b9055565b6136c881600661369d565b6136fe7f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a4916136f5610332565b9182918261050e565b0390a1565b61370c90613665565b565b90613721929161371c613ce7565b613802565b565b9161372e9082611c05565b9067ffffffffffffffff82116137f0576137528261374c85546111cb565b85612e54565b600090601f8311600114613787579180916137769360009261377b575b5050612ec1565b90555b565b9091500135388061376f565b601f19831691613796856111fe565b9260005b8181106137d8575091600293918560019694106137be575b50505002019055613779565b6137ce910135601f841690612eab565b90553880806137b2565b9193602060018192878701358155019501920161379a565b610e2d565b906138009291613723565b565b91909161381c83839061381760018590611187565b6137f5565b9190916138557ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab9361384c610332565b938493846126fa565b0390a1565b90613865929161370e565b565b61387890613873613ce7565b613924565b565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6138d5602660409261056d565b6138de8161387a565b0190565b6138f890602081019060008183039101526138c8565b90565b1561390257565b61390a610332565b62461bcd60e51b815280613920600482016138e2565b0390fd5b6139539061394e8161394761394161393c6000612978565b610681565b91610681565b14156138fb565b614662565b565b61395e90613867565b565b9092919261397561397082610e81565b610e6c565b938185526020850190828401116139915761398f92610576565b565b610e28565b9080601f830112156139b4578160206139b193519101613960565b90565b610372565b906020828203126139ea57600082015167ffffffffffffffff81116139e5576139e29201613996565b90565b610342565b61033d565b613a25613a2c94613a1b606094989795613a11608086019a6000870190610cc7565b6020850190610cc7565b6040830190611420565b0190610823565b565b60009250613a3a612af0565b50613a90613a677f00000000000000000000000000000000000000000000000000000000000000006116ad565b91613a9b63f5ecbdbc919496613a7c30612d54565b613a84610332565b98899788968796611f71565b8652600486016139ef565b03915afa908115613ad557600091613ab2575b5090565b613acf91503d806000833e613ac78183610e43565b8101906139b9565b38613aae565b611f87565b613ae3906116a1565b90565b613aee6129a2565b50613af830613ada565b90565b613b036129a2565b503390565b63ffffffff1690565b613b25613b20613b2a92613b08565b611f71565b6104ad565b90565b90613b59613b6491613b719694613b4c60808601926000870190610cc7565b8482036020860152611303565b9360408301906133fd565b6060818403910152611303565b90565b90565b613b8b613b86613b9092613b74565b610b0c565b610347565b90565b92613c009192613bf86004613ba73061280a565b5a613bf26096613bed613bbd6366ad5c8a613b11565b613bde8d8d8b908d92613bce610332565b9b8c966020880190815201613b2d565b60208201810382520386610e43565b613b77565b91614b69565b9390156104fc565b613c0c575b5050505050565b613c1a949390919293614c2b565b3880808080613c05565b613c2c611df9565b5080613c47613c41630a72677560e11b6104ad565b916104ad565b14908115613c54575b5090565b613c5e9150614caa565b38613c50565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b613c986020809261056d565b613ca181613c64565b0190565b613cbb9060208101906000818303910152613c8c565b90565b15613cc557565b613ccd610332565b62461bcd60e51b815280613ce360048201613ca5565b0390fd5b613d11613cf26129a7565b613d0b613d05613d00613afb565b610681565b91610681565b14613cbe565b565b60207f7265737300000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201520152565b613d6e602460409261056d565b613d7781613d13565b0190565b613d919060208101906000818303910152613d61565b90565b15613d9b57565b613da3610332565b62461bcd60e51b815280613db960048201613d7b565b0390fd5b60207f7373000000000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201520152565b613e18602260409261056d565b613e2181613dbd565b0190565b613e3b9060208101906000818303910152613e0b565b90565b15613e4557565b613e4d610332565b62461bcd60e51b815280613e6360048201613e25565b0390fd5b919091613e9081613e89613e83613e7e6000612978565b610681565b91610681565b1415613d94565b613eb683613eaf613ea9613ea46000612978565b610681565b91610681565b1415613e3e565b613ed582613ed0613ec960088590613570565b8690612913565b6120bf565b919091613f20613f0e613f087f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936121f7565b936121f7565b93613f17610332565b91829182610830565b0390a3565b60007f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000910152565b613f5a601d60209261056d565b613f6381613f25565b0190565b613f7d9060208101906000818303910152613f4d565b90565b15613f8757565b613f8f610332565b62461bcd60e51b815280613fa560048201613f67565b0390fd5b613fb4818390613588565b9081613fca613fc46000196106b1565b916106b1565b03613fd6575b50505050565b6140089361400291613ffb84613ff4613fee856106b1565b916106b1565b1015613f80565b9392612cdd565b91613e67565b38808080613fd0565b60207f6472657373000000000000000000000000000000000000000000000000000000917f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201520152565b61406c602560409261056d565b61407581614011565b0190565b61408f906020810190600081830391015261405f565b90565b1561409957565b6140a1610332565b62461bcd60e51b8152806140b760048201614079565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201520152565b614116602360409261056d565b61411f816140bb565b0190565b6141399060208101906000818303910152614109565b90565b1561414357565b61414b610332565b62461bcd60e51b81528061416160048201614123565b0390fd5b60207f616c616e63650000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201520152565b6141c0602660409261056d565b6141c981614165565b0190565b6141e390602081019060008183039101526141b3565b90565b156141ed57565b6141f5610332565b62461bcd60e51b81528061420b600482016141cd565b0390fd5b9061421a91016106b1565b90565b9190916142468161423f6142396142346000612978565b610681565b91610681565b1415614092565b61426c8361426561425f61425a6000612978565b610681565b91610681565b141561413c565b6142bb6142aa61428661428160078590612913565b61225d565b6142a38161429c614296886106b1565b916106b1565b10156141e6565b8490612cdd565b6142b660078490612913565b6120bf565b6142e3826142dd6142ce60078790612913565b916142d88361225d565b61420f565b906120bf565b91909161432e61431c6143167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936121f7565b936121f7565b93614325610332565b91829182610830565b0390a3565b60007f45524332303a206d696e7420746f20746865207a65726f206164647265737300910152565b614368601f60209261056d565b61437181614333565b0190565b61438b906020810190600081830391015261435b565b90565b1561439557565b61439d610332565b62461bcd60e51b8152806143b360048201614375565b0390fd5b906143de826143d76143d16143cc6000612978565b610681565b91610681565b141561438e565b6143fb6143f4826143ef600961225d565b6124ff565b60096120bf565b6144238161441d61440e60078690612913565b916144188361225d565b61420f565b906120bf565b61442d6000612978565b9190916144786144666144607fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936121f7565b936121f7565b9361446f610332565b91829182610830565b0390a3565b9392906144a96040916144b19461449c606089019260008a0190610cc7565b8782036020890152611303565b940190610823565b565b929160206144d06144d89360408701908782036000890152611303565b940190610823565b565b9361450c61454f93969294614501866144f1610caf565b8b906144fb610c46565b92614d9b565b869086899192614dee565b96614515610caf565b61454188916145328b614526610332565b9485936020850161447d565b60208201810382520382610e43565b928593929091923494614f5c565b90919261458561457f7f39a4c66499bcf4b56d79f0dde8ed7a9d4925a0df55825206b2b8531e202be0d093610b0f565b936121f7565b9361459a614591610332565b928392836144b3565b0390a3565b600090565b60007f4f4654436f72653a20756e6b6e6f776e207061636b6574207479706500000000910152565b6145d9601c60209261056d565b6145e2816145a4565b0190565b6145fc90602081019060008183039101526145cc565b90565b92909161460a61459f565b50602082015161462961462361461e610caf565b610347565b91610347565b146000146146405761463e93929091926150c5565b565b614648610332565b62461bcd60e51b81528061465e600482016145e6565b0390fd5b61466c60006125cf565b614677826000612206565b906146ab6146a57f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936121f7565b916121f7565b916146b4610332565b806146be8161046d565b0390a3565b60207f7300000000000000000000000000000000000000000000000000000000000000917f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201520152565b61471e602160409261056d565b614727816146c3565b0190565b6147419060208101906000818303910152614711565b90565b1561474b57565b614753610332565b62461bcd60e51b8152806147696004820161472b565b0390fd5b60207f6365000000000000000000000000000000000000000000000000000000000000917f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201520152565b6147c8602260409261056d565b6147d18161476d565b0190565b6147eb90602081019060008183039101526147bb565b90565b156147f557565b6147fd610332565b62461bcd60e51b815280614813600482016147d5565b0390fd5b61483d8161483661483061482b6000612978565b610681565b91610681565b1415614744565b61488c61487b61485761485260078590612913565b61225d565b6148748161486d614867886106b1565b916106b1565b10156147ee565b8490612cdd565b61488760078490612913565b6120bf565b6148a96148a28361489d600961225d565b612cdd565b60096120bf565b906148b46000612978565b90916148fe6148ec6148e67fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936121f7565b936121f7565b936148f5610332565b91829182610830565b0390a3565b90565b61491a61491561491f92614903565b610b0c565b6106b1565b90565b60007f736c6963655f6f766572666c6f77000000000000000000000000000000000000910152565b614957600e60209261056d565b61496081614922565b0190565b61497a906020810190600081830391015261494a565b90565b1561498457565b61498c610332565b62461bcd60e51b8152806149a260048201614964565b0390fd5b60007f736c6963655f6f75744f66426f756e6473000000000000000000000000000000910152565b6149db601160209261056d565b6149e4816149a6565b0190565b6149fe90602081019060008183039101526149ce565b90565b15614a0857565b614a10610332565b62461bcd60e51b815280614a26600482016149e8565b0390fd5b9091614a34612af0565b50614a65614a4c82614a46601f614906565b906124ff565b614a5e614a58846106b1565b916106b1565b101561497d565b614a94614a7183610f75565b614a8d614a87614a828786906124ff565b6106b1565b916106b1565b1015614a01565b614a9c612af0565b508015600014614abb5750505060405160008152602081016040525b90565b60405192601f8216908115602002828601019383850192801560200291010101905b808410614af75750508252601f8019910116604052614ab8565b9092602080918551815201930190614add565b614b1e614b19614b2392610347565b610b0c565b6106b1565b90565b90614b38614b3383610e81565b610e6c565b918252565b369037565b90614b67614b4f83614b26565b92602080614b5d8693610e81565b9201910390614b3d565b565b9392600091908291614b79611df9565b50614b82612af0565b50614b8b61223e565b50614b94611df9565b5082614ba7614ba287614b0a565b614b42565b9760208451940192f1903d90808211614bca575b508084526000602085013e9190565b905038614bbb565b93614c0d614c02614c28979593614c1a95614bf560a08a019260008b0190610cc7565b88820360208a0152611303565b9260408701906133fd565b8482036060860152611303565b916080818403910152611303565b90565b93614ca591929394614c6f86614c49614c4382610f75565b91611c17565b20614c6a614c63614c5c60058690610f5d565b8890610ff4565b889061101c565b6133dd565b9293947fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c95614c9c610332565b95869586614bd2565b0390a1565b614cb2611df9565b50614ccc614cc66301ffc9a760e01b6104ad565b916104ad565b1490565b614cdc614ce191612243565b6119d2565b90565b614cee9054614cd0565b90565b60207f656d7074792e0000000000000000000000000000000000000000000000000000917f4f4654436f72653a205f61646170746572506172616d73206d7573742062652060008201520152565b614d4c602660409261056d565b614d5581614cf1565b0190565b614d6f9060208101906000818303910152614d3f565b90565b15614d7957565b614d81610332565b62461bcd60e51b815280614d9760048201614d59565b0390fd5b92909192614da96006614ce4565b600014614dc15792614dbe939290919261525f565b5b565b505050614dd0614de991610f75565b614de3614ddd6000610c2a565b916106b1565b14614d72565b614dbf565b9050614e279150614dfd61223e565b50614e06613afb565b81614e19614e1383610681565b91610681565b03614e2a575b508290614817565b90565b614e379082908591613fa9565b38614e1f565b60207f61207472757374656420736f7572636500000000000000000000000000000000917f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060008201520152565b614e98603060409261056d565b614ea181614e3d565b0190565b614ebb9060208101906000818303910152614e8b565b90565b15614ec557565b614ecd610332565b62461bcd60e51b815280614ee360048201614ea5565b0390fd5b614ef090610d1f565b9052565b92614f37614f4291614f29614f5999979894614f4c96614f1c60c08a019260008b0190610cc7565b88820360208a0152611303565b908682036040880152611303565b956060850190614ee7565b6080830190611420565b60a0818403910152611303565b90565b9491929094614f75614f7060018390611187565b611bf9565b93614f9c614f8286610f75565b614f95614f8f6000610c2a565b916106b1565b1415614ebe565b614faf82614fa989610f75565b9061534d565b614fd87f00000000000000000000000000000000000000000000000000000000000000006116ad565b9063c580310094919491929597909396853b1561505d5760009761500e9561501993615002610332565b9b8c9a8b998a98611f71565b885260048801614ef4565b03925af180156150585761502b575b50565b61504b9060003d8111615051575b6150438183610e43565b810190611f77565b38615028565b503d615039565b611f87565b611f6c565b9050519061506f8261034e565b565b90916060828403126150c05761508a8360008401615062565b9260208301519067ffffffffffffffff82116150bb576150af816150b8938601613996565b93604001612315565b90565b610342565b61033d565b9150506151066150e86150fb9360206150dd82610f75565b818301019101615071565b9491506150f56000610c2a565b90615438565b928290849091615492565b9091909161515261514061513a7fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf93610b0f565b936121f7565b93615149610332565b91829182610830565b0390a3565b60007f4c7a4170703a206d696e4761734c696d6974206e6f7420736574000000000000910152565b61518c601a60209261056d565b61519581615157565b0190565b6151af906020810190600081830391015261517f565b90565b156151b957565b6151c1610332565b62461bcd60e51b8152806151d760048201615199565b0390fd5b60007f4c7a4170703a20676173206c696d697420697320746f6f206c6f770000000000910152565b615210601b60209261056d565b615219816151db565b0190565b6152339060208101906000818303910152615203565b90565b1561523d57565b615245610332565b62461bcd60e51b81528061525b6004820161521d565b0390fd5b916152b66152c89461529261528d6152c1956152886152806152bb9761554d565b9860026113b0565b610b2b565b61225d565b946152b0866152aa6152a46000610c2a565b916106b1565b116151b2565b946124ff565b6106b1565b916106b1565b1015615236565b565b60007f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c61726765910152565b6152fe6020809261056d565b615307816152ca565b0190565b61532190602081019060008183039101526152f2565b90565b1561532b57565b615333610332565b62461bcd60e51b8152806153496004820161530b565b0390fd5b9061536461535f615399936003610b2b565b61225d565b90816153796153736000610c2a565b916106b1565b1461539b575b61538c61539291926106b1565b916106b1565b1115615324565b565b905061539261538c6153ab611763565b9291505061537f565b60007f746f416464726573735f6f75744f66426f756e64730000000000000000000000910152565b6153e9601560209261056d565b6153f2816153b4565b0190565b61540c90602081019060008183039101526153dc565b90565b1561541657565b61541e610332565b62461bcd60e51b815280615434600482016153f6565b0390fd5b906154416129a2565b5061547a61544e83610f75565b61547361546d615468856154626014612b7c565b906124ff565b6106b1565b916106b1565b101561540f565b6154826129a2565b506020600160601b920101510490565b506154a79061549f61223e565b5082906143b7565b90565b90565b6154c16154bc6154c6926154aa565b610b0c565b6106b1565b90565b60007f4c7a4170703a20696e76616c69642061646170746572506172616d7300000000910152565b6154fe601c60209261056d565b615507816154c9565b0190565b61552190602081019060008183039101526154f1565b90565b1561552b57565b615533610332565b62461bcd60e51b8152806155496004820161550b565b0390fd5b60229061555861223e565b5061557e61556582610f75565b615577615571856154ad565b916106b1565b1015615524565b01519056fea2646970667358221220ad79d55732a3666fa7d9565cde0beee8a39f95e55648cf5049c2cda0d28b8f5d64736f6c634300081b0033","abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"address","name":"_lzEndpoint","type":"address"},{"internalType":"address","name":"_delegate","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"indexed":false,"internalType":"uint64","name":"_nonce","type":"uint64"},{"indexed":false,"internalType":"bytes","name":"_payload","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"_reason","type":"bytes"}],"name":"MessageFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"ReceiveFromChain","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"indexed":false,"internalType":"uint64","name":"_nonce","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"_payloadHash","type":"bytes32"}],"name":"RetryMessageSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":false,"internalType":"bytes","name":"_toAddress","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"SendToChain","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"_type","type":"uint16"},{"indexed":false,"internalType":"uint256","name":"_minDstGas","type":"uint256"}],"name":"SetMinDstGas","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"precrime","type":"address"}],"name":"SetPrecrime","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_path","type":"bytes"}],"name":"SetTrustedRemote","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"SetTrustedRemoteAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"_useCustomAdapterParams","type":"bool"}],"name":"SetUseCustomAdapterParams","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DEFAULT_PAYLOAD_SIZE_LIMIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NO_EXTRA_GAS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PT_SEND","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoUSDVault","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"circulatingSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"bytes","name":"_toAddress","type":"bytes"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_useZro","type":"bool"},{"internalType":"bytes","name":"_adapterParams","type":"bytes"}],"name":"estimateSendFee","outputs":[{"internalType":"uint256","name":"nativeFee","type":"uint256"},{"internalType":"uint256","name":"zroFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"uint64","name":"","type":"uint64"}],"name":"failedMessages","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"_configType","type":"uint256"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"}],"name":"getTrustedRemoteAddress","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"isTrustedRemote","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lzEndpoint","outputs":[{"internalType":"contract ILayerZeroEndpoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint16","name":"","type":"uint16"}],"name":"minDstGasLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"nonblockingLzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"payloadSizeLimitLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"precrime","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"retryMessage","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"bytes","name":"_toAddress","type":"bytes"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address payable","name":"_refundAddress","type":"address"},{"internalType":"address","name":"_zroPaymentAddress","type":"address"},{"internalType":"bytes","name":"_adapterParams","type":"bytes"}],"name":"sendFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_bentoUSDVault","type":"address"}],"name":"setBentoUSDVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint16","name":"_packetType","type":"uint16"},{"internalType":"uint256","name":"_minGas","type":"uint256"}],"name":"setMinDstGas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint256","name":"_size","type":"uint256"}],"name":"setPayloadSizeLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_precrime","type":"address"}],"name":"setPrecrime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"internalType":"bytes","name":"_path","type":"bytes"}],"name":"setTrustedRemote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"setTrustedRemoteAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_useCustomAdapterParams","type":"bool"}],"name":"setUseCustomAdapterParams","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"trustedRemoteLookup","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"useCustomAdapterParams","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]}